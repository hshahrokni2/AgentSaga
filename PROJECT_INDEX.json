{
  "at": "2025-09-04T12:50:04.768465",
  "root": ".",
  "tree": [
    ".",
    "  ├── terraform/",
    "  ├── types/",
    "  ├── locales/",
    "    ├── sv/",
    "    ├── en/",
    "  ├── app/",
    "  ├── config/",
    "    ├── schemas/",
    "  ├── providers/",
    "  ├── tests/",
    "    ├── llm-tools/",
    "    ├── frontend/",
    "      ├── granskad/",
    "        ├── __mocks__/",
    "      ├── insights/",
    "      ├── __mocks__/",
    "      ├── copilot/",
    "      ├── navigation/",
    "      ├── components/"
  ],
  "stats": {
    "total_files": 202,
    "total_directories": 60,
    "fully_parsed": {
      "typescript": 134,
      "python": 36,
      "javascript": 7,
      "json": 13,
      "markdown": 12
    },
    "markdown_files": 12
  },
  "f": {
    "src/services/rag_service.py": [
      "p",
      [
        "_load_model",
        "_generate_answer",
        "_create_indexes",
        "_build_scope_levels",
        "extract_and_resolve_ids",
        "_calculate_confidence",
        "ScopedRetriever",
        "get_document_count",
        "provide_feedback",
        "parse_id"
      ]
    ],
    "src/services/llm_agent_gateway.py": [
      "p",
      [
        "_get_routing_reason",
        "CostTracker",
        "_determine_provider_order",
        "record_success",
        "record_consent",
        "class",
        "get_technical_term",
        "get_health_report",
        "store_data",
        "start"
      ]
    ],
    "src/services/scenario_engine.py": [
      "p",
      [
        "_select_provider",
        "_calculate_flag_counts",
        "_validate_insight_id",
        "_get_cache_key",
        "_gpt4_available",
        "resolve_insight_references",
        "from_id",
        "_calculate_data_quality",
        "to_dict",
        "ScenarioEngine"
      ]
    ],
    "src/services/rag_optimizer.py": [
      "p",
      [
        "_generate_cache_key",
        "_build_query_params",
        "BatchProcessor",
        "ConnectionPool",
        "IndexManager",
        "flush",
        "class",
        "QueryOptimizer",
        "close",
        "_health_check_loop"
      ]
    ],
    "src/services/storage_encryption_service.ts": [
      "t",
      [
        "catch",
        "constructor",
        "for",
        "if",
        "StorageEncryptionService"
      ]
    ],
    "src/services/evidence-pack-export.ts": [
      "t",
      [
        "catch",
        "while",
        "EvidencePackExporter",
        "constructor",
        "for",
        "if",
        "ComplianceValidator",
        "switch",
        "DataIntegrityValidator"
      ]
    ],
    "src/services/audit-logger.ts": [
      "t",
      [
        "catch",
        "constructor",
        "for",
        "if",
        "switch",
        "AuditLogger"
      ]
    ],
    "src/services/email_authentication_service.ts": [
      "t",
      [
        "catch",
        "constructor",
        "for",
        "if",
        "EmailAuthenticationService"
      ]
    ],
    "src/services/email_webhook_processor.ts": [
      "t",
      [
        "catch",
        "EmailWebhookProcessor",
        "constructor",
        "for",
        "if"
      ]
    ],
    "src/services/agent_audit.ts": [
      "t",
      [
        "catch",
        "constructor",
        "for",
        "if",
        "AgentAuditLogger"
      ]
    ],
    "src/services/agent_guardrails.ts": [
      "t",
      [
        "catch",
        "PIIDetectionError",
        "PolicyValidator",
        "ActionTracker",
        "PolicyViolationError",
        "TraceabilityError",
        "PIIDetector",
        "AgentGuardrails",
        "SecurityEnforcer",
        "UnauthorizedActionError"
      ]
    ],
    "src/services/evidence-pack-compliance.ts": [
      "t",
      [
        "catch",
        "constructor",
        "for",
        "EvidencePackComplianceValidator",
        "if"
      ]
    ],
    "src/services/evidence-pack-batch.ts": [
      "t",
      [
        "catch",
        "EvidencePackBatchProcessor",
        "while",
        "constructor",
        "for",
        "if",
        "processLoop"
      ]
    ],
    "src/services/object-storage-client.ts": [
      "t",
      [
        "catch",
        "ObjectStorageClient",
        "constructor",
        "if",
        "transition"
      ]
    ],
    "src/services/llm-tools/orchestrator.ts": [
      "t",
      [
        "ClaudeProvider",
        "createLLMToolOrchestrator",
        "if",
        "GeminiProvider",
        "ProposalHandler",
        "GPT4Provider",
        "AuditLogger"
      ]
    ],
    "src/services/llm-tools/schemas.ts": [
      "t",
      [
        "getToolSchemas",
        "if",
        "validateToolInput",
        "generateJSONSchemas"
      ]
    ],
    "src/services/llm-tools/index.ts": [
      "t",
      [
        "getAvailableTools",
        "to"
      ]
    ],
    "src/services/llm-tools/tools/reports-tool.ts": [
      "t",
      [
        "for",
        "ReportComposeTool",
        "if"
      ]
    ],
    "src/services/llm-tools/tools/warehouse-sql-tool.ts": [
      "t",
      [
        "WarehouseSQLTool",
        "for",
        "if"
      ]
    ],
    "src/services/llm-tools/tools/insights-tool.ts": [
      "t",
      [
        "InsightSearchTool",
        "InsightCreateTool",
        "InsightLinkTool",
        "InsightUpdateTool",
        "if"
      ]
    ],
    "src/services/llm-tools/tools/metrics-tool.ts": [
      "t",
      [
        "MetricsTool",
        "switch",
        "if"
      ]
    ],
    "src/services/llm-tools/tools/explain-rule-tool.ts": [
      "t",
      [
        "ExplainRuleTool",
        "if"
      ]
    ],
    "src/services/llm-tools/tools/scenarios-tool.ts": [
      "t",
      [
        "catch",
        "ScenarioPlanTool",
        "ScenarioRunTool",
        "if"
      ]
    ],
    "src/services/llm-tools/optimizations/performance-optimizer.ts": [
      "t",
      [
        "catch",
        "ConnectionPoolManager",
        "QueryOptimizer",
        "OptimizedToolOrchestrator",
        "CacheManager",
        "MetricsCollector",
        "BatchProcessor",
        "constructor",
        "for",
        "if"
      ]
    ],
    "src/services/llm-tools/base/tool-server.ts": [
      "t",
      [
        "catch",
        "export",
        "ToolOrchestrator",
        "SecurityValidator",
        "CircuitBreaker",
        "SwedishFormatter",
        "RateLimiter",
        "constructor",
        "for",
        "if"
      ]
    ],
    "components/insights/insights-list-interface.tsx": [
      "t",
      [
        "forEach",
        "toggleSelectAll",
        "getStatusBadge",
        "getSeverityIcon",
        "toggleSelection",
        "InsightsListInterface",
        "if",
        "copyToClipboard",
        "toggleRowExpansion"
      ]
    ],
    "components/ui/slider.tsx": [
      "t",
      [
        "handleChange"
      ]
    ],
    "components/ui/dialog.tsx": [
      "t",
      [
        "if"
      ]
    ],
    "components/ui/badge.tsx": [
      "t",
      [
        "Badge"
      ]
    ],
    "components/ui/month-range-picker.tsx": [
      "t",
      [
        "handleClear",
        "handleApply",
        "MonthRangePicker",
        "if",
        "formatDisplay"
      ]
    ],
    "components/ui/dropdown-menu.tsx": [
      "t",
      [
        "DropdownMenuShortcut"
      ]
    ],
    "components/ui/select.tsx": [
      "t",
      [
        "handleClick",
        "if",
        "handleClickOutside"
      ]
    ],
    "components/ui/skeleton.tsx": [
      "t",
      [
        "Skeleton"
      ]
    ],
    "components/copilot/CopilotDock.tsx": [
      "t",
      [
        "CopilotDock",
        "if"
      ]
    ],
    "components/copilot/ProposalCard.tsx": [
      "t",
      [
        "ProposalCard",
        "getConfidenceBadge",
        "if"
      ]
    ],
    "components/copilot/MessageList.tsx": [
      "t",
      [
        "MessageList",
        "renderMessage",
        "renderCitation",
        "if"
      ]
    ],
    "components/copilot/CopilotDock-old.tsx": [
      "t",
      [
        "exportConversation",
        "toggleLanguage",
        "CopilotDock",
        "handleSendMessage",
        "if",
        "handleKeyDown"
      ]
    ],
    "components/copilot/ToolCallVisualization.tsx": [
      "t",
      [
        "ToolCallVisualization",
        "switch",
        "getStatusText",
        "getStatusIcon"
      ]
    ],
    "components/layout/navigation-shell.tsx": [
      "t",
      [
        "switch",
        "handleKeyDown",
        "if",
        "handleItemClick"
      ]
    ],
    "components/dashboard/insight-card.tsx": [
      "t",
      [
        "handleCardClick",
        "if",
        "handleActionClick",
        "switch",
        "handleKeyDown"
      ]
    ],
    "components/dashboard/clearance-bar.tsx": [
      "t",
      [
        "handleKeyDown",
        "if",
        "handleSegmentClick"
      ]
    ],
    "components/dashboard/confidence-chip.tsx": [
      "t",
      [
        "ConfidenceIcon",
        "handleClick",
        "if",
        "switch",
        "handleKeyDown"
      ]
    ],
    "components/scenario-lab/InsightSearch.tsx": [
      "t",
      [
        "InsightSearch",
        "clearSelection",
        "handleSearchChange",
        "handleInsightToggle",
        "switch",
        "getSeverityColor"
      ]
    ],
    "components/scenario-lab/ParameterControls.tsx": [
      "t",
      [
        "ParameterControls"
      ]
    ],
    "components/scenario-lab/scenario-lab.tsx": [
      "t",
      [
        "ScenarioLab",
        "catch",
        "for",
        "if",
        "handleKeyDown"
      ]
    ],
    "components/scenario-lab/scenario-lab-old.tsx": [
      "t",
      [
        "ScenarioLab",
        "handleInsightSearch",
        "catch",
        "handleCreateInsight",
        "handleRun",
        "if",
        "handleParameterChange",
        "handleKeyDown",
        "handleInsightSelect",
        "handleSave"
      ]
    ],
    "components/scenario-lab/CohortPicker.tsx": [
      "t",
      [
        "CohortPicker",
        "handleMonthChange",
        "handleSupplierToggle"
      ]
    ],
    "components/scenario-lab/DiffVisualization.tsx": [
      "t",
      [
        "getStatusColor",
        "getChangeColor",
        "if",
        "getTrendIcon",
        "switch",
        "DiffVisualization"
      ]
    ],
    "components/findings/findings-triage-interface.tsx": [
      "t",
      [
        "handleClearFilters",
        "handleSaveFilterPreset",
        "handleLoadFilterPreset",
        "renderSeverityBadge",
        "renderSparkline",
        "handleExpandRow",
        "handleSelectAll",
        "switch",
        "for",
        "handleViewModeChange"
      ]
    ],
    "components/workflow/checklist-panel.tsx": [
      "t",
      [
        "ChecklistPanel",
        "getCategoryIcon",
        "if",
        "switch",
        "getStateDisplayName",
        "ChecklistItemRow",
        "handleToggle"
      ]
    ],
    "components/workflow/comment-drawer.tsx": [
      "t",
      [
        "CommentItem",
        "CommentDrawer",
        "getCommentFindings",
        "insertMarkdown",
        "getSelectedFindingsText",
        "handleAddComment",
        "handleCancel"
      ]
    ],
    "components/workflow/granskad-workflow.tsx": [
      "t",
      [
        "catch",
        "handleStateTransition",
        "handleFindingUpdate",
        "handleCommentAdd",
        "canMarkAsReviewed",
        "handleSnapshotConfirm",
        "getChecklistProgress",
        "handleChecklistItemToggle",
        "loadWorkflowData",
        "if"
      ]
    ],
    "components/workflow/findings-table.tsx": [
      "t",
      [
        "FindingRow",
        "handleRowClick",
        "getSeverityIcon",
        "handleStatusChange",
        "FindingsTable",
        "handleSelectAll",
        "handleSort",
        "if",
        "switch",
        "handleSelectFinding"
      ]
    ],
    "components/workflow/snapshot-dialog.tsx": [
      "t",
      [
        "catch",
        "handleConfirm",
        "SnapshotDialog",
        "generateDataHash",
        "for"
      ]
    ],
    "tests/test_agent_guardrails_safety.py": [
      "p",
      [
        "test_privilege_escalation_detection",
        "test_audit_search_and_compliance_reporting",
        "test_detect_english_pii",
        "test_trace_determinism_validation",
        "test_data_access_boundaries",
        "test_tool_permission_validation",
        "test_pii_redaction_suggestions",
        "TestPIIDetector",
        "test_audit_trail_integrity",
        "run_async_tests"
      ]
    ],
    "tests/test_llm_agent_gateway.py": [
      "p",
      [
        "test_gdpr_compliant_prompt_logging",
        "network_failure_then_success",
        "test_provider_service_degradation",
        "test_swedish_character_handling",
        "test_provider_fallback_chain",
        "degraded_response",
        "test_semantic_cache_matching",
        "TestCostManagement",
        "slow_response",
        "test_batch_processing_timeout"
      ]
    ],
    "tests/test_scenario_engine_determinism.py": [
      "p",
      [
        "test_seasonal_variations",
        "test_edge_case_empty_dataset",
        "test_performance_median_target",
        "test_diff_generation",
        "test_insight_referencing",
        "test_kpi_recalculation_anomaly_burden",
        "test_edge_case_invalid_parameters",
        "class",
        "import",
        "scenario_engine"
      ]
    ],
    "tests/test_dbt_models.py": [
      "p",
      [
        "test_macro_usage_in_models",
        "test_dbt_project_yml_exists",
        "test_dbt_run",
        "test_dbt_deps",
        "test_generate_docs",
        "test_profiles_yml_configuration",
        "test_dbt_source_definitions",
        "test_schema_tests",
        "test_model_documentation",
        "TestDbtDocumentation"
      ]
    ],
    "tests/test_human_friendly_ids.py": [
      "p",
      [
        "test_id_range_query_performance",
        "test_insight_id_format",
        "test_custom_prefix_support",
        "id_generator",
        "test_scenario_id_format",
        "test_id_persistence",
        "test_sequence_gap_handling",
        "test_id_validation",
        "test_id_audit_trail",
        "test_id_prefix_index"
      ]
    ],
    "tests/test_database_schema.py": [
      "p",
      [
        "test_checklist_run_table",
        "db_engine",
        "test_check_constraints",
        "test_migration_rollback_safety",
        "test_migration_scripts_exist",
        "test_swedish_text_columns",
        "TestDatabaseConstraints",
        "test_not_null_constraints",
        "test_migration_data_preservation",
        "TestDatabaseSchemaCreation"
      ]
    ],
    "tests/test_xlsx_parser.py": [
      "p",
      [
        "test_parse_xlsx_invalid_file_format",
        "TestSwedishXLSXParser",
        "TestXLSXParserPerformance",
        "test_parse_xlsx_large_file_streaming",
        "tearDown",
        "test_parse_xlsx_empty_file",
        "setUp",
        "test_memory_efficient_parsing",
        "test_parse_xlsx_with_mixed_encoding",
        "test_parse_performance_small_file"
      ]
    ],
    "tests/test_duckdb_analytics.py": [
      "p",
      [
        "test_category_analysis_performance",
        "test_window_functions_performance",
        "setup_test_data",
        "test_duckdb_postgres_connection",
        "test_columnar_storage_benefits",
        "test_query_plan_optimization",
        "test_transaction_consistency",
        "test_real_time_sync",
        "test_monthly_aggregation_performance",
        "test_anomaly_detection_query"
      ]
    ],
    "tests/test_cross_database_consistency.py": [
      "p",
      [
        "TestComplianceValidation",
        "test_concurrent_write_consistency",
        "test_key_rotation",
        "duck_connection",
        "test_schema_evolution_sync",
        "test_encryption_in_transit",
        "test_gdpr_compliance_checklist",
        "test_encryption_at_rest",
        "test_transaction_atomicity",
        "TestDataRetention"
      ]
    ],
    "tests/test_eu_format_handler.py": [
      "p",
      [
        "test_parse_two_digit_years",
        "test_confidence_scoring",
        "test_batch_parse_dates",
        "test_invalid_format_handling",
        "test_normalize_to_iso",
        "TestEUDateParser",
        "test_handle_scientific_notation",
        "test_auto_detect_decimal_format",
        "test_convert_us_decimal_dot",
        "test_large_dataset_conversion"
      ]
    ],
    "tests/test_index_performance.py": [
      "p",
      [
        "test_index_fragmentation_monitoring",
        "test_multicolumn_statistics",
        "TestIndexPerformance",
        "test_covering_index_performance",
        "test_supplier_month_combo_query_performance",
        "test_partial_index_efficiency",
        "test_supplier_query_performance",
        "test_gin_index_for_jsonb",
        "setup_large_dataset",
        "query_task"
      ]
    ],
    "tests/test_pgvector_performance.py": [
      "p",
      [
        "test_embedding_insertion_performance",
        "test_vector_index_size_and_performance",
        "test_null_embedding_handling",
        "embedding_model",
        "search_task",
        "swedish_model",
        "test_similarity_search_performance",
        "cls",
        "test_filtered_similarity_search_performance",
        "test_swedish_semantic_similarity"
      ]
    ],
    "tests/test_rag_system.py": [
      "p",
      [
        "sample_documents",
        "rag_service",
        "TestEmbeddingGeneration",
        "test_cross_table_search",
        "test_hierarchical_fallback",
        "test_batch_id_resolution",
        "test_rag_with_context_window_management",
        "test_supplier_scoped_retrieval",
        "test_similarity_search_relevance",
        "sample_texts"
      ]
    ],
    "tests/test_personnummer_validator.py": [
      "p",
      [
        "test_redact_with_full_masking",
        "test_validate_invalid_date",
        "test_redact_audit_log",
        "test_redact_with_partial_masking",
        "test_redact_personnummer_in_text",
        "test_validate_and_redact_pipeline",
        "test_validate_coordination_number",
        "test_validate_invalid_luhn_checksum",
        "test_redact_multiple_formats",
        "test_redact_performance"
      ]
    ],
    "tests/test_claude_code_hooks.py": [
      "p",
      [
        "test_pre_write_validation_hook",
        "async_validator",
        "test_hook_interruption_on_failure",
        "tearDown",
        "test_validate_personnummer_compliance",
        "test_validation_caching",
        "test_mcp_resource_access",
        "TestMCPToolIntegration",
        "test_register_hooks",
        "test_full_validation_pipeline"
      ]
    ],
    "tests/llm-tools/test_scenarios_tool.ts": [
      "t",
      [
        "for"
      ]
    ],
    "tests/llm-tools/test_warehouse_sql_tool.ts": [
      "t",
      [
        "for"
      ]
    ],
    "tests/llm-tools/test_llm_integration.ts": [
      "t",
      [
        "for",
        "if"
      ]
    ],
    "tests/llm-tools/setup.ts": [
      "t",
      [
        "catch",
        "createMockLogger",
        "mockPerformanceNow",
        "generateSwedishTestData",
        "createMockCache",
        "createMockDatabase",
        "createMockProvider",
        "if",
        "createMockTool"
      ]
    ],
    "tests/llm-tools/test_explain_rule_tool.ts": [
      "t",
      [
        "if"
      ]
    ],
    "tests/frontend/granskad/setup.ts": [
      "t",
      [
        "length",
        "ResizeObserver",
        "generateMockPersonnummer",
        "mockSwedishDate",
        "function",
        "IntersectionObserver",
        "waitForAsync",
        "observe",
        "takeRecords",
        "localStorageMock"
      ]
    ],
    "tests/frontend/__mocks__/simple-server.ts": [
      "t",
      [
        "if"
      ]
    ],
    "tests/frontend/__mocks__/findings-mocks.ts": [
      "t",
      [
        "for",
        "filterFindings",
        "generateMockFindings",
        "to"
      ]
    ],
    "tests/frontend/__mocks__/server.ts": [
      "t",
      [
        "if"
      ]
    ],
    "tests/frontend/scenario-lab/mocks/scenario-mocks.ts": [
      "t",
      [
        "simulateKPIUpdate",
        "simulateError",
        "MockScenarioWebSocket",
        "connect",
        "mockScenarioAPI",
        "disconnect",
        "for",
        "generateMockHeatmapData",
        "if",
        "simulateProgressUpdate"
      ]
    ],
    "tests/infrastructure/email-webhook-processor.test.ts": [
      "t",
      [
        "for",
        "if"
      ]
    ],
    "tests/infrastructure/storage-encryption.test.ts": [
      "t",
      [
        "catch",
        "for"
      ]
    ]
  },
  "g": [],
  "dir_purposes": {
    "src/services": "Business logic and service implementations",
    "src/services/llm-tools": "LLM tool server and function calling",
    "components": "React UI components",
    "components/copilot": "AI copilot interface components",
    "components/scenario-lab": "Scenario planning UI",
    "tests": "Test suites and test utilities",
    "config": "Configuration files"
  },
  "staleness": 1756983004
}