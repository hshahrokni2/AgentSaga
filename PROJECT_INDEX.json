{
  "at": "2025-09-04T06:57:23.654043",
  "root": ".",
  "tree": [
    ".",
    "  ├── terraform/",
    "  ├── locales/",
    "    ├── sv/",
    "    ├── en/",
    "  ├── app/",
    "  ├── config/",
    "    ├── schemas/",
    "  ├── providers/",
    "  ├── tests/",
    "    ├── llm-tools/",
    "    ├── frontend/",
    "      ├── granskad/",
    "        ├── __mocks__/",
    "      ├── copilot/",
    "      ├── navigation/",
    "      ├── components/",
    "      ├── scenario-lab/",
    "        ├── mocks/",
    "      ├── theme/"
  ],
  "stats": {
    "total_files": 167,
    "total_directories": 52,
    "fully_parsed": {
      "typescript": 102,
      "python": 36,
      "javascript": 7,
      "json": 13,
      "markdown": 9
    },
    "markdown_files": 9
  },
  "f": {
    "src/services/rag_service.py": [
      "p",
      [
        "batch_resolve",
        "_create_indexes",
        "VectorStore",
        "resolve_to_embedding",
        "__aiter__",
        "query",
        "set_embedding_store",
        "search",
        "_build_scope_levels",
        "_truncate_to_token_limit"
      ]
    ],
    "src/services/llm_agent_gateway.py": [
      "p",
      [
        "_get_routing_reason",
        "_call_gemini_pro",
        "get_health_report",
        "TokenCountError",
        "get_provider_config",
        "set_budget_alert_handler",
        "PromptOptimizer",
        "get_audit_trail",
        "__init__",
        "_determine_provider_order"
      ]
    ],
    "src/services/scenario_engine.py": [
      "p",
      [
        "get_version_history",
        "format_diff_swedish",
        "calculate_review_progress",
        "DeterminismError",
        "_calculate_kpis",
        "create_snapshot",
        "ScenarioEngine",
        "_load_swedish_holidays",
        "generate_flag_diff",
        "calculate_completeness"
      ]
    ],
    "src/services/rag_optimizer.py": [
      "p",
      [
        "parallel_search",
        "optimize_for_recall",
        "delete",
        "ConnectionPool",
        "_process_batch",
        "flush",
        "initialize",
        "acquire",
        "_check_index_usage",
        "_cache_result"
      ]
    ],
    "src/services/storage_encryption_service.ts": [
      "t",
      [
        "if",
        "for",
        "StorageEncryptionService",
        "constructor",
        "catch"
      ]
    ],
    "src/services/evidence-pack-export.ts": [
      "t",
      [
        "if",
        "DataIntegrityValidator",
        "switch",
        "for",
        "ComplianceValidator",
        "constructor",
        "catch",
        "EvidencePackExporter",
        "while"
      ]
    ],
    "src/services/audit-logger.ts": [
      "t",
      [
        "if",
        "for",
        "constructor",
        "catch",
        "AuditLogger",
        "switch"
      ]
    ],
    "src/services/email_authentication_service.ts": [
      "t",
      [
        "EmailAuthenticationService",
        "if",
        "for",
        "constructor",
        "catch"
      ]
    ],
    "src/services/email_webhook_processor.ts": [
      "t",
      [
        "if",
        "EmailWebhookProcessor",
        "for",
        "constructor",
        "catch"
      ]
    ],
    "src/services/agent_audit.ts": [
      "t",
      [
        "if",
        "for",
        "constructor",
        "catch",
        "AgentAuditLogger"
      ]
    ],
    "src/services/agent_guardrails.ts": [
      "t",
      [
        "if",
        "UnauthorizedActionError",
        "AgentGuardrails",
        "ConfirmationRequiredError",
        "for",
        "PIIDetectionError",
        "PIIDetector",
        "constructor",
        "catch",
        "TraceabilityError"
      ]
    ],
    "src/services/evidence-pack-compliance.ts": [
      "t",
      [
        "if",
        "for",
        "constructor",
        "catch",
        "EvidencePackComplianceValidator"
      ]
    ],
    "src/services/evidence-pack-batch.ts": [
      "t",
      [
        "if",
        "for",
        "constructor",
        "processLoop",
        "catch",
        "while",
        "EvidencePackBatchProcessor"
      ]
    ],
    "src/services/object-storage-client.ts": [
      "t",
      [
        "if",
        "constructor",
        "catch",
        "transition",
        "ObjectStorageClient"
      ]
    ],
    "src/services/llm-tools/orchestrator.ts": [
      "t",
      [
        "if",
        "ClaudeProvider",
        "ProposalHandler",
        "GPT4Provider",
        "createLLMToolOrchestrator",
        "AuditLogger",
        "GeminiProvider"
      ]
    ],
    "src/services/llm-tools/schemas.ts": [
      "t",
      [
        "validateToolInput",
        "if",
        "generateJSONSchemas",
        "getToolSchemas"
      ]
    ],
    "src/services/llm-tools/index.ts": [
      "t",
      [
        "getAvailableTools",
        "to"
      ]
    ],
    "src/services/llm-tools/tools/reports-tool.ts": [
      "t",
      [
        "ReportComposeTool",
        "if",
        "for"
      ]
    ],
    "src/services/llm-tools/tools/warehouse-sql-tool.ts": [
      "t",
      [
        "if",
        "for",
        "WarehouseSQLTool"
      ]
    ],
    "src/services/llm-tools/tools/insights-tool.ts": [
      "t",
      [
        "if",
        "InsightCreateTool",
        "InsightUpdateTool",
        "InsightSearchTool",
        "InsightLinkTool"
      ]
    ],
    "src/services/llm-tools/tools/metrics-tool.ts": [
      "t",
      [
        "if",
        "switch",
        "MetricsTool"
      ]
    ],
    "src/services/llm-tools/tools/explain-rule-tool.ts": [
      "t",
      [
        "if",
        "ExplainRuleTool"
      ]
    ],
    "src/services/llm-tools/tools/scenarios-tool.ts": [
      "t",
      [
        "catch",
        "if",
        "ScenarioRunTool",
        "ScenarioPlanTool"
      ]
    ],
    "src/services/llm-tools/optimizations/performance-optimizer.ts": [
      "t",
      [
        "if",
        "CacheManager",
        "RequestRouter",
        "ConnectionPoolManager",
        "BatchProcessor",
        "for",
        "OptimizedToolOrchestrator",
        "constructor",
        "catch",
        "QueryOptimizer"
      ]
    ],
    "src/services/llm-tools/base/tool-server.ts": [
      "t",
      [
        "if",
        "SwedishFormatter",
        "for",
        "export",
        "RateLimiter",
        "ToolOrchestrator",
        "SecurityValidator",
        "constructor",
        "catch",
        "BaseTool"
      ]
    ],
    "components/ui/slider.tsx": [
      "t",
      [
        "handleChange"
      ]
    ],
    "components/ui/dialog.tsx": [
      "t",
      [
        "if"
      ]
    ],
    "components/ui/badge.tsx": [
      "t",
      [
        "Badge"
      ]
    ],
    "components/ui/select.tsx": [
      "t",
      [
        "if",
        "handleClick",
        "handleClickOutside"
      ]
    ],
    "components/copilot/CopilotDock.tsx": [
      "t",
      [
        "if",
        "CopilotDock"
      ]
    ],
    "components/copilot/ProposalCard.tsx": [
      "t",
      [
        "if",
        "ProposalCard",
        "getConfidenceBadge"
      ]
    ],
    "components/copilot/MessageList.tsx": [
      "t",
      [
        "MessageList",
        "renderMessage",
        "if",
        "renderCitation"
      ]
    ],
    "components/copilot/CopilotDock-old.tsx": [
      "t",
      [
        "handleSendMessage",
        "if",
        "exportConversation",
        "toggleLanguage",
        "CopilotDock",
        "handleKeyDown"
      ]
    ],
    "components/copilot/ToolCallVisualization.tsx": [
      "t",
      [
        "getStatusText",
        "ToolCallVisualization",
        "switch",
        "getStatusIcon"
      ]
    ],
    "components/layout/navigation-shell.tsx": [
      "t",
      [
        "handleItemClick",
        "if",
        "switch",
        "handleKeyDown"
      ]
    ],
    "components/dashboard/insight-card.tsx": [
      "t",
      [
        "if",
        "handleActionClick",
        "handleCardClick",
        "handleKeyDown",
        "switch"
      ]
    ],
    "components/dashboard/clearance-bar.tsx": [
      "t",
      [
        "if",
        "handleSegmentClick",
        "handleKeyDown"
      ]
    ],
    "components/dashboard/confidence-chip.tsx": [
      "t",
      [
        "if",
        "handleKeyDown",
        "switch",
        "handleClick",
        "ConfidenceIcon"
      ]
    ],
    "components/scenario-lab/InsightSearch.tsx": [
      "t",
      [
        "handleSearchChange",
        "clearSelection",
        "getSeverityColor",
        "InsightSearch",
        "switch",
        "handleInsightToggle"
      ]
    ],
    "components/scenario-lab/ParameterControls.tsx": [
      "t",
      [
        "ParameterControls"
      ]
    ],
    "components/scenario-lab/scenario-lab.tsx": [
      "t",
      [
        "if",
        "for",
        "catch",
        "ScenarioLab",
        "handleKeyDown"
      ]
    ],
    "components/scenario-lab/scenario-lab-old.tsx": [
      "t",
      [
        "handleInsightSearch",
        "handleSupplierSelect",
        "if",
        "handleRun",
        "handleParameterChange",
        "handleCreateInsight",
        "ScenarioLab",
        "catch",
        "handleKeyDown",
        "handleInsightSelect"
      ]
    ],
    "components/scenario-lab/CohortPicker.tsx": [
      "t",
      [
        "CohortPicker",
        "handleSupplierToggle",
        "handleMonthChange"
      ]
    ],
    "components/scenario-lab/DiffVisualization.tsx": [
      "t",
      [
        "if",
        "DiffVisualization",
        "getStatusColor",
        "getTrendIcon",
        "getChangeColor",
        "switch"
      ]
    ],
    "components/workflow/checklist-panel.tsx": [
      "t",
      [
        "getCategoryIcon",
        "if",
        "switch",
        "getStateDisplayName",
        "handleToggle",
        "ChecklistItemRow",
        "ChecklistPanel"
      ]
    ],
    "components/workflow/comment-drawer.tsx": [
      "t",
      [
        "handleCancel",
        "getSelectedFindingsText",
        "getCommentFindings",
        "CommentDrawer",
        "CommentItem",
        "handleAddComment",
        "insertMarkdown"
      ]
    ],
    "components/workflow/granskad-workflow.tsx": [
      "t",
      [
        "canMarkAsReviewed",
        "if",
        "handleCommentAdd",
        "map",
        "handleChecklistItemToggle",
        "handleSnapshotConfirm",
        "getStateDisplayName",
        "catch",
        "handleFindingUpdate",
        "loadWorkflowData"
      ]
    ],
    "components/workflow/findings-table.tsx": [
      "t",
      [
        "getSeverityIcon",
        "handleSelectFinding",
        "if",
        "FindingsTable",
        "handleSelectAll",
        "handleRowClick",
        "FindingRow",
        "handleSort",
        "switch",
        "handleStatusChange"
      ]
    ],
    "components/workflow/snapshot-dialog.tsx": [
      "t",
      [
        "for",
        "handleConfirm",
        "catch",
        "generateDataHash",
        "SnapshotDialog"
      ]
    ],
    "tests/test_agent_guardrails_safety.py": [
      "p",
      [
        "test_trace_llm_interaction",
        "test_data_access_boundaries",
        "test_trace_determinism_validation",
        "TestPIIDetector",
        "test_detect_english_pii",
        "test_trace_write_actions",
        "test_tool_permission_validation",
        "test_audit_trail_integrity",
        "test_detect_swedish_personnummer",
        "test_pii_redaction_suggestions"
      ]
    ],
    "tests/test_llm_agent_gateway.py": [
      "p",
      [
        "test_concurrent_request_handling",
        "test_provider_health_monitoring",
        "test_batch_processing_multiple_requests",
        "test_context_window_management",
        "test_regional_endpoint_routing",
        "test_memory_pressure_handling",
        "gateway",
        "TestIntegrationScenarios",
        "TestEdgeCasesAndErrorHandling",
        "compliance_manager"
      ]
    ],
    "tests/test_scenario_engine_determinism.py": [
      "p",
      [
        "test_swedish_municipality_handling",
        "test_transaction_rollback",
        "valid_scenario_params",
        "test_swedish_regulatory_compliance",
        "test_json_schema_validation",
        "test_kpi_recalculation_review_progress",
        "import",
        "test_edge_case_empty_dataset",
        "test_seasonal_variations",
        "test_swedish_waste_categories"
      ]
    ],
    "tests/test_dbt_models.py": [
      "p",
      [
        "TestDbtDocumentation",
        "test_dbt_test_execution",
        "test_dbt_snapshot",
        "test_model_performance",
        "test_custom_macros_exist",
        "TestDbtExecution",
        "test_custom_tests",
        "TestDbtTests",
        "TestDbtModels",
        "dbt_project_dir"
      ]
    ],
    "tests/test_human_friendly_ids.py": [
      "p",
      [
        "test_id_sequence_increment",
        "test_id_range_query_performance",
        "test_scenario_id_format",
        "test_id_validation",
        "test_id_prefix_index",
        "test_id_persistence",
        "test_concurrent_id_generation",
        "test_insight_id_format",
        "test_custom_prefix_support",
        "test_id_recovery_after_failure"
      ]
    ],
    "tests/test_database_schema.py": [
      "p",
      [
        "db_session",
        "test_migration_scripts_exist",
        "test_supplier_month_composite_index",
        "test_migration_up_down",
        "TestDatabaseConstraints",
        "test_finding_table_with_embeddings",
        "test_vector_similarity_index",
        "TestDatabaseSchemaCreation",
        "test_swedish_text_columns",
        "test_check_constraints"
      ]
    ],
    "tests/test_xlsx_parser.py": [
      "p",
      [
        "tearDown",
        "test_parse_xlsx_with_swedish_characters_in_headers",
        "test_parse_xlsx_with_formulas",
        "test_parse_performance_small_file",
        "test_memory_efficient_parsing",
        "TestSwedishXLSXParser",
        "test_parse_xlsx_empty_file",
        "setUp",
        "test_parse_xlsx_with_mixed_encoding",
        "test_parse_xlsx_with_swedish_characters_in_data"
      ]
    ],
    "tests/test_duckdb_analytics.py": [
      "p",
      [
        "test_parquet_export_performance",
        "TestAnalyticsOptimization",
        "pg_connection",
        "test_window_functions_performance",
        "test_real_time_sync",
        "test_pivot_table_generation",
        "setup_test_data",
        "test_query_plan_optimization",
        "test_analytics_view_creation",
        "test_anomaly_detection_query"
      ]
    ],
    "tests/test_cross_database_consistency.py": [
      "p",
      [
        "write_task",
        "test_automated_data_deletion",
        "pg_connection",
        "test_row_count_consistency",
        "test_encryption_at_rest",
        "test_data_processing_records",
        "TestDataEncryption",
        "TestComplianceValidation",
        "test_concurrent_write_consistency",
        "test_transaction_atomicity"
      ]
    ],
    "tests/test_eu_format_handler.py": [
      "p",
      [
        "test_detect_column_types_in_data",
        "test_format_output",
        "test_normalize_to_iso",
        "TestDecimalConverter",
        "test_large_dataset_conversion",
        "test_preserve_precision",
        "test_parse_invalid_dates",
        "test_convert_currency_amounts",
        "test_invalid_format_handling",
        "test_convert_us_decimal_dot"
      ]
    ],
    "tests/test_index_performance.py": [
      "p",
      [
        "test_supplier_month_combo_query_performance",
        "query_task",
        "test_covering_index_performance",
        "test_concurrent_index_access",
        "setup_large_dataset",
        "db_connection",
        "test_composite_index_creation",
        "c",
        "test_multicolumn_statistics",
        "test_expression_index"
      ]
    ],
    "tests/test_pgvector_performance.py": [
      "p",
      [
        "test_concurrent_vector_operations",
        "test_embedding_dimension_consistency",
        "db_connection",
        "TestEmbeddingQuality",
        "test_similarity_search_performance",
        "test_rag_context_retrieval_performance",
        "insert_task",
        "sample_embeddings",
        "test_multi_vector_search_performance",
        "test_null_embedding_handling"
      ]
    ],
    "tests/test_rag_system.py": [
      "p",
      [
        "test_batch_id_resolution",
        "TestRAGPerformanceAndScaling",
        "test_id_parsing_and_validation",
        "embedding_generator",
        "test_hierarchical_fallback",
        "test_concurrent_queries",
        "TestRAGSystemIntegration",
        "doesn",
        "test_cross_table_search",
        "test_embedding_generation_accuracy"
      ]
    ],
    "tests/test_personnummer_validator.py": [
      "p",
      [
        "test_redact_with_full_masking",
        "test_redact_with_allowlist",
        "TestPersonnummerIntegration",
        "test_batch_validation",
        "test_redact_preserves_context",
        "test_validate_invalid_luhn_checksum",
        "test_validate_temporary_number",
        "test_redact_in_dataframe",
        "test_validate_invalid_date",
        "TestPersonnummerRedactor"
      ]
    ],
    "tests/test_claude_code_hooks.py": [
      "p",
      [
        "test_conditional_hook_execution",
        "TestClaudeCodeIntegrationScenarios",
        "TestMCPToolIntegration",
        "test_batch_file_validation",
        "test_mcp_tool_async_execution",
        "test_validation_caching",
        "add_metadata",
        "TestClaudeCodeHookManager",
        "test_hook_metrics_collection",
        "test_execute_hook_chain"
      ]
    ],
    "tests/llm-tools/test_scenarios_tool.ts": [
      "t",
      [
        "for"
      ]
    ],
    "tests/llm-tools/test_warehouse_sql_tool.ts": [
      "t",
      [
        "for"
      ]
    ],
    "tests/llm-tools/test_llm_integration.ts": [
      "t",
      [
        "if",
        "for"
      ]
    ],
    "tests/llm-tools/setup.ts": [
      "t",
      [
        "if",
        "createMockLogger",
        "createMockTool",
        "createMockDatabase",
        "createMockCache",
        "createMockProvider",
        "catch",
        "generateSwedishTestData",
        "mockPerformanceNow"
      ]
    ],
    "tests/llm-tools/test_explain_rule_tool.ts": [
      "t",
      [
        "if"
      ]
    ],
    "tests/frontend/granskad/setup.ts": [
      "t",
      [
        "length",
        "waitForAsync",
        "takeRecords",
        "mockSwedishDate",
        "disconnect",
        "ResizeObserver",
        "observe",
        "localStorageMock",
        "constructor",
        "function"
      ]
    ],
    "tests/frontend/scenario-lab/mocks/scenario-mocks.ts": [
      "t",
      [
        "if",
        "connect",
        "simulateError",
        "MockScenarioWebSocket",
        "disconnect",
        "for",
        "simulateProgressUpdate",
        "mockScenarioAPI",
        "simulateKPIUpdate",
        "emit"
      ]
    ],
    "tests/infrastructure/email-webhook-processor.test.ts": [
      "t",
      [
        "if",
        "for"
      ]
    ],
    "tests/infrastructure/storage-encryption.test.ts": [
      "t",
      [
        "catch",
        "for"
      ]
    ]
  },
  "g": [],
  "dir_purposes": {
    "src/services": "Business logic and service implementations",
    "src/services/llm-tools": "LLM tool server and function calling",
    "components": "React UI components",
    "components/copilot": "AI copilot interface components",
    "components/scenario-lab": "Scenario planning UI",
    "tests": "Test suites and test utilities",
    "config": "Configuration files"
  },
  "staleness": 1756961843
}