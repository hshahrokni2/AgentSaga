{
  "at": "2025-09-04T00:28:30.365349",
  "root": ".",
  "tree": [
    ".",
    "  ├── terraform/",
    "  ├── locales/",
    "    ├── sv/",
    "    ├── en/",
    "  ├── app/",
    "  ├── config/",
    "    ├── schemas/",
    "  ├── providers/",
    "  ├── tests/",
    "    ├── llm-tools/",
    "    ├── frontend/",
    "      ├── granskad/",
    "        ├── __mocks__/",
    "      ├── copilot/",
    "      ├── navigation/",
    "      ├── components/",
    "      ├── scenario-lab/",
    "        ├── mocks/",
    "      ├── theme/"
  ],
  "stats": {
    "total_files": 165,
    "total_directories": 52,
    "fully_parsed": {
      "typescript": 102,
      "python": 34,
      "javascript": 7,
      "json": 13,
      "markdown": 9
    },
    "markdown_files": 9
  },
  "f": {
    "src/services/rag_service.py": [
      "p",
      [
        "hybrid_search",
        "provide_feedback",
        "initialize",
        "_encode_batch",
        "ScopedRetriever",
        "retrieve",
        "extract_and_resolve_ids",
        "_create_indexes",
        "generate_embeddings",
        "query"
      ]
    ],
    "src/services/scenario_engine.py": [
      "p",
      [
        "_validate_insight_id",
        "_calculate_flag_counts",
        "verify_integrity",
        "calculate_completeness",
        "_corrupt_snapshot_for_testing",
        "ScenarioValidationError",
        "create_snapshot",
        "to_dict",
        "execute_scenario",
        "KPICalculator"
      ]
    ],
    "src/services/rag_optimizer.py": [
      "p",
      [
        "start_maintenance",
        "optimize_for_recall",
        "search_with_optimization",
        "set",
        "initialize",
        "delete",
        "optimize_search_query",
        "LRUCache",
        "RedisCache",
        "__init__"
      ]
    ],
    "src/services/storage_encryption_service.ts": [
      "t",
      [
        "if",
        "StorageEncryptionService",
        "constructor",
        "catch",
        "for"
      ]
    ],
    "src/services/evidence-pack-export.ts": [
      "t",
      [
        "switch",
        "ComplianceValidator",
        "DataIntegrityValidator",
        "if",
        "constructor",
        "catch",
        "while",
        "EvidencePackExporter",
        "for"
      ]
    ],
    "src/services/audit-logger.ts": [
      "t",
      [
        "switch",
        "AuditLogger",
        "if",
        "constructor",
        "catch",
        "for"
      ]
    ],
    "src/services/email_authentication_service.ts": [
      "t",
      [
        "if",
        "constructor",
        "catch",
        "for",
        "EmailAuthenticationService"
      ]
    ],
    "src/services/email_webhook_processor.ts": [
      "t",
      [
        "if",
        "constructor",
        "catch",
        "for",
        "EmailWebhookProcessor"
      ]
    ],
    "src/services/agent_audit.ts": [
      "t",
      [
        "AgentAuditLogger",
        "if",
        "constructor",
        "catch",
        "for"
      ]
    ],
    "src/services/agent_guardrails.ts": [
      "t",
      [
        "switch",
        "PolicyValidator",
        "PIIDetectionError",
        "if",
        "ActionTracker",
        "ConfirmationWorkflow",
        "PolicyViolationError",
        "PIIDetector",
        "constructor",
        "catch"
      ]
    ],
    "src/services/evidence-pack-compliance.ts": [
      "t",
      [
        "if",
        "constructor",
        "catch",
        "for",
        "EvidencePackComplianceValidator"
      ]
    ],
    "src/services/evidence-pack-batch.ts": [
      "t",
      [
        "if",
        "processLoop",
        "constructor",
        "EvidencePackBatchProcessor",
        "catch",
        "while",
        "for"
      ]
    ],
    "src/services/object-storage-client.ts": [
      "t",
      [
        "ObjectStorageClient",
        "if",
        "transition",
        "constructor",
        "catch"
      ]
    ],
    "src/services/llm-tools/orchestrator.ts": [
      "t",
      [
        "GeminiProvider",
        "AuditLogger",
        "ClaudeProvider",
        "if",
        "GPT4Provider",
        "createLLMToolOrchestrator",
        "ProposalHandler"
      ]
    ],
    "src/services/llm-tools/schemas.ts": [
      "t",
      [
        "if",
        "generateJSONSchemas",
        "validateToolInput",
        "getToolSchemas"
      ]
    ],
    "src/services/llm-tools/index.ts": [
      "t",
      [
        "getAvailableTools",
        "to"
      ]
    ],
    "src/services/llm-tools/tools/reports-tool.ts": [
      "t",
      [
        "ReportComposeTool",
        "for",
        "if"
      ]
    ],
    "src/services/llm-tools/tools/warehouse-sql-tool.ts": [
      "t",
      [
        "for",
        "WarehouseSQLTool",
        "if"
      ]
    ],
    "src/services/llm-tools/tools/insights-tool.ts": [
      "t",
      [
        "if",
        "InsightSearchTool",
        "InsightCreateTool",
        "InsightUpdateTool",
        "InsightLinkTool"
      ]
    ],
    "src/services/llm-tools/tools/metrics-tool.ts": [
      "t",
      [
        "switch",
        "MetricsTool",
        "if"
      ]
    ],
    "src/services/llm-tools/tools/explain-rule-tool.ts": [
      "t",
      [
        "ExplainRuleTool",
        "if"
      ]
    ],
    "src/services/llm-tools/tools/scenarios-tool.ts": [
      "t",
      [
        "catch",
        "ScenarioPlanTool",
        "if",
        "ScenarioRunTool"
      ]
    ],
    "src/services/llm-tools/optimizations/performance-optimizer.ts": [
      "t",
      [
        "ConnectionPoolManager",
        "if",
        "CacheManager",
        "MetricsCollector",
        "QueryOptimizer",
        "constructor",
        "catch",
        "OptimizedToolOrchestrator",
        "for",
        "BatchProcessor"
      ]
    ],
    "src/services/llm-tools/base/tool-server.ts": [
      "t",
      [
        "CircuitBreaker",
        "SwedishFormatter",
        "export",
        "if",
        "SecurityValidator",
        "RateLimiter",
        "ToolOrchestrator",
        "constructor",
        "catch",
        "BaseTool"
      ]
    ],
    "components/ui/slider.tsx": [
      "t",
      [
        "handleChange"
      ]
    ],
    "components/ui/dialog.tsx": [
      "t",
      [
        "if"
      ]
    ],
    "components/ui/badge.tsx": [
      "t",
      [
        "Badge"
      ]
    ],
    "components/ui/select.tsx": [
      "t",
      [
        "handleClick",
        "if",
        "handleClickOutside"
      ]
    ],
    "components/copilot/CopilotDock.tsx": [
      "t",
      [
        "CopilotDock",
        "if"
      ]
    ],
    "components/copilot/ProposalCard.tsx": [
      "t",
      [
        "if",
        "ProposalCard",
        "getConfidenceBadge"
      ]
    ],
    "components/copilot/MessageList.tsx": [
      "t",
      [
        "renderCitation",
        "MessageList",
        "renderMessage",
        "if"
      ]
    ],
    "components/copilot/CopilotDock-old.tsx": [
      "t",
      [
        "if",
        "toggleLanguage",
        "CopilotDock",
        "handleSendMessage",
        "exportConversation",
        "handleKeyDown"
      ]
    ],
    "components/copilot/ToolCallVisualization.tsx": [
      "t",
      [
        "switch",
        "ToolCallVisualization",
        "getStatusText",
        "getStatusIcon"
      ]
    ],
    "components/layout/navigation-shell.tsx": [
      "t",
      [
        "if",
        "switch",
        "handleKeyDown",
        "handleItemClick"
      ]
    ],
    "components/dashboard/insight-card.tsx": [
      "t",
      [
        "switch",
        "if",
        "handleActionClick",
        "handleKeyDown",
        "handleCardClick"
      ]
    ],
    "components/dashboard/clearance-bar.tsx": [
      "t",
      [
        "handleKeyDown",
        "if",
        "handleSegmentClick"
      ]
    ],
    "components/dashboard/confidence-chip.tsx": [
      "t",
      [
        "switch",
        "if",
        "ConfidenceIcon",
        "handleClick",
        "handleKeyDown"
      ]
    ],
    "components/scenario-lab/InsightSearch.tsx": [
      "t",
      [
        "switch",
        "handleInsightToggle",
        "InsightSearch",
        "clearSelection",
        "handleSearchChange",
        "getSeverityColor"
      ]
    ],
    "components/scenario-lab/ParameterControls.tsx": [
      "t",
      [
        "ParameterControls"
      ]
    ],
    "components/scenario-lab/scenario-lab.tsx": [
      "t",
      [
        "if",
        "ScenarioLab",
        "catch",
        "for",
        "handleKeyDown"
      ]
    ],
    "components/scenario-lab/scenario-lab-old.tsx": [
      "t",
      [
        "handleInsightSearch",
        "handleInsightSelect",
        "if",
        "handleSupplierSelect",
        "handleParameterChange",
        "ScenarioLab",
        "handleSave",
        "handleCreateInsight",
        "catch",
        "handleRun"
      ]
    ],
    "components/scenario-lab/CohortPicker.tsx": [
      "t",
      [
        "handleMonthChange",
        "handleSupplierToggle",
        "CohortPicker"
      ]
    ],
    "components/scenario-lab/DiffVisualization.tsx": [
      "t",
      [
        "switch",
        "if",
        "getChangeColor",
        "DiffVisualization",
        "getTrendIcon",
        "getStatusColor"
      ]
    ],
    "components/workflow/checklist-panel.tsx": [
      "t",
      [
        "switch",
        "handleToggle",
        "if",
        "ChecklistPanel",
        "ChecklistItemRow",
        "getCategoryIcon",
        "getStateDisplayName"
      ]
    ],
    "components/workflow/comment-drawer.tsx": [
      "t",
      [
        "getSelectedFindingsText",
        "handleAddComment",
        "insertMarkdown",
        "getCommentFindings",
        "handleCancel",
        "CommentItem",
        "CommentDrawer"
      ]
    ],
    "components/workflow/granskad-workflow.tsx": [
      "t",
      [
        "map",
        "if",
        "handleFindingUpdate",
        "handleCommentAdd",
        "handleSnapshotConfirm",
        "loadWorkflowData",
        "catch",
        "getChecklistProgress",
        "handleStateTransition",
        "canMarkAsReviewed"
      ]
    ],
    "components/workflow/findings-table.tsx": [
      "t",
      [
        "switch",
        "handleRowClick",
        "handleSelectFinding",
        "FindingRow",
        "if",
        "handleSelectAll",
        "handleSort",
        "getSeverityIcon",
        "handleStatusChange",
        "FindingsTable"
      ]
    ],
    "components/workflow/snapshot-dialog.tsx": [
      "t",
      [
        "for",
        "SnapshotDialog",
        "catch",
        "handleConfirm",
        "generateDataHash"
      ]
    ],
    "tests/test_agent_guardrails_safety.py": [
      "p",
      [
        "test_batch_proposal_handling",
        "test_trace_write_actions",
        "TestPolicyValidator",
        "test_log_pii_detection_event",
        "test_trace_determinism_validation",
        "test_pii_redaction_suggestions",
        "test_trace_llm_interaction",
        "test_data_access_boundaries",
        "test_concurrent_session_limiting",
        "test_batch_pii_scanning"
      ]
    ],
    "tests/test_scenario_engine_determinism.py": [
      "p",
      [
        "import",
        "test_edge_case_invalid_parameters",
        "test_partial_data_handling",
        "test_swedish_regulatory_compliance",
        "execute_scenario",
        "TestScenarioEngineDeterminism",
        "TestScenarioEngineResilience",
        "scenario_engine",
        "test_edge_case_concurrent_executions",
        "test_performance_p95_target"
      ]
    ],
    "tests/test_dbt_models.py": [
      "p",
      [
        "test_intermediate_models",
        "test_custom_macros_exist",
        "test_dbt_compile",
        "TestDbtTests",
        "dbt_project_dir",
        "test_model_lineage",
        "TestDbtModels",
        "TestDbtExecution",
        "test_generate_docs",
        "test_freshness_checks"
      ]
    ],
    "tests/test_human_friendly_ids.py": [
      "p",
      [
        "generate_ids",
        "test_id_immutability",
        "test_id_format_constraint",
        "db_connection",
        "test_custom_prefix_support",
        "test_id_audit_trail",
        "test_year_rollover",
        "test_id_case_sensitivity",
        "test_id_validation",
        "test_month_rollover"
      ]
    ],
    "tests/test_database_schema.py": [
      "p",
      [
        "test_not_null_constraints",
        "test_finding_table_with_embeddings",
        "test_row_table_schema",
        "TestDatabaseConstraints",
        "test_migration_scripts_exist",
        "db_session",
        "test_comment_table_schema",
        "test_foreign_key_constraints",
        "test_vector_similarity_index",
        "test_insight_table_with_human_friendly_id"
      ]
    ],
    "tests/test_xlsx_parser.py": [
      "p",
      [
        "test_parse_xlsx_with_swedish_characters_in_headers",
        "test_parse_xlsx_invalid_file_format",
        "test_parse_xlsx_empty_file",
        "test_parse_xlsx_with_mixed_encoding",
        "test_parse_xlsx_with_swedish_characters_in_data",
        "tearDown",
        "TestSwedishXLSXParser",
        "test_parse_xlsx_with_formulas",
        "test_memory_efficient_parsing",
        "test_parse_xlsx_corrupted_file"
      ]
    ],
    "tests/test_duckdb_analytics.py": [
      "p",
      [
        "test_materialized_view_refresh",
        "test_category_analysis_performance",
        "test_anomaly_detection_query",
        "test_pivot_table_generation",
        "TestDuckDBAnalytics",
        "test_real_time_sync",
        "test_transaction_consistency",
        "test_window_functions_performance",
        "test_monthly_aggregation_performance",
        "TestDuckDBPostgreSQLSync"
      ]
    ],
    "tests/test_cross_database_consistency.py": [
      "p",
      [
        "test_automated_data_deletion",
        "test_audit_trail_retention",
        "test_data_locality_compliance",
        "test_encryption_in_transit",
        "test_transaction_atomicity",
        "TestDataRetention",
        "test_schema_evolution_sync",
        "test_right_to_erasure",
        "TestDataEncryption",
        "test_data_processing_records"
      ]
    ],
    "tests/test_eu_format_handler.py": [
      "p",
      [
        "test_handle_scientific_notation",
        "TestDecimalConverter",
        "test_auto_detect_decimal_format",
        "test_parse_swedish_date_formats",
        "test_parse_two_digit_years",
        "test_convert_us_decimal_dot",
        "test_format_output",
        "test_parse_ambiguous_dates",
        "test_large_dataset_conversion",
        "test_detect_mixed_content"
      ]
    ],
    "tests/test_index_performance.py": [
      "p",
      [
        "c",
        "test_multicolumn_statistics",
        "query_task",
        "test_brin_index_for_time_series",
        "test_supplier_query_performance",
        "test_month_range_query_performance",
        "test_concurrent_index_access",
        "db_connection",
        "test_composite_index_creation",
        "test_partial_index_efficiency"
      ]
    ],
    "tests/test_pgvector_performance.py": [
      "p",
      [
        "test_embedding_dimension_consistency",
        "test_swedish_semantic_similarity",
        "test_concurrent_vector_operations",
        "test_vector_index_size_and_performance",
        "test_multi_vector_search_performance",
        "swedish_model",
        "db_connection",
        "test_rag_context_retrieval_performance",
        "insert_task",
        "test_filtered_similarity_search_performance"
      ]
    ],
    "tests/test_rag_system.py": [
      "p",
      [
        "hierarchical_data",
        "TestEmbeddingGeneration",
        "TestRAGPerformanceAndScaling",
        "scoped_retriever",
        "id_resolver",
        "test_supplier_scoped_retrieval",
        "test_id_parsing_and_validation",
        "test_large_scale_indexing",
        "test_id_search_in_content",
        "test_concurrent_queries"
      ]
    ],
    "tests/test_personnummer_validator.py": [
      "p",
      [
        "test_extract_birth_date",
        "test_batch_validation",
        "TestPersonnummerValidator",
        "TestPersonnummerIntegration",
        "test_redact_with_allowlist",
        "test_validate_invalid_date",
        "test_redact_in_dataframe",
        "test_redact_audit_log",
        "test_redact_preserves_context",
        "TestPersonnummerRedactor"
      ]
    ],
    "tests/test_claude_code_hooks.py": [
      "p",
      [
        "test_mcp_tool_error_handling",
        "test_pre_write_validation_hook",
        "test_hook_configuration_validation",
        "async_validation",
        "csv_only_hook",
        "test_hook_exception_handling",
        "failing_hook",
        "test_hook_metrics_collection",
        "test_mcp_tool_async_execution",
        "test_execute_hook_chain"
      ]
    ],
    "tests/llm-tools/test_scenarios_tool.ts": [
      "t",
      [
        "for"
      ]
    ],
    "tests/llm-tools/test_warehouse_sql_tool.ts": [
      "t",
      [
        "for"
      ]
    ],
    "tests/llm-tools/test_llm_integration.ts": [
      "t",
      [
        "for",
        "if"
      ]
    ],
    "tests/llm-tools/setup.ts": [
      "t",
      [
        "mockPerformanceNow",
        "createMockProvider",
        "if",
        "generateSwedishTestData",
        "createMockTool",
        "createMockLogger",
        "catch",
        "createMockCache",
        "createMockDatabase"
      ]
    ],
    "tests/llm-tools/test_explain_rule_tool.ts": [
      "t",
      [
        "if"
      ]
    ],
    "tests/frontend/granskad/setup.ts": [
      "t",
      [
        "observe",
        "ResizeObserver",
        "function",
        "IntersectionObserver",
        "takeRecords",
        "localStorageMock",
        "constructor",
        "disconnect",
        "unobserve",
        "generateMockPersonnummer"
      ]
    ],
    "tests/frontend/scenario-lab/mocks/scenario-mocks.ts": [
      "t",
      [
        "MockScenarioWebSocket",
        "connect",
        "if",
        "simulateError",
        "emit",
        "mockScenarioAPI",
        "disconnect",
        "simulateProgressUpdate",
        "for",
        "simulateKPIUpdate"
      ]
    ],
    "tests/infrastructure/email-webhook-processor.test.ts": [
      "t",
      [
        "for",
        "if"
      ]
    ],
    "tests/infrastructure/storage-encryption.test.ts": [
      "t",
      [
        "for",
        "catch"
      ]
    ]
  },
  "g": [],
  "dir_purposes": {
    "src/services": "Business logic and service implementations",
    "src/services/llm-tools": "LLM tool server and function calling",
    "components": "React UI components",
    "components/copilot": "AI copilot interface components",
    "components/scenario-lab": "Scenario planning UI",
    "tests": "Test suites and test utilities",
    "config": "Configuration files"
  },
  "staleness": 1756938510
}