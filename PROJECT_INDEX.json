{
  "at": "2025-09-05T19:55:58.371240",
  "root": ".",
  "tree": [
    ".",
    "  ├── terraform/",
    "  ├── types/",
    "  ├── locales/",
    "    ├── sv/",
    "    ├── en/",
    "  ├── app/",
    "  ├── config/",
    "    ├── schemas/",
    "  ├── providers/",
    "  ├── tests/",
    "    ├── llm-tools/",
    "    ├── frontend/",
    "      ├── granskad/",
    "        ├── __mocks__/",
    "      ├── insights/",
    "      ├── __mocks__/",
    "      ├── copilot/",
    "      ├── navigation/",
    "      ├── components/"
  ],
  "stats": {
    "total_files": 215,
    "total_directories": 60,
    "fully_parsed": {
      "typescript": 134,
      "python": 47,
      "javascript": 7,
      "json": 13,
      "markdown": 14
    },
    "markdown_files": 14
  },
  "f": {
    "src/services/insights_registry.py": [
      "p",
      [
        "get_evidence_for_insight",
        "_generate_link_id",
        "validate_id_format",
        "validate_evidence_integrity",
        "InsightMerger",
        "update_insight",
        "link_files",
        "_calculate_similarity",
        "generate_id",
        "__init__"
      ]
    ],
    "src/services/anomaly_detector.py": [
      "p",
      [
        "call",
        "detect_unusual_routing",
        "_convert_to_dataframe",
        "VehiclePatternAnalyzer",
        "put",
        "total_processed",
        "_is_expired",
        "is_open",
        "_normalize_waste_type",
        "detect_all_anomalies"
      ]
    ],
    "src/services/rag_service.py": [
      "p",
      [
        "get_document_count",
        "hybrid_search",
        "parse_id",
        "_create_tables",
        "resolve_to_embedding",
        "_build_scope_levels",
        "extract_and_resolve_ids",
        "_generate_answer",
        "_calculate_confidence",
        "VectorStore"
      ]
    ],
    "src/services/anomaly_detector_async.py": [
      "p",
      [
        "detect_unusual_routes",
        "_convert_to_dataframe",
        "VehiclePatternAnalyzer",
        "validate",
        "__init__",
        "OperatingHoursChecker",
        "from",
        "AnomalyDetector",
        "detect_all",
        "WeightOutlierDetector"
      ]
    ],
    "src/services/llm_agent_gateway.py": [
      "p",
      [
        "report_degradation",
        "_call_claude_eu",
        "get_provider_status",
        "get_batch_results",
        "detect_formality",
        "log_prompt",
        "_monitor_loop",
        "LLMAgentGateway",
        "track_call",
        "_cosine_similarity"
      ]
    ],
    "src/services/scenario_engine.py": [
      "p",
      [
        "generate_flag_diff",
        "format_diff_swedish",
        "_fetch_data",
        "generate_kpi_diff",
        "resolve_insight_references",
        "_validate_insight_id",
        "_calculate_data_quality",
        "KPICalculator",
        "_extract_supplier_metadata",
        "SnapshotManager"
      ]
    ],
    "src/services/rag_optimizer.py": [
      "p",
      [
        "_cache_result",
        "delete",
        "acquire",
        "QueryOptimizer",
        "_check_index_usage",
        "ConnectionPool",
        "BatchProcessor",
        "_get_cached_result",
        "_maintenance_loop",
        "flush"
      ]
    ],
    "src/services/findings_management.py": [
      "p",
      [
        "delete",
        "list_findings",
        "link_files",
        "_matches_dict_filters",
        "TransactionContext",
        "acquire_pending_locks",
        "search_text",
        "_get_occurrence_count",
        "override_severity",
        "SeverityCalculator"
      ]
    ],
    "src/services/insights_clustering.py": [
      "p",
      [
        "ClusterValidator",
        "cosine_similarity",
        "detect_temporal_patterns",
        "silhouette_score",
        "compute_adaptive_threshold",
        "classify_issues",
        "SimilarityCalculator",
        "ensemble_similarity",
        "from",
        "calculate_similarity"
      ]
    ],
    "src/services/storage_encryption_service.ts": [
      "t",
      [
        "if",
        "catch",
        "constructor",
        "for",
        "StorageEncryptionService"
      ]
    ],
    "src/services/evidence-pack-export.ts": [
      "t",
      [
        "DataIntegrityValidator",
        "if",
        "switch",
        "ComplianceValidator",
        "while",
        "catch",
        "constructor",
        "EvidencePackExporter",
        "for"
      ]
    ],
    "src/services/audit-logger.ts": [
      "t",
      [
        "if",
        "switch",
        "AuditLogger",
        "catch",
        "constructor",
        "for"
      ]
    ],
    "src/services/email_authentication_service.ts": [
      "t",
      [
        "if",
        "EmailAuthenticationService",
        "catch",
        "constructor",
        "for"
      ]
    ],
    "src/services/email_webhook_processor.ts": [
      "t",
      [
        "EmailWebhookProcessor",
        "if",
        "catch",
        "constructor",
        "for"
      ]
    ],
    "src/services/agent_audit.ts": [
      "t",
      [
        "if",
        "catch",
        "constructor",
        "AgentAuditLogger",
        "for"
      ]
    ],
    "src/services/agent_guardrails.ts": [
      "t",
      [
        "if",
        "switch",
        "UnauthorizedActionError",
        "ConfirmationRequiredError",
        "PIIDetectionError",
        "AgentGuardrails",
        "catch",
        "PIIDetector",
        "TraceabilityError",
        "constructor"
      ]
    ],
    "src/services/evidence-pack-compliance.ts": [
      "t",
      [
        "EvidencePackComplianceValidator",
        "if",
        "catch",
        "constructor",
        "for"
      ]
    ],
    "src/services/evidence-pack-batch.ts": [
      "t",
      [
        "processLoop",
        "EvidencePackBatchProcessor",
        "if",
        "while",
        "catch",
        "constructor",
        "for"
      ]
    ],
    "src/services/object-storage-client.ts": [
      "t",
      [
        "if",
        "ObjectStorageClient",
        "catch",
        "constructor",
        "transition"
      ]
    ],
    "src/services/llm-tools/orchestrator.ts": [
      "t",
      [
        "if",
        "GeminiProvider",
        "AuditLogger",
        "ClaudeProvider",
        "ProposalHandler",
        "GPT4Provider",
        "createLLMToolOrchestrator"
      ]
    ],
    "src/services/llm-tools/schemas.ts": [
      "t",
      [
        "generateJSONSchemas",
        "validateToolInput",
        "getToolSchemas",
        "if"
      ]
    ],
    "src/services/llm-tools/index.ts": [
      "t",
      [
        "to",
        "getAvailableTools"
      ]
    ],
    "src/services/llm-tools/tools/reports-tool.ts": [
      "t",
      [
        "if",
        "for",
        "ReportComposeTool"
      ]
    ],
    "src/services/llm-tools/tools/warehouse-sql-tool.ts": [
      "t",
      [
        "if",
        "for",
        "WarehouseSQLTool"
      ]
    ],
    "src/services/llm-tools/tools/insights-tool.ts": [
      "t",
      [
        "if",
        "InsightUpdateTool",
        "InsightCreateTool",
        "InsightSearchTool",
        "InsightLinkTool"
      ]
    ],
    "src/services/llm-tools/tools/metrics-tool.ts": [
      "t",
      [
        "if",
        "switch",
        "MetricsTool"
      ]
    ],
    "src/services/llm-tools/tools/explain-rule-tool.ts": [
      "t",
      [
        "if",
        "ExplainRuleTool"
      ]
    ],
    "src/services/llm-tools/tools/scenarios-tool.ts": [
      "t",
      [
        "if",
        "ScenarioPlanTool",
        "catch",
        "ScenarioRunTool"
      ]
    ],
    "src/services/llm-tools/optimizations/performance-optimizer.ts": [
      "t",
      [
        "if",
        "QueryOptimizer",
        "ConnectionPoolManager",
        "OptimizedToolOrchestrator",
        "catch",
        "RequestRouter",
        "constructor",
        "MetricsCollector",
        "BatchProcessor",
        "for"
      ]
    ],
    "src/services/llm-tools/base/tool-server.ts": [
      "t",
      [
        "export",
        "RateLimiter",
        "if",
        "BaseTool",
        "ToolOrchestrator",
        "SecurityValidator",
        "catch",
        "SwedishFormatter",
        "constructor",
        "CircuitBreaker"
      ]
    ],
    "components/insights/insights-list-interface.tsx": [
      "t",
      [
        "if",
        "toggleSelectAll",
        "getStatusBadge",
        "getSeverityIcon",
        "forEach",
        "toggleSelection",
        "toggleRowExpansion",
        "InsightsListInterface",
        "copyToClipboard"
      ]
    ],
    "components/ui/slider.tsx": [
      "t",
      [
        "handleChange"
      ]
    ],
    "components/ui/dialog.tsx": [
      "t",
      [
        "if"
      ]
    ],
    "components/ui/badge.tsx": [
      "t",
      [
        "Badge"
      ]
    ],
    "components/ui/month-range-picker.tsx": [
      "t",
      [
        "MonthRangePicker",
        "handleApply",
        "if",
        "handleClear",
        "formatDisplay"
      ]
    ],
    "components/ui/dropdown-menu.tsx": [
      "t",
      [
        "DropdownMenuShortcut"
      ]
    ],
    "components/ui/select.tsx": [
      "t",
      [
        "if",
        "handleClick",
        "handleClickOutside"
      ]
    ],
    "components/ui/skeleton.tsx": [
      "t",
      [
        "Skeleton"
      ]
    ],
    "components/copilot/CopilotDock.tsx": [
      "t",
      [
        "if",
        "CopilotDock"
      ]
    ],
    "components/copilot/ProposalCard.tsx": [
      "t",
      [
        "ProposalCard",
        "getConfidenceBadge",
        "if"
      ]
    ],
    "components/copilot/MessageList.tsx": [
      "t",
      [
        "renderMessage",
        "if",
        "MessageList",
        "renderCitation"
      ]
    ],
    "components/copilot/CopilotDock-old.tsx": [
      "t",
      [
        "if",
        "handleKeyDown",
        "handleSendMessage",
        "CopilotDock",
        "exportConversation",
        "toggleLanguage"
      ]
    ],
    "components/copilot/ToolCallVisualization.tsx": [
      "t",
      [
        "getStatusIcon",
        "switch",
        "getStatusText",
        "ToolCallVisualization"
      ]
    ],
    "components/layout/navigation-shell.tsx": [
      "t",
      [
        "if",
        "handleKeyDown",
        "switch",
        "handleItemClick"
      ]
    ],
    "components/dashboard/insight-card.tsx": [
      "t",
      [
        "handleActionClick",
        "if",
        "switch",
        "handleKeyDown",
        "handleCardClick"
      ]
    ],
    "components/dashboard/clearance-bar.tsx": [
      "t",
      [
        "handleSegmentClick",
        "if",
        "handleKeyDown"
      ]
    ],
    "components/dashboard/confidence-chip.tsx": [
      "t",
      [
        "ConfidenceIcon",
        "if",
        "switch",
        "handleClick",
        "handleKeyDown"
      ]
    ],
    "components/scenario-lab/InsightSearch.tsx": [
      "t",
      [
        "InsightSearch",
        "getSeverityColor",
        "switch",
        "clearSelection",
        "handleInsightToggle",
        "handleSearchChange"
      ]
    ],
    "components/scenario-lab/ParameterControls.tsx": [
      "t",
      [
        "ParameterControls"
      ]
    ],
    "components/scenario-lab/scenario-lab.tsx": [
      "t",
      [
        "if",
        "handleKeyDown",
        "catch",
        "for",
        "ScenarioLab"
      ]
    ],
    "components/scenario-lab/scenario-lab-old.tsx": [
      "t",
      [
        "handleRun",
        "if",
        "handleInsightSelect",
        "handleKeyDown",
        "catch",
        "handleSave",
        "handleInsightSearch",
        "handleSupplierSelect",
        "ScenarioLab",
        "handleCreateInsight"
      ]
    ],
    "components/scenario-lab/CohortPicker.tsx": [
      "t",
      [
        "handleMonthChange",
        "handleSupplierToggle",
        "CohortPicker"
      ]
    ],
    "components/scenario-lab/DiffVisualization.tsx": [
      "t",
      [
        "getStatusColor",
        "if",
        "switch",
        "DiffVisualization",
        "getTrendIcon",
        "getChangeColor"
      ]
    ],
    "components/findings/findings-triage-interface.tsx": [
      "t",
      [
        "if",
        "handleSelectAll",
        "FindingsTriageInterface",
        "handleViewModeChange",
        "handleLoadFilterPreset",
        "for",
        "handleSelectFinding",
        "switch",
        "handleKeyDown",
        "renderSeverityBadge"
      ]
    ],
    "components/workflow/checklist-panel.tsx": [
      "t",
      [
        "ChecklistPanel",
        "if",
        "switch",
        "getCategoryIcon",
        "ChecklistItemRow",
        "getStateDisplayName",
        "handleToggle"
      ]
    ],
    "components/workflow/comment-drawer.tsx": [
      "t",
      [
        "CommentItem",
        "handleCancel",
        "getCommentFindings",
        "CommentDrawer",
        "handleAddComment",
        "insertMarkdown",
        "getSelectedFindingsText"
      ]
    ],
    "components/workflow/granskad-workflow.tsx": [
      "t",
      [
        "canMarkAsReviewed",
        "if",
        "handleCommentAdd",
        "handleFindingUpdate",
        "GranskadWorkflow",
        "catch",
        "getChecklistProgress",
        "loadWorkflowData",
        "map",
        "handleChecklistItemToggle"
      ]
    ],
    "components/workflow/findings-table.tsx": [
      "t",
      [
        "if",
        "handleSelectAll",
        "switch",
        "handleSort",
        "handleSelectFinding",
        "getSeverityIcon",
        "handleStatusChange",
        "handleRowClick",
        "FindingRow",
        "FindingsTable"
      ]
    ],
    "components/workflow/snapshot-dialog.tsx": [
      "t",
      [
        "SnapshotDialog",
        "handleConfirm",
        "catch",
        "for",
        "generateDataHash"
      ]
    ],
    "tests/test_agent_guardrails_safety.py": [
      "p",
      [
        "TestPolicyValidator",
        "test_offline_evaluation_harness",
        "test_data_access_boundaries",
        "test_trace_write_actions",
        "test_trace_determinism_validation",
        "test_privilege_escalation_detection",
        "test_tool_permission_validation",
        "test_detect_swedish_personnummer",
        "test_log_policy_violation",
        "test_batch_pii_scanning"
      ]
    ],
    "tests/test_llm_agent_gateway.py": [
      "p",
      [
        "test_batch_processing_timeout",
        "slow_response",
        "TestCostManagement",
        "test_provider_health_monitoring",
        "test_cost_optimized_simple_queries",
        "test_formal_informal_swedish_detection",
        "test_eu_data_residency_enforcement",
        "test_swedish_language_detection",
        "test_data_retention_policies",
        "test_swedish_character_handling"
      ]
    ],
    "tests/test_scenario_engine_determinism.py": [
      "p",
      [
        "test_swedish_municipality_handling",
        "test_cache_effectiveness",
        "import",
        "test_partial_data_handling",
        "test_diff_generation",
        "test_snapshot_immutability",
        "test_swedish_holiday_impact",
        "test_deterministic_execution",
        "test_seasonal_variations",
        "test_json_schema_validation"
      ]
    ],
    "tests/test_dbt_models.py": [
      "p",
      [
        "TestDbtMacros",
        "test_dbt_compile",
        "test_dbt_source_definitions",
        "test_schema_tests",
        "test_generate_docs",
        "TestDbtTests",
        "test_dbt_run",
        "test_model_lineage",
        "test_dbt_snapshot",
        "test_custom_tests"
      ]
    ],
    "tests/test_human_friendly_ids.py": [
      "p",
      [
        "test_id_range_query_performance",
        "test_id_reserved_sequences",
        "test_id_sequence_increment",
        "test_sequence_gap_handling",
        "TestHumanFriendlyIDGeneration",
        "db_connection",
        "test_id_prefix_index",
        "test_insight_id_format",
        "TestIDBusinessRules",
        "test_year_rollover"
      ]
    ],
    "tests/test_database_schema.py": [
      "p",
      [
        "test_vector_similarity_index",
        "test_pgvector_extension_enabled",
        "test_finding_table_with_embeddings",
        "test_personnummer_validation_constraint",
        "test_not_null_constraints",
        "test_comment_table_schema",
        "test_insight_table_with_human_friendly_id",
        "db_engine",
        "test_supplier_month_composite_index",
        "test_cascade_delete_rules"
      ]
    ],
    "tests/test_xlsx_parser.py": [
      "p",
      [
        "test_parse_xlsx_invalid_file_format",
        "tearDown",
        "test_parse_xlsx_corrupted_file",
        "test_memory_efficient_parsing",
        "setUp",
        "test_parse_xlsx_with_mixed_encoding",
        "test_parse_performance_small_file",
        "TestSwedishXLSXParser",
        "TestXLSXParserPerformance",
        "test_parse_xlsx_empty_file"
      ]
    ],
    "tests/test_duckdb_analytics.py": [
      "p",
      [
        "test_duckdb_postgres_connection",
        "test_transaction_consistency",
        "TestDuckDBPostgreSQLSync",
        "test_pivot_table_generation",
        "test_partition_pruning",
        "test_window_functions_performance",
        "pg_connection",
        "test_anomaly_detection_query",
        "test_materialized_view_refresh",
        "duckdb_conn"
      ]
    ],
    "tests/test_cross_database_consistency.py": [
      "p",
      [
        "duck_connection",
        "test_encryption_at_rest",
        "test_audit_trail_retention",
        "test_key_rotation",
        "test_aggregate_consistency",
        "test_retention_policy_configuration",
        "encryption_key",
        "pg_connection",
        "test_data_breach_notification",
        "test_data_processing_records"
      ]
    ],
    "tests/test_eu_format_handler.py": [
      "p",
      [
        "test_handle_scientific_notation",
        "test_normalize_to_iso",
        "TestFormatConverterPerformance",
        "test_parse_two_digit_years",
        "test_confidence_scoring",
        "test_convert_percentages",
        "test_invalid_format_handling",
        "test_convert_swedish_decimal_comma",
        "test_parse_datetime_with_time",
        "setUp"
      ]
    ],
    "tests/test_index_performance.py": [
      "p",
      [
        "c",
        "TestSpecializedIndexes",
        "test_concurrent_index_access",
        "db_connection",
        "test_index_maintenance_impact",
        "test_expression_index",
        "test_brin_index_for_time_series",
        "test_gin_index_for_jsonb",
        "test_composite_index_creation",
        "query_task"
      ]
    ],
    "tests/test_pgvector_performance.py": [
      "p",
      [
        "swedish_model",
        "db_connection",
        "test_swedish_semantic_similarity",
        "TestEmbeddingQuality",
        "cls",
        "test_rag_context_retrieval_performance",
        "insert_task",
        "sample_embeddings",
        "test_multi_vector_search_performance",
        "embedding_model"
      ]
    ],
    "tests/test_rag_system.py": [
      "p",
      [
        "test_id_parsing_and_validation",
        "large_dataset",
        "test_embedding_cache",
        "sample_documents",
        "test_language_specific_embeddings",
        "test_rag_with_context_window_management",
        "scoped_retriever",
        "TestEmbeddingGeneration",
        "test_filtered_search_performance",
        "test_embedding_batch_performance"
      ]
    ],
    "tests/test_personnummer_validator.py": [
      "p",
      [
        "test_redact_with_full_masking",
        "test_validate_coordination_number",
        "test_extract_birth_date",
        "test_redact_performance",
        "test_validate_invalid_date",
        "test_redact_audit_log",
        "setUp",
        "TestPersonnummerIntegration",
        "test_validate_invalid_luhn_checksum",
        "TestPersonnummerRedactor"
      ]
    ],
    "tests/test_claude_code_hooks.py": [
      "p",
      [
        "test_conditional_hook_execution",
        "TestClaudeCodeHookManager",
        "csv_only_hook",
        "TestClaudeCodeIntegrationScenarios",
        "test_hook_metrics_collection",
        "test_pre_write_validation_hook",
        "test_mcp_tool_error_handling",
        "async_validator",
        "test_register_validation_tool",
        "test_hook_context_mutation"
      ]
    ],
    "tests/llm-tools/test_scenarios_tool.ts": [
      "t",
      [
        "for"
      ]
    ],
    "tests/llm-tools/test_warehouse_sql_tool.ts": [
      "t",
      [
        "for"
      ]
    ],
    "tests/llm-tools/test_llm_integration.ts": [
      "t",
      [
        "if",
        "for"
      ]
    ],
    "tests/llm-tools/setup.ts": [
      "t",
      [
        "if",
        "createMockCache",
        "createMockProvider",
        "generateSwedishTestData",
        "catch",
        "createMockLogger",
        "createMockTool",
        "mockPerformanceNow",
        "createMockDatabase"
      ]
    ],
    "tests/llm-tools/test_explain_rule_tool.ts": [
      "t",
      [
        "if"
      ]
    ],
    "tests/frontend/granskad/setup.ts": [
      "t",
      [
        "unobserve",
        "waitForAsync",
        "function",
        "localStorageMock",
        "observe",
        "length",
        "constructor",
        "takeRecords",
        "IntersectionObserver",
        "ResizeObserver"
      ]
    ],
    "tests/frontend/__mocks__/simple-server.ts": [
      "t",
      [
        "if"
      ]
    ],
    "tests/frontend/__mocks__/findings-mocks.ts": [
      "t",
      [
        "generateMockFindings",
        "for",
        "to",
        "filterFindings"
      ]
    ],
    "tests/frontend/__mocks__/server.ts": [
      "t",
      [
        "if"
      ]
    ],
    "tests/frontend/scenario-lab/mocks/scenario-mocks.ts": [
      "t",
      [
        "if",
        "simulateProgressUpdate",
        "MockScenarioWebSocket",
        "simulateKPIUpdate",
        "emit",
        "connect",
        "simulateError",
        "generateMockHeatmapData",
        "for",
        "disconnect"
      ]
    ],
    "tests/infrastructure/email-webhook-processor.test.ts": [
      "t",
      [
        "if",
        "for"
      ]
    ],
    "tests/infrastructure/storage-encryption.test.ts": [
      "t",
      [
        "for",
        "catch"
      ]
    ]
  },
  "g": [],
  "dir_purposes": {
    "src/services": "Business logic and service implementations",
    "src/services/llm-tools": "LLM tool server and function calling",
    "components": "React UI components",
    "components/copilot": "AI copilot interface components",
    "components/scenario-lab": "Scenario planning UI",
    "tests": "Test suites and test utilities",
    "config": "Configuration files"
  },
  "staleness": 1757094958
}