{
  "at": "2025-09-04T13:30:52.419731",
  "root": ".",
  "tree": [
    ".",
    "  ├── terraform/",
    "  ├── types/",
    "  ├── locales/",
    "    ├── sv/",
    "    ├── en/",
    "  ├── app/",
    "  ├── config/",
    "    ├── schemas/",
    "  ├── providers/",
    "  ├── tests/",
    "    ├── llm-tools/",
    "    ├── frontend/",
    "      ├── granskad/",
    "        ├── __mocks__/",
    "      ├── insights/",
    "      ├── __mocks__/",
    "      ├── copilot/",
    "      ├── navigation/",
    "      ├── components/"
  ],
  "stats": {
    "total_files": 205,
    "total_directories": 60,
    "fully_parsed": {
      "typescript": 134,
      "python": 38,
      "javascript": 7,
      "json": 13,
      "markdown": 13
    },
    "markdown_files": 13
  },
  "f": {
    "src/services/rag_service.py": [
      "p",
      [
        "_build_scope_levels",
        "initialize",
        "search",
        "get_document_count",
        "_truncate_to_token_limit",
        "_create_indexes",
        "parse_id",
        "provide_feedback",
        "_calculate_confidence",
        "_create_tables"
      ]
    ],
    "src/services/llm_agent_gateway.py": [
      "p",
      [
        "analyze_technical_content",
        "report_degradation",
        "send_prompt",
        "start",
        "get_state",
        "truncate_context",
        "get_provider_status",
        "set_budget_alert_handler",
        "RegionalComplianceManager",
        "get_deletion_audit"
      ]
    ],
    "src/services/scenario_engine.py": [
      "p",
      [
        "from_id",
        "__post_init__",
        "apply_seasonal_adjustment",
        "format_diff_swedish",
        "DiffGenerator",
        "resolve_insight_references",
        "_extract_supplier_metadata",
        "_select_provider",
        "KPICalculator",
        "_calculate_flag_counts"
      ]
    ],
    "src/services/rag_optimizer.py": [
      "p",
      [
        "_maintenance_loop",
        "_execute_batch",
        "initialize",
        "get",
        "parallel_search",
        "flush",
        "set",
        "_get_cached_result",
        "_build_query_params",
        "class"
      ]
    ],
    "src/services/storage_encryption_service.ts": [
      "t",
      [
        "StorageEncryptionService",
        "constructor",
        "for",
        "catch",
        "if"
      ]
    ],
    "src/services/evidence-pack-export.ts": [
      "t",
      [
        "DataIntegrityValidator",
        "EvidencePackExporter",
        "constructor",
        "ComplianceValidator",
        "catch",
        "switch",
        "for",
        "while",
        "if"
      ]
    ],
    "src/services/audit-logger.ts": [
      "t",
      [
        "constructor",
        "AuditLogger",
        "switch",
        "for",
        "catch",
        "if"
      ]
    ],
    "src/services/email_authentication_service.ts": [
      "t",
      [
        "constructor",
        "for",
        "EmailAuthenticationService",
        "catch",
        "if"
      ]
    ],
    "src/services/email_webhook_processor.ts": [
      "t",
      [
        "constructor",
        "for",
        "catch",
        "if",
        "EmailWebhookProcessor"
      ]
    ],
    "src/services/agent_audit.ts": [
      "t",
      [
        "constructor",
        "AgentAuditLogger",
        "for",
        "catch",
        "if"
      ]
    ],
    "src/services/agent_guardrails.ts": [
      "t",
      [
        "ActionTracker",
        "PolicyViolationError",
        "ConfirmationWorkflow",
        "ConfirmationRequiredError",
        "constructor",
        "SecurityEnforcer",
        "switch",
        "AgentGuardrails",
        "for",
        "PolicyValidator"
      ]
    ],
    "src/services/evidence-pack-compliance.ts": [
      "t",
      [
        "EvidencePackComplianceValidator",
        "constructor",
        "for",
        "catch",
        "if"
      ]
    ],
    "src/services/evidence-pack-batch.ts": [
      "t",
      [
        "constructor",
        "catch",
        "for",
        "EvidencePackBatchProcessor",
        "while",
        "if",
        "processLoop"
      ]
    ],
    "src/services/object-storage-client.ts": [
      "t",
      [
        "constructor",
        "ObjectStorageClient",
        "catch",
        "if",
        "transition"
      ]
    ],
    "src/services/llm-tools/orchestrator.ts": [
      "t",
      [
        "createLLMToolOrchestrator",
        "AuditLogger",
        "GeminiProvider",
        "ClaudeProvider",
        "if",
        "ProposalHandler",
        "GPT4Provider"
      ]
    ],
    "src/services/llm-tools/schemas.ts": [
      "t",
      [
        "if",
        "getToolSchemas",
        "validateToolInput",
        "generateJSONSchemas"
      ]
    ],
    "src/services/llm-tools/index.ts": [
      "t",
      [
        "to",
        "getAvailableTools"
      ]
    ],
    "src/services/llm-tools/tools/reports-tool.ts": [
      "t",
      [
        "ReportComposeTool",
        "for",
        "if"
      ]
    ],
    "src/services/llm-tools/tools/warehouse-sql-tool.ts": [
      "t",
      [
        "for",
        "if",
        "WarehouseSQLTool"
      ]
    ],
    "src/services/llm-tools/tools/insights-tool.ts": [
      "t",
      [
        "InsightLinkTool",
        "InsightCreateTool",
        "if",
        "InsightUpdateTool",
        "InsightSearchTool"
      ]
    ],
    "src/services/llm-tools/tools/metrics-tool.ts": [
      "t",
      [
        "MetricsTool",
        "if",
        "switch"
      ]
    ],
    "src/services/llm-tools/tools/explain-rule-tool.ts": [
      "t",
      [
        "if",
        "ExplainRuleTool"
      ]
    ],
    "src/services/llm-tools/tools/scenarios-tool.ts": [
      "t",
      [
        "ScenarioPlanTool",
        "if",
        "ScenarioRunTool",
        "catch"
      ]
    ],
    "src/services/llm-tools/optimizations/performance-optimizer.ts": [
      "t",
      [
        "MetricsCollector",
        "RequestRouter",
        "OptimizedToolOrchestrator",
        "BatchProcessor",
        "constructor",
        "QueryOptimizer",
        "for",
        "CacheManager",
        "catch",
        "if"
      ]
    ],
    "src/services/llm-tools/base/tool-server.ts": [
      "t",
      [
        "SecurityValidator",
        "SwedishFormatter",
        "constructor",
        "for",
        "CircuitBreaker",
        "RateLimiter",
        "catch",
        "ToolOrchestrator",
        "if",
        "export"
      ]
    ],
    "components/insights/insights-list-interface.tsx": [
      "t",
      [
        "copyToClipboard",
        "getStatusBadge",
        "toggleSelectAll",
        "forEach",
        "toggleSelection",
        "InsightsListInterface",
        "if",
        "toggleRowExpansion",
        "getSeverityIcon"
      ]
    ],
    "components/ui/slider.tsx": [
      "t",
      [
        "handleChange"
      ]
    ],
    "components/ui/dialog.tsx": [
      "t",
      [
        "if"
      ]
    ],
    "components/ui/badge.tsx": [
      "t",
      [
        "Badge"
      ]
    ],
    "components/ui/month-range-picker.tsx": [
      "t",
      [
        "handleClear",
        "handleApply",
        "if",
        "formatDisplay",
        "MonthRangePicker"
      ]
    ],
    "components/ui/dropdown-menu.tsx": [
      "t",
      [
        "DropdownMenuShortcut"
      ]
    ],
    "components/ui/select.tsx": [
      "t",
      [
        "if",
        "handleClickOutside",
        "handleClick"
      ]
    ],
    "components/ui/skeleton.tsx": [
      "t",
      [
        "Skeleton"
      ]
    ],
    "components/copilot/CopilotDock.tsx": [
      "t",
      [
        "if",
        "CopilotDock"
      ]
    ],
    "components/copilot/ProposalCard.tsx": [
      "t",
      [
        "getConfidenceBadge",
        "if",
        "ProposalCard"
      ]
    ],
    "components/copilot/MessageList.tsx": [
      "t",
      [
        "renderMessage",
        "if",
        "MessageList",
        "renderCitation"
      ]
    ],
    "components/copilot/CopilotDock-old.tsx": [
      "t",
      [
        "handleKeyDown",
        "toggleLanguage",
        "exportConversation",
        "handleSendMessage",
        "if",
        "CopilotDock"
      ]
    ],
    "components/copilot/ToolCallVisualization.tsx": [
      "t",
      [
        "getStatusText",
        "getStatusIcon",
        "ToolCallVisualization",
        "switch"
      ]
    ],
    "components/layout/navigation-shell.tsx": [
      "t",
      [
        "handleKeyDown",
        "if",
        "handleItemClick",
        "switch"
      ]
    ],
    "components/dashboard/insight-card.tsx": [
      "t",
      [
        "handleKeyDown",
        "switch",
        "handleCardClick",
        "handleActionClick",
        "if"
      ]
    ],
    "components/dashboard/clearance-bar.tsx": [
      "t",
      [
        "handleKeyDown",
        "if",
        "handleSegmentClick"
      ]
    ],
    "components/dashboard/confidence-chip.tsx": [
      "t",
      [
        "handleKeyDown",
        "ConfidenceIcon",
        "switch",
        "handleClick",
        "if"
      ]
    ],
    "components/scenario-lab/InsightSearch.tsx": [
      "t",
      [
        "InsightSearch",
        "clearSelection",
        "getSeverityColor",
        "switch",
        "handleSearchChange",
        "handleInsightToggle"
      ]
    ],
    "components/scenario-lab/ParameterControls.tsx": [
      "t",
      [
        "ParameterControls"
      ]
    ],
    "components/scenario-lab/scenario-lab.tsx": [
      "t",
      [
        "handleKeyDown",
        "ScenarioLab",
        "for",
        "catch",
        "if"
      ]
    ],
    "components/scenario-lab/scenario-lab-old.tsx": [
      "t",
      [
        "handleSupplierSelect",
        "handleKeyDown",
        "handleParameterChange",
        "handleCreateInsight",
        "ScenarioLab",
        "if",
        "handleInsightSearch",
        "handleInsightSelect",
        "catch",
        "handleRun"
      ]
    ],
    "components/scenario-lab/CohortPicker.tsx": [
      "t",
      [
        "handleSupplierToggle",
        "handleMonthChange",
        "CohortPicker"
      ]
    ],
    "components/scenario-lab/DiffVisualization.tsx": [
      "t",
      [
        "getStatusColor",
        "switch",
        "DiffVisualization",
        "getChangeColor",
        "getTrendIcon",
        "if"
      ]
    ],
    "components/findings/findings-triage-interface.tsx": [
      "t",
      [
        "handleViewModeChange",
        "handleLoadFilterPreset",
        "handleExpandRow",
        "handleSelectFinding",
        "handleKeyDown",
        "switch",
        "handleBatchAction",
        "renderSeverityBadge",
        "confirmBatchAction",
        "handleSelectAll"
      ]
    ],
    "components/workflow/checklist-panel.tsx": [
      "t",
      [
        "getCategoryIcon",
        "handleToggle",
        "switch",
        "ChecklistPanel",
        "getStateDisplayName",
        "if",
        "ChecklistItemRow"
      ]
    ],
    "components/workflow/comment-drawer.tsx": [
      "t",
      [
        "CommentDrawer",
        "handleAddComment",
        "insertMarkdown",
        "getCommentFindings",
        "CommentItem",
        "handleCancel",
        "getSelectedFindingsText"
      ]
    ],
    "components/workflow/granskad-workflow.tsx": [
      "t",
      [
        "loadWorkflowData",
        "handleStateTransition",
        "handleSnapshotConfirm",
        "map",
        "getChecklistProgress",
        "handleCommentAdd",
        "handleChecklistItemToggle",
        "canMarkAsReviewed",
        "GranskadWorkflow",
        "getStateDisplayName"
      ]
    ],
    "components/workflow/findings-table.tsx": [
      "t",
      [
        "handleSort",
        "handleSelectFinding",
        "handleRowClick",
        "FindingsTable",
        "switch",
        "FindingRow",
        "handleSelectAll",
        "if",
        "handleStatusChange",
        "getSeverityIcon"
      ]
    ],
    "components/workflow/snapshot-dialog.tsx": [
      "t",
      [
        "generateDataHash",
        "handleConfirm",
        "for",
        "catch",
        "SnapshotDialog"
      ]
    ],
    "tests/test_agent_guardrails_safety.py": [
      "p",
      [
        "TestSecurityEnforcer",
        "test_concurrent_session_limiting",
        "TestPolicyValidator",
        "test_batch_pii_scanning",
        "test_trace_determinism_validation",
        "test_rate_limiting",
        "run_async_tests",
        "test_proposal_timeout",
        "test_suspicious_pattern_detection",
        "test_pii_redaction_suggestions"
      ]
    ],
    "tests/test_llm_agent_gateway.py": [
      "p",
      [
        "test_automatic_failover_on_degradation",
        "test_invalid_api_credentials",
        "test_context_window_management",
        "test_mixed_language_handling",
        "language_detector",
        "test_budget_enforcement_per_user",
        "test_rate_limit_handling",
        "test_token_limit_exceeded",
        "test_all_providers_fail",
        "test_batch_processing_multiple_requests"
      ]
    ],
    "tests/test_scenario_engine_determinism.py": [
      "p",
      [
        "test_kpi_recalculation_review_progress",
        "test_kpi_recalculation_anomaly_burden",
        "test_transaction_rollback",
        "test_snapshot_immutability",
        "test_performance_p95_target",
        "valid_scenario_params",
        "test_edge_case_empty_dataset",
        "test_swedish_municipality_handling",
        "class",
        "test_swedish_supplier_cohorts"
      ]
    ],
    "tests/test_dbt_models.py": [
      "p",
      [
        "dbt_runner",
        "test_dbt_test_execution",
        "TestDbtModels",
        "TestDbtModelConfiguration",
        "test_dbt_compile",
        "test_freshness_checks",
        "test_dbt_run",
        "test_dbt_snapshot",
        "test_model_lineage",
        "TestDbtTests"
      ]
    ],
    "tests/test_human_friendly_ids.py": [
      "p",
      [
        "db_connection",
        "test_year_rollover",
        "test_id_case_sensitivity",
        "test_month_rollover",
        "test_id_immutability",
        "test_id_format_constraint",
        "test_id_lookup_performance",
        "test_id_reserved_sequences",
        "TestIDQueryPerformance",
        "test_id_range_query_performance"
      ]
    ],
    "tests/test_database_schema.py": [
      "p",
      [
        "TestDatabaseMigrations",
        "test_cascade_delete_rules",
        "TestDatabaseConstraints",
        "test_migration_data_preservation",
        "test_not_null_constraints",
        "db_session",
        "test_swedish_text_columns",
        "test_foreign_key_constraints",
        "test_row_table_schema",
        "test_check_constraints"
      ]
    ],
    "tests/test_xlsx_parser.py": [
      "p",
      [
        "TestXLSXParserPerformance",
        "test_parse_xlsx_with_formulas",
        "test_parse_xlsx_empty_file",
        "test_parse_xlsx_with_swedish_characters_in_data",
        "test_parse_performance_small_file",
        "test_parse_xlsx_invalid_file_format",
        "test_parse_xlsx_with_mixed_encoding",
        "test_parse_xlsx_with_swedish_characters_in_headers",
        "TestSwedishXLSXParser",
        "test_parse_xlsx_corrupted_file"
      ]
    ],
    "tests/test_duckdb_analytics.py": [
      "p",
      [
        "test_materialized_view_refresh",
        "test_window_functions_performance",
        "TestDuckDBPostgreSQLSync",
        "TestAnalyticsOptimization",
        "test_anomaly_detection_query",
        "test_transaction_consistency",
        "test_query_plan_optimization",
        "test_category_analysis_performance",
        "test_pivot_table_generation",
        "setup_test_data"
      ]
    ],
    "tests/test_cross_database_consistency.py": [
      "p",
      [
        "write_task",
        "test_data_freshness_sync",
        "test_retention_policy_configuration",
        "TestDataConsistency",
        "encryption_key",
        "test_field_level_encryption",
        "TestComplianceValidation",
        "test_data_locality_compliance",
        "test_encryption_in_transit",
        "test_audit_trail_retention"
      ]
    ],
    "tests/test_eu_format_handler.py": [
      "p",
      [
        "test_format_output",
        "test_convert_swedish_decimal_comma",
        "test_convert_percentages",
        "test_auto_detect_decimal_format",
        "setUp",
        "test_parse_datetime_with_time",
        "test_detect_date_format",
        "test_batch_conversion",
        "test_convert_us_decimal_dot",
        "test_large_dataset_conversion"
      ]
    ],
    "tests/test_index_performance.py": [
      "p",
      [
        "db_connection",
        "test_gin_index_for_jsonb",
        "AS",
        "query_task",
        "test_expression_index",
        "test_month_range_query_performance",
        "test_partial_index_efficiency",
        "test_brin_index_for_time_series",
        "test_index_maintenance_impact",
        "test_covering_index_performance"
      ]
    ],
    "tests/test_pgvector_performance.py": [
      "p",
      [
        "test_multi_vector_search_performance",
        "db_connection",
        "sample_embeddings",
        "AS",
        "TestPgVectorPerformance",
        "embedding_model",
        "test_filtered_similarity_search_performance",
        "TestEmbeddingQuality",
        "test_vector_index_size_and_performance",
        "swedish_model"
      ]
    ],
    "tests/test_rag_system.py": [
      "p",
      [
        "TestVectorSimilaritySearch",
        "doesn",
        "test_id_parsing_and_validation",
        "TestScopedRetrieval",
        "TestEmbeddingGeneration",
        "sample_texts",
        "TestHumanFriendlyIDResolution",
        "test_rag_with_context_window_management",
        "test_end_to_end_rag_query",
        "sample_documents"
      ]
    ],
    "tests/test_personnummer_validator.py": [
      "p",
      [
        "TestPersonnummerValidator",
        "TestPersonnummerIntegration",
        "test_validate_invalid_date",
        "test_validate_10_digit_format",
        "test_redact_audit_log",
        "test_redact_with_partial_masking",
        "test_redact_preserves_context",
        "setUp",
        "test_validate_coordination_number",
        "test_validate_and_redact_pipeline"
      ]
    ],
    "tests/test_claude_code_hooks.py": [
      "p",
      [
        "csv_only_hook",
        "test_hook_metrics_collection",
        "test_batch_file_validation",
        "test_execute_hook_chain",
        "test_hook_interruption_on_failure",
        "test_hook_configuration_validation",
        "error_handler",
        "setUp",
        "test_validate_swedish_content",
        "test_mcp_tool_async_execution"
      ]
    ],
    "tests/llm-tools/test_scenarios_tool.ts": [
      "t",
      [
        "for"
      ]
    ],
    "tests/llm-tools/test_warehouse_sql_tool.ts": [
      "t",
      [
        "for"
      ]
    ],
    "tests/llm-tools/test_llm_integration.ts": [
      "t",
      [
        "for",
        "if"
      ]
    ],
    "tests/llm-tools/setup.ts": [
      "t",
      [
        "generateSwedishTestData",
        "createMockTool",
        "createMockLogger",
        "createMockDatabase",
        "catch",
        "createMockCache",
        "mockPerformanceNow",
        "if",
        "createMockProvider"
      ]
    ],
    "tests/llm-tools/test_explain_rule_tool.ts": [
      "t",
      [
        "if"
      ]
    ],
    "tests/frontend/granskad/setup.ts": [
      "t",
      [
        "disconnect",
        "mockSwedishDate",
        "takeRecords",
        "constructor",
        "generateMockPersonnummer",
        "length",
        "localStorageMock",
        "unobserve",
        "IntersectionObserver",
        "waitForAsync"
      ]
    ],
    "tests/frontend/__mocks__/simple-server.ts": [
      "t",
      [
        "if"
      ]
    ],
    "tests/frontend/__mocks__/findings-mocks.ts": [
      "t",
      [
        "to",
        "for",
        "filterFindings",
        "generateMockFindings"
      ]
    ],
    "tests/frontend/__mocks__/server.ts": [
      "t",
      [
        "if"
      ]
    ],
    "tests/frontend/scenario-lab/mocks/scenario-mocks.ts": [
      "t",
      [
        "disconnect",
        "simulateError",
        "MockScenarioWebSocket",
        "for",
        "mockScenarioAPI",
        "connect",
        "emit",
        "simulateKPIUpdate",
        "generateMockHeatmapData",
        "if"
      ]
    ],
    "tests/infrastructure/email-webhook-processor.test.ts": [
      "t",
      [
        "for",
        "if"
      ]
    ],
    "tests/infrastructure/storage-encryption.test.ts": [
      "t",
      [
        "for",
        "catch"
      ]
    ]
  },
  "g": [],
  "dir_purposes": {
    "src/services": "Business logic and service implementations",
    "src/services/llm-tools": "LLM tool server and function calling",
    "components": "React UI components",
    "components/copilot": "AI copilot interface components",
    "components/scenario-lab": "Scenario planning UI",
    "tests": "Test suites and test utilities",
    "config": "Configuration files"
  },
  "staleness": 1756985452
}