{"at":"2025-09-03T23:36:26.758952","root":".","tree":[".","\u251c\u2500\u2500 app/ (3 files)","\u251c\u2500\u2500 components/ (42 files)","\u2502   \u251c\u2500\u2500 copilot/ (6 files)","\u2502   \u251c\u2500\u2500 dashboard/ (3 files)","\u2502   \u251c\u2500\u2500 granskad/ (4 files)","\u2502   \u251c\u2500\u2500 layout/ (1 files)","\u2502   \u251c\u2500\u2500 scenario-lab/ (7 files)","\u2502   \u251c\u2500\u2500 ui/ (13 files)","\u2502   \u2514\u2500\u2500 workflow/ (8 files)","\u2502       \u251c\u2500\u2500 hooks/ (2 files)","\u2502       \u2514\u2500\u2500 types/ (1 files)","\u251c\u2500\u2500 config/ (9 files)","\u2502   \u2514\u2500\u2500 schemas/ (1 files)","\u251c\u2500\u2500 lib/ (3 files)","\u2502   \u2514\u2500\u2500 i18n/","\u251c\u2500\u2500 locales/ (2 files)","\u2502   \u251c\u2500\u2500 en/ (1 files)","\u2502   \u2514\u2500\u2500 sv/ (1 files)","\u251c\u2500\u2500 providers/ (1 files)"],"stats":{"total_files":158,"total_directories":53,"fully_parsed":{"typescript":102,"javascript":7,"python":33},"listed_only":{"json":13,"css":1,"sql":2},"markdown_files":9},"f":{"components/copilot/CopilotDock-old.tsx":["t",["CopilotDock:22:({ isOpen, onClose, context, language = 'sv', onLanguageChange }:CopilotDockProps)::","handleSendMessage:41:()::","handleKeyDown:68:(e:React.KeyboardEvent):handleSendMessage:","toggleLanguage:75:()::","exportConversation:80:()::"]],"components/copilot/MessageList.tsx":["t",["MessageList:16:({ messages, language, showToolCalls }:MessageListProps):renderMessage:","renderCitation:21:(citation:Citation)::","renderMessage:45:(message:CopilotMessage, index:number)::"]],"components/copilot/ProposalCard.tsx":["t",["ProposalCard:20:({ proposal, onAccept, onReject, language, isProcessing = false }:ProposalCardProps):getConfidenceBadge:","getConfidenceBadge:27:()::"]],"components/copilot/ToolCallVisualization.tsx":["t",["ToolCallVisualization:16:({ toolCall, language, className }:ToolCallVisualizationProps):getStatusIcon,getStatusText:","getStatusIcon:21:()::","getStatusText:34:()::"]],"components/scenario-lab/CohortPicker.tsx":["t",["CohortPicker:25:({ suppliers, selectedSuppliers, onSupplierChange, monthRange, onMonthRangeChange, className }:CohortPickerProps):handleMonthChange,handleSupplierToggle:","handleSupplierToggle:33:(supplierId:string, checked:boolean)::","handleMonthChange:37:(type:'start' | 'end', value:string)::"]],"components/scenario-lab/DiffVisualization.tsx":["t",["DiffVisualization:44:({ result, isLoading = false, className }:DiffVisualizationProps)::","getTrendIcon:49:(change:number)::","getChangeColor:56:(change:number, inverse = false)::","getStatusColor:62:(status:string)::"]],"components/scenario-lab/InsightSearch.tsx":["t",["InsightSearch:27:({ insights, selectedInsightIds, onInsightSelect, onSearchChange, className }:InsightSearchProps)::","handleSearchChange:48:(value:string)::","handleInsightToggle:53:(insightId:string, checked:boolean)::","clearSelection:57:()::","getSeverityColor:63:(severity?:string)::"]],"components/scenario-lab/ParameterControls.tsx":["t",["ParameterControls:28:({ parameters, onParameterChange, className }:ParameterControlsProps)::"]],"components/scenario-lab/scenario-lab-old.tsx":["t",["ScenarioLab:58:({ suppliers, insights, onRun, onSave, onCreateInsight }:ScenarioLabProps)::","handleSupplierSelect:105:(supplierId:string)::","handleParameterChange:113:(key:string, value:any)::","handleInsightSearch:117:(value:string)::","handleInsightSelect:121:(insightId:string)::","handleRun:129:async ()::","handleSave:168:async ()::","handleCreateInsight:191:async ()::","handleKeyDown:223:(e:KeyboardEvent):handleRun,handleSave:"]],"sr/services/llm-tools/base/tool-server.ts":["t",{"export":["26",["execute:34:async (params:TInput, context:ToolContext):Promise<ToolResult<TOutput>>::"]],"BaseTool":["27",["execute:34:async (params:TInput, context:ToolContext):Promise<ToolResult<TOutput>>::"]],"RateLimiter":["142",["checkLimit:149:async (userId:string):Promise<boolean>::","waitForSlot:165:async (userId:string):Promise<void>::","__init__:144:(private maxRequestsPerMinute:number = 10, private maxConcurrent:number = 5)::"]],"CircuitBreaker":["174",["isOpen:184:(provider:string):boolean::","recordSuccess:199:(provider:string):void::","recordFailure:204:(provider:string):void::","__init__:178:(private threshold:number = 5, private timeout:number = 60000, private resetTimeout:number = 30000)::"]],"ToolOrchestrator":["217",["registerTool:233:(tool:BaseTool):void::","registerProvider:238:(provider:LLMProvider):void::","getAvailableTools:316:():Array<::"]],"SwedishFormatter":["332",[]],"SecurityValidator":["360",[]]}],"sr/services/llm-tools/index.ts":["t",["getAvailableTools:38:():string[]::"]],"sr/services/llm-tools/optimizations/performance-optimizer.ts":["t",{"MetricsCollector":["7",["startTimer:10:(operationId:string):void::","endTimer:14:(operationId:string, metadata?:any):number::","getMetrics:37:(tool?:string):any[]::","getAverageTime:49:(tool:string):number::","getPercentile:57:(tool:string, percentile:number):number::","reset:66:():void::"]],"CacheManager":["74",["delete:109:(key:string):void::","clear:113:():void::","getStats:119:():::","preload:136:async (entries:Array<{ key:string; value:any; ttl?:number }>):Promise<void>::","__init__:78:(options:{ maxSize?:number ttl?:number updateAgeOnGet?:boolean } = {})::"]],"BatchProcessor":["144",["add:165:async (item:T):Promise<R>::"]],"QueryOptimizer":["199",["optimize:202:async (query:string, params?:any[]):Promise<::","recordExecution:268:(query:string, duration:number):void::","getSlowQueries:278:(threshold:number = 1000):Array<::"]],"ConnectionPoolManager":["302",["getConnection:322:async (poolName:string):Promise<any>::","releaseConnection:334:async (poolName:string, connection:any):Promise<void>::","getPoolStats:398:():Map<string, any>::","__init__:305:(private options:{ minConnections?:number maxConnections?:number idleTimeout?:number healthCheckInterval?:number } = {})::"]],"RequestRouter":["415",["selectProvider:418:(providers:string[]):string::","recordLatency:447:(provider:string, latency:number):void::","releaseProvider:459:(provider:string):void::"]],"OptimizedToolOrchestrator":["467",["getPerformanceStats:523:():any::","__init__:474:(private baseOrchestrator:any)::"]]}],"sr/services/llm-tools/orchestrator.ts":["t",["createLLMToolOrchestrator:139:():ToolOrchestrator::"],{"ClaudeProvider":["15",["execute:17:async (prompt:string, params:any):Promise<any>::","isAvailable:32:async ():Promise<boolean>::"]],"GPT4Provider":["45",["execute:47:async (prompt:string, params:any):Promise<any>::","isAvailable:60:async ():Promise<boolean>::"]],"GeminiProvider":["72",["execute:74:async (prompt:string, params:any):Promise<any>::","isAvailable:83:async ():Promise<boolean>::"]],"AuditLogger":["90",["log:92:async (entry:any):Promise<void>::","getLogs:102:():any[]::"]],"ProposalHandler":["109",["handle:111:async (proposal:any):Promise<boolean>::","getPendingProposals:132:():any[]::"]]}],"sr/services/llm-tools/schemas.ts":["t",["getToolSchemas:118:():typeof ToolSchemas::","validateToolInput:123:(toolName:string, input:any):any::","generateJSONSchemas:133:():Record<string, any>::"]],"sr/services/llm-tools/tools/explain-rule-tool.ts":["t",{"ExplainRuleTool":["31",[]]}],"sr/services/llm-tools/tools/insights-tool.ts":["t",{"InsightSearchTool":["77",[]],"InsightCreateTool":["182",[]],"InsightUpdateTool":["236",[]],"InsightLinkTool":["290",[]]}],"sr/services/llm-tools/tools/metrics-tool.ts":["t",{"MetricsTool":["34",[]]}],"sr/services/llm-tools/tools/reports-tool.ts":["t",{"ReportComposeTool":["46",[]]}],"sr/services/llm-tools/tools/scenarios-tool.ts":["t",{"ScenarioPlanTool":["57",[]],"ScenarioRunTool":["102",[]]}],"sr/services/llm-tools/tools/warehouse-sql-tool.ts":["t",{"WarehouseSQLTool":["26",[]]}],"sr/services/rag_optimizer.py":["p",{"PerformanceConfig":["55",[]],"LRUCache":["79",["__init__:82:(self, max_size:int = 1000)::","get:87:async (self, key:str)>Optional[Any]::Get item from cache","set:98:async (self, key:str, value:Any)::Set item in cache"]],"ConnectionPool":["110",["__init__:113:(self, config:PerformanceConfig, connection_string:str)::","initialize:119:async (self):_health_check_loop,set:Initialize connection pool","_health_check_loop:135:async (self):acquire,set:Periodic health check of connections","acquire:152:async (self):acquire:Acquire connection from pool","close:157:async (self):close,set:Close connection pool"]],"RedisCache":["166",["__init__:169:(self, redis_url:str, ttl:int = 300)::","initialize:174:async (self)::Initialize Redis connection","get:178:async (self, key:str)>Optional[bytes]:get:Get from Redis cache","set:194:async (self, key:str, value:bytes, ttl:Optional[int] = None)::Set in Redis cache","delete:208:async (self, key:str):delete:Delete from Redis cache","close:218:async (self):close:Close Redis connection"]],"QueryOptimizer":["224",["__init__:227:(self, connection_pool:ConnectionPool)::","analyze_query_plan:231:async (self, query:str, params:List[Any])>Dict[str, Any]:_check_index_usage,acquire,get:Analyze query execution plan","_check_index_usage:247:(self, plan:Dict[str, Any])>bool::Check if query uses indexes","optimize_search_query:257:async (self, embedding:List[float], filters:Optional[Dict[str, Any]] = None, limit:int = 10)>str::Generate optimized search query","parallel_search:296:async (self, queries:List[Dict[str, Any]], max_parallel:int = 5)>List[List[Any]]:_execute_single_search:Execute multiple searches in parallel","_execute_single_search:315:async (self, query_params:Dict[str, Any])>List[Any]:acquire,get:Execute a single search query"]],"IndexManager":["328",["__init__:331:(self, connection_pool:ConnectionPool, config:PerformanceConfig)::","start_maintenance:336:async (self):_maintenance_loop:Start background maintenance tasks","_maintenance_loop:341:async (self):_check_index_bloat,_rebuild_index,acquire:Periodic index maintenance","_check_index_bloat:367:async (self, conn:asyncpg.Connection)>Dict[str, float]::Check for index bloat","_rebuild_index:385:async (self, conn:asyncpg.Connection)::Rebuild vector index","optimize_for_recall:402:async (self, target_recall:float = 0.95):acquire:Optimize index parameters for target recall","stop_maintenance:410:async (self)::Stop maintenance tasks"]],"BatchProcessor":["416",["__init__:419:(self, batch_size:int = 100)::","add_item:425:async (self, item:Dict[str, Any]):_process_batch:Add item to batch queue","_process_batch:433:async (self):_execute_batch:Process a batch of items","_execute_batch:444:async (self, batch:List[Dict[str, Any]])::Execute batch processing (to be overridden)","flush:448:async (self):_process_batch:Process all pending items"]],"OptimizedRAGService":["455",["__init__:462:(self, config:PerformanceConfig, connection_string:str)::","initialize:477:async (self):initialize,start_maintenance:Initialize all components","search_with_optimization:492:async (self, embedding:List[float], filters:Optional[Dict[str, Any]] = None, limit:int = 10)>List[Dict[str, Any]]:_build_query_params,_cache_result,_generate_cache_key,_get_cached_result,acquire,optimize_search_query:Optimized vector search with caching","_generate_cache_key:537:(self, embedding:List[float], filters:Optional[Dict[str, Any]], limit:int)>str::Generate cache key for search","_get_cached_result:550:async (self, key:str)>Optional[List[Dict[str, Any]]]:get:Get result from cache","_cache_result:566:async (self, key:str, result:List[Dict[str, Any]]):set:Cache search result","_build_query_params:585:(self, filters:Optional[Dict[str, Any]], embedding:List[float], limit:int)>List[Any]::Build query parameters","close:597:async (self):close,stop_maintenance:Clean up resources"]]}],"sr/services/rag_service.py":["p",{"RAGConfig":["33",[]],"SearchScope":["46",["to_filter:53:(self)>Dict[str, Any]::Convert scope to database filter"]],"SearchResult":["66",[]],"RAGQueryResult":["80",["__aiter__:89:async (self)::Enable async iteration over sources for streaming"]],"EmbeddingGenerator":["95",["__init__:98:(self, config:RAGConfig):_load_model:","_load_model:104:(self)>SentenceTransformer::Load the embedding model","_cache_key:111:(self, text:str, language:str)>str::Generate cache key for text","generate_embeddings:119:async (self, texts:List[str], language:str = 'sv')>List[List[float]]:_cache_key:Generate embeddings for texts with caching","_encode_batch:168:(self, texts:List[str])>List[List[float]]::Encode texts in batches"]],"VectorStore":["185",["__init__:194:(self, connection_string:str, dimension:int = 768, index_type:str = \"hnsw\", index_params:Optional[Dict[str, Any]] = None)::","initialize:201:async (self):_create_indexes,_create_tables:Initialize database connection and create necessary structures","_create_tables:214:async (self)::Create necessary tables for vector storage","_create_indexes:229:async (self)::Create vector and metadata indexes","upsert:249:async (self, documents:List[Dict[str, Any]])::Insert or update documents with embeddings","search:284:async (self, embedding:List[float], limit:int = 10, threshold:Optional[float] = None, filters:Optional[Dict[str, Any]] = None, source_types:Optional[List[str]] = None)>List[SearchResult]::Search for similar vectors with optional filtering","hybrid_search:368:async (self, embedding:List[float], keywords:List[str], limit:int = 10, vector_weight:float = 0.7, keyword_weight:float = 0.3)>List[SearchResult]:search:Hybrid search combining vector similarity and keyword matching","close:423:async (self):close:Close database connection"]],"ScopedRetriever":["429",["__init__:437:(self, vector_store:VectorStore, embedding_generator:EmbeddingGenerator, scope_hierarchy:List[str] = None)::","retrieve:449:async (self, query:str, scope:SearchScope, limit:int = 10, fallback:bool = True, scope_weights:Optional[Dict[str, float]] = None)>List[SearchResult]:_build_scope_levels,generate_embeddings,search:Retrieve documents with hierarchical scope fallback","_build_scope_levels:498:(self, scope:SearchScope)>List[Tuple[str, Dict[str, Any]]]::Build scope levels for hierarchical search"]],"HumanFriendlyIDResolver":["529",["__init__:534:(self)::","set_embedding_store:537:(self, store:Dict[str, List[float]])::Set the embedding store for ID resolution","parse_id:541:async (self, id_str:str)>Optional[Dict[str, Any]]::Parse and validate a human-friendly ID","resolve_to_embedding:567:async (self, id_str:str)>Optional[List[float]]:parse_id:Resolve an ID to its embedding","batch_resolve:575:async (self, ids:List[str])>List[Dict[str, Any]]:parse_id:Batch resolve multiple IDs","extract_and_resolve_ids:590:async (self, content:str)>List[Dict[str, Any]]:parse_id:Extract and resolve IDs mentioned in text"]],"RAGService":["610",["__init__:613:(self, config:Optional[RAGConfig] = None)::","initialize:623:async (self):initialize:Initialize RAG service components","query:661:async (self, text:str, scope:Optional[SearchScope] = None, include_sources:bool = True, max_tokens:int = 2000, max_context_tokens:Optional[int] = None, prioritize_recent:bool = False, response_language:str = \"auto\", limit:Optional[int] = None, stream_results:bool = False)>RAGQueryResult:_calculate_confidence,_detect_language,_generate_answer,_truncate_to_token_limit,generate_embeddings,initialize,retrieve,search:Execute a RAG query","index_documents:737:async (self, documents:List[Dict[str, Any]]):generate_embeddings,initialize,upsert:Index documents into vector store","get_document_count:755:async (self)>int::Get count of indexed documents","provide_feedback:763:async (self, query_id:str, relevance_scores:Dict[str, float])::Provide relevance feedback for improving future results","_detect_language:769:(self, text:str)>str::Detect language of text","_truncate_to_token_limit:791:(self, sources:List[SearchResult], max_tokens:int)>List[SearchResult]::Truncate sources to fit within token limit","_generate_answer:818:(self, query:str, context:str, language:str)>str::Generate answer based on query and context","_calculate_confidence:833:(self, sources:List[SearchResult])>float::Calculate confidence score based on search results","close:846:async (self):close:Clean up resources"]]}],"t/llm-tools/setup.ts":["t",["createMockProvider:220:(name:string):any;\n  function createMockTool(name:string):any;\n  function createMockLogger():any;\n  function mockPerformanceNow():::","generateSwedishTestData:228:():any;\n  const securityTestPatterns:any;\n  const performanceBenchmarks:any;\n  function createMockDatabase():any;\n  function createMockCache():any;\n}\n\nexport::"]],"t/test_rag_system.py":["p",{"TestEmbeddingGeneration":["38",["embedding_generator:42:(self)::Create embedding generator instance","sample_texts:54:(self)::Sample texts in Swedish and English","test_embedding_generation_accuracy:78:async (self, embedding_generator, sample_texts)::Test that embeddings are generated with correct dimensions","test_embedding_consistency:97:async (self, embedding_generator, sample_texts)::Test that same text produces consistent embeddings","test_embedding_batch_performance:114:async (self, embedding_generator)::Test batch embedding generation performance","test_embedding_cache:136:async (self, embedding_generator, sample_texts)::Test embedding caching for repeated texts","test_language_specific_embeddings:160:async (self, embedding_generator, sample_texts)::Test that language-specific models are used correctly"]],"TestVectorSimilaritySearch":["188",["vector_store:192:async (self)::Create vector store instance","sample_documents:205:(self)::Sample documents with embeddings","test_similarity_search_relevance:223:async (self, vector_store, sample_documents)::Test that similarity search returns relevant results","test_filtered_search_performance:247:async (self, vector_store, sample_documents)::Test performance of filtered similarity search","test_hybrid_search:274:async (self, vector_store, sample_documents)::Test hybrid search combining vector similarity and keyword matching","test_cross_table_search:297:async (self, vector_store)::Test searching across multiple tables (findings, insights, scenarios)"]],"TestScopedRetrieval":["338",["scoped_retriever:342:async (self)::Create scoped retriever instance","hierarchical_data:353:(self)::Create hierarchical test data","test_supplier_scoped_retrieval:374:async (self, scoped_retriever, hierarchical_data)::Test retrieval scoped to specific supplier","test_month_scoped_retrieval:392:async (self, scoped_retriever, hierarchical_data)::Test retrieval scoped to supplier and month","test_hierarchical_fallback:407:async (self, scoped_retriever, hierarchical_data):mock_search:Test fallback to broader scope when specific scope has insufficient results","mock_search:412:async (embedding, filters=None, limit=10)::","test_scope_weighting:439:async (self, scoped_retriever)::Test that scope relevance affects ranking"]],"TestHumanFriendlyIDResolution":["464",["id_resolver:468:(self)::Create ID resolver instance","sample_ids:474:(self)::Sample human-friendly IDs","test_id_parsing_and_validation:496:async (self, id_resolver, sample_ids)::Test parsing and validation of human-friendly IDs","test_id_to_embedding_resolution:519:async (self, id_resolver, sample_ids)::Test resolving IDs to their document embeddings","test_batch_id_resolution:541:async (self, id_resolver, sample_ids)::Test batch resolution of multiple IDs","test_id_search_in_content:558:async (self, id_resolver)::Test finding and resolving IDs mentioned in text content"]],"TestRAGSystemIntegration":["578",["rag_service:582:async (self)::Create complete RAG service instance","test_end_to_end_rag_query:596:async (self, rag_service)::Test complete RAG query pipeline","test_rag_with_context_window_management:629:async (self, rag_service)::Test RAG with context window size management","test_rag_multilingual_support:654:async (self, rag_service)::Test RAG with multilingual queries and responses","test_rag_with_feedback_loop:683:async (self, rag_service)::Test RAG with relevance feedback for improving results"]],"TestRAGPerformanceAndScaling":["717",["large_dataset:721:async (self)::Generate large dataset for performance testing","test_large_scale_indexing:740:async (self, rag_service, large_dataset)::Test indexing performance with large dataset","test_concurrent_queries:760:async (self, rag_service)::Test handling of concurrent RAG queries","test_memory_efficiency:793:async (self, rag_service, large_dataset)::Test memory efficiency with large result sets"]]}],"app/layout.tsx":["t",["RootLayout:42:({ children, }:{ children:React.ReactNode })::"]],"app/page.tsx":["t",["HomePage:120:()::","handleInsightClick:123:(insight:InsightData)::","handleInsightAction:127:(action:string, insight:InsightData)::","handleNavigationClick:131:(item:NavigationItem)::"]],"components/copilot/CopilotDock.tsx":["t",["CopilotDock:36:({ isOpen, onClose, context, language = 'sv', onLanguageChange }:CopilotDockProps)::"]],"components/dashboard/clearance-bar.tsx":["t",["handleSegmentClick:48:(segment:ClearanceSegment, index:number)::","handleKeyDown:54:(e:React.KeyboardEvent, segment:ClearanceSegment, index:number):handleSegmentClick:"]],"components/dashboard/confidence-chip.tsx":["t",["getConfidenceLevel:47:(confidence:number):'high' | 'medium' | 'low' | 'unknown'::","getSwedishConfidenceText:54:(level:'high' | 'medium' | 'low' | 'unknown'):string::","getEnglishConfidenceText:63:(level:'high' | 'medium' | 'low' | 'unknown'):string::","ConfidenceIcon:73:({ level }:{ level:'high' | 'medium' | 'low' | 'unknown' })::","handleClick:110:()::","handleKeyDown:116:(e:React.KeyboardEvent):handleClick:"]],"components/dashboard/insight-card.tsx":["t",["getSeverityText:34:(severity:string, locale:'sv' | 'en'):string::","getStatusText:45:(status:string, locale:'sv' | 'en'):string::","getSourceText:56:(source:string, locale:'sv' | 'en'):string::","getSeverityColor:67:(severity:string):string::","handleCardClick:90:()::","handleActionClick:96:(action:string, e:React.MouseEvent)::","handleKeyDown:103:(e:React.KeyboardEvent):handleCardClick:"]],"components/layout/navigation-shell.tsx":["t",["handleKeyDown:48:(e:React.KeyboardEvent, index:number):handleItemClick:","handleItemClick:79:(item:NavigationItem)::"]],"components/scenario-lab/scenario-lab.tsx":["t",["ScenarioLab:23:({ suppliers, insights, onRun, onSave, onCreateInsight, initialConfig, readOnly = false }:ScenarioLabProps)::","handleKeyDown:206:(e:KeyboardEvent)::"]],"components/ui/badge.tsx":["t",["Badge:26:({ className, variant, ...props }:BadgeProps)::"]],"components/ui/dialog.tsx":["t",["Dialog:39:({ open = false, onOpenChange = ()::","DialogHeader:98:({ className, ...props })::","DialogFooter:127:({ className, ...props })::"]],"components/ui/select.tsx":["t",["Select:41:({ value, onValueChange, disabled, children })::","SelectValue:77:({ placeholder })::","SelectContent:87:({ children })::","handleClickOutside:92:(event:MouseEvent)::","SelectItem:119:({ value, children, disabled })::","handleClick:123:()::"]],"components/ui/slider.tsx":["t",["handleChange:15:(e:React.ChangeEvent<HTMLInputElement>)::"]],"components/workflow/checklist-panel.tsx":["t",["ChecklistPanel:13:({ items, progress, onItemToggle, currentState, isTransitioning }:ChecklistPanelProps)::","ChecklistItemRow:192:({ item, onToggle, isReadOnly }:ChecklistItemRowProps)::","getStateDisplayName:254:(state:string):string::","getCategoryIcon:21:(category:ChecklistCategory)::","getCategoryLabel:40:(category:ChecklistCategory):string::","getCategoryColor:51:(category:ChecklistCategory):string::","handleToggle:193:()::"]],"components/workflow/comment-drawer.tsx":["t",["CommentDrawer:25:({ comments, findings, selectedFindingIds, onCommentAdd, currentState }:CommentDrawerProps)::","CommentItem:326:({ comment, findings, renderMarkdown }:CommentItemProps):renderMarkdown:","handleAddComment:39:()::","handleCancel:48:()::","insertMarkdown:54:(before:string, after:string = '')::","renderMarkdown:77:(text:string):string::","getSelectedFindingsText:103:()::","getCommentFindings:110:(comment:Comment)::"]],"components/workflow/findings-table.tsx":["t",["FindingsTable:31:({ findings, selectedIds, onSelectionChange, onFindingUpdate, currentState }:FindingsTableProps)::","FindingRow:342:({ finding, isSelected, onSelect, onStatusChange, isReadOnly, getSeverityIcon, getSeverityColor, getStatusColor, getStatusText, getSeverityText, getSourceText }:FindingRowProps):getSeverityColor,getSeverityIcon,getSeverityText,getSourceText,getStatusColor:","getSeverityIcon:82:(severity:FindingSeverity)::","getSeverityColor:101:(severity:FindingSeverity):string::","getStatusColor:112:(status:FindingStatus):string::","getStatusText:123:(status:FindingStatus):string::","getSeverityText:134:(severity:FindingSeverity):string::","getSourceText:145:(source:string):string::","handleSelectAll:156:()::","handleSelectFinding:164:(findingId:string, selected:boolean)::","handleStatusChange:172:(findingId:string, newStatus:FindingStatus)::","handleSort:176:(newSortBy:typeof sortBy)::","handleRowClick:355:()::"]],"components/workflow/granskad-workflow.tsx":["t",["GranskadWorkflow:23:({ supplierId, month, initialState = 'unreviewed', onStateChange, onComplete }:GranskadWorkflowProps)::","getStateDisplayName:406:(state:GranskadState):string::","loadWorkflowData:52:async ()::","handleChecklistItemToggle:140:async (itemId:string, completed:boolean):map:","handleFindingUpdate:169:async (findingId:string, updates:Partial<FindingItem>):map:","handleCommentAdd:194:async (content:string, findingIds?:string[])::","handleStateTransition:223:async (targetState:GranskadState)::","handleSnapshotConfirm:258:async (snapshotId:string)::","getChecklistProgress:278:()::","canMarkAsReviewed:288:():getChecklistProgress:"]],"components/workflow/hooks/use-audit-logger.ts":["t",["useAuditLogger:4:():UseAuditLoggerReturn:convertToCsv,getSessionId,getStoredLogs:","getStoredLogs:92:(storageKey:string):AuditEvent[]::","getSessionId:102:():string::","convertToCsv:111:(events:AuditEvent[]):string:escapeCsvValue:","escapeCsvValue:151:(value:string):string::"]],"components/workflow/hooks/use-granskad-state.ts":["t",["useGranskadState:9:(initialState:GranskadState, supplierId:string, month:string):UseGranskadStateReturn:getTransitionReason:","getTransitionReason:122:(from:GranskadState, to:GranskadState):string::"]],"components/workflow/snapshot-dialog.tsx":["t",["SnapshotDialog:28:({ checklistItems, findings, comments, supplierId, month, onConfirm, onCancel }:SnapshotDialogProps)::","handleConfirm:47:async ()::","generateDataHash:65:()::"]],"config/config.py":["p",["get_config:193:(config_name:str)>Dict[str, Any]:load_config:Convenience function to get configuration","get_email_config:197:()>Dict[str, Any]:load_email_config:Get email infrastructure configuration","get_storage_config:201:()>Dict[str, Any]:load_storage_config:Get object storage configuration","get_compliance_config:205:()>Dict[str, Any]:load_compliance_config:Get compliance configuration"],{"ConfigPaths":["21",[]],"ConfigLoader":["30",["__init__:38:(self, environment:str = None)::","load_config:43:(self, config_name:str, validate_schema:bool = True)>Dict[str, Any]:_deep_merge,_resolve_env_vars,_validate_schema:","load_email_config:90:(self)>Dict[str, Any]:load_config:Load EU email infrastructure configuration","load_storage_config:94:(self)>Dict[str, Any]:load_config:Load object storage configuration","load_compliance_config:98:(self)>Dict[str, Any]:load_config:Load Swedish compliance configuration","load_all_configs:102:(self)>Dict[str, Dict[str, Any]]:load_compliance_config,load_email_config,load_storage_config:Load all configurations for the current environment","_deep_merge:110:(self, base:Dict, override:Dict)>Dict:_deep_merge:Deep merge configuration dictionaries","_validate_schema:122:(self, config:Dict[str, Any], config_name:str)>None::Validate configuration against JSON schema if available","_resolve_env_vars:144:(self, config:Dict[str, Any])>Dict[str, Any]:resolve_value:Resolve environment variable placeholders in configuration","resolve_value:146:(value):resolve_value:"]],"ConfigValidator":["162",["validate_eu_region:166:(region:str)>bool::Validate that region is within EU/EES","validate_retention_policy:175:(years:int)>bool::Validate retention policy meets Swedish requirements (minimum 5 years)","validate_encryption_algorithm:180:(algorithm:str)>bool::Validate encryption algorithm meets security standards","validate_language_code:186:(lang:str)>bool::Validate language codes for Swedish/English support"]]}],"config/example_usage.py":["p",["main:18:()::Demonstrate configuration loading for EU infrastructure setup"]],"jest.setup.js":["j",{"IntersectionObserver":["68",["constructor:69:()::","disconnect:70:()::","observe:71:()::","unobserve:72:()::","takeRecords:73:()::","__init__:69:()::"]],"ResizeObserver":["77",["constructor:78:()::","disconnect:79:()::","observe:80:()::","unobserve:81:()::","__init__:78:()::"]]}],"lib/markdown.ts":["t",["renderMarkdown:6:(text:string):string::","sanitizeMarkdown:39:(text:string):string::","stripMarkdown:71:(text:string):string::"]],"lib/theme-provider.tsx":["t",["ThemeProvider:32:({ children, defaultTheme = 'system', storageKey = 'svoa-lea-theme', ...props }:ThemeProviderProps)::","ThemeToggle:161:({ className, locale = 'sv', ...props }:React.ButtonHTMLAttributes<HTMLButtonElement> & { locale?:'sv' | 'en' }):getAriaLabel,useTheme:","handleChange:59:(e:MediaQueryListEvent)::","useTheme:149:()::","getAriaLabel:168:()::"],{"root":["77",[]]}],"lib/utils.ts":["t",["cn:4:(...inputs:ClassValue[])::","formatSwedishNumber:14:(value:number, decimals:number = 2):string::","formatSwedishCurrency:27:(value:number, currency:string = 'SEK'):string::","formatSwedishDate:41:(date:Date | string, options:Intl.DateTimeFormatOptions = { year:'numeric', month:'2-digit', day:'2-digit' }):string::","hasSwedishCharacters:58:(text:string):boolean::","sortSwedish:67:(array:string[]):string[]::","validatePersonnummer:76:(personnummer:string):boolean::","maskPersonnummer:103:(personnummer:string):string::","generateHumanFriendlyId:119:(prefix:string, sequence:number, date:Date = new Date()::","parseHumanFriendlyId:136:(id:string):::","prefersReducedMotion:157:():boolean::","prefersHighContrast:165:():boolean::"]],"providers/copilot-provider.tsx":["t",["CopilotProvider:17:({ children }:{ children:ReactNode })::","useCopilot:45:()::","addMessage:22:(messageData:Omit<CopilotMessage, 'id' | 'timestamp'>)::"]],"run_tests.py":["p",["main:263:():run_tests:Main entry point"],{"ColoredTestResult":["15",["__init__:27:(self, *args, **kwargs):__init__:","startTest:31:(self, test):startTest:","addSuccess:35:(self, test):addSuccess:","addError:46:(self, test, err):addError:","addFailure:58:(self, test, err):addFailure:","addSkip:70:(self, test, reason):addSkip:"]],"TestRunner":["81",["__init__:84:(self)::","discover_tests:90:(self)::Discover all test modules","run_tests:96:(self, verbosity=2):discover_tests,generate_coverage_report,generate_json_report,print_summary:Run all discovered tests","print_summary:154:(self, result)::Print test execution summary","generate_json_report:218:(self)::Generate JSON test report","generate_coverage_report:241:(self)::Generate test coverage report"]]}],"sr/database/models.py":["p",["generate_insight_id:178:(month:str)>str::Generate INS-YYYY-MM-NNN format ID","generate_scenario_id:184:(month:str)>str::Generate SCN-YYYY-MM-NNN format ID"],{"Load":["27",[]],"Row":["43",[]],"Finding":["66",[]],"Insight":["84",[]],"InsightLink":["108",[]],"Scenario":["121",[]],"Comment":["140",[]],"ChecklistRun":["151",[]],"Embedding":["165",[]]}],"sr/exceptions/agent_exceptions.ts":["t",{"PIIDetectionError":["9",["constructor:11:(message:string, detectionId?:string)::","__init__:11:(message:string, detectionId?:string)::"]],"PolicyViolationError":["22",["constructor:25:(message:string, violation_type:string, severity:string = 'high')::","__init__:25:(message:string, violation_type:string, severity:string = 'high')::"]],"UnauthorizedActionError":["37",["constructor:40:(message:string, action:string, userId:string)::","__init__:40:(message:string, action:string, userId:string)::"]],"ConfirmationRequiredError":["52",["constructor:54:(message:string, proposalId:string)::","__init__:54:(message:string, proposalId:string)::"]],"TraceabilityError":["65",["constructor:67:(message:string, traceId?:string)::","__init__:67:(message:string, traceId?:string)::"]]}],"sr/services/agent_audit.ts":["t",{"AgentAuditLogger":["41",["log_pii_event:60:async (event:PIIDetectionEvent):Promise<string>::","log_policy_violation:86:async (event:PolicyViolationEvent):Promise<string>::","log_action:114:async (event:ActionAuditEntry):Promise<string>::","verify_chain_integrity:134:async (audit_ids:string[]):Promise<boolean>::","get_audit_entry:172:async (audit_id:string):Promise<AuditEntry | null>::","__init__:43:(options:{ log_directory?:string retention_days?:number encryption_enabled?:boolean immutable_storage?:boolean })::"]]}],"sr/services/agent_guardrails.ts":["t",{"PIIDetectionError":["83",["constructor:84:(message:string, public detectionId?:string)::","__init__:84:(message:string, public detectionId?:string)::"]],"PolicyViolationError":["90",["__init__:91:(message:string, public violation_type:string, public severity:string = 'high')::"]],"UnauthorizedActionError":["101",["constructor:102:(message:string, public action:string, public userId:string)::","__init__:102:(message:string, public action:string, public userId:string)::"]],"ConfirmationRequiredError":["108",["constructor:109:(message:string, public proposalId:string)::","__init__:109:(message:string, public proposalId:string)::"]],"TraceabilityError":["115",["constructor:116:(message:string, public traceId?:string)::","__init__:116:(message:string, public traceId?:string)::"]],"PIIDetector":["125",["scan_text:142:(text:string, include_redaction:boolean = true):PIIDetection[]::","scan_batch:208:(texts:string[]):PIIDetection[][]::","__init__:130:(private options:{ language_support:string[]; personnummer_validation:boolean; confidence_threshold:number; })::"]],"ActionTracker":["237",["validate_determinism:334:(scenario_id:string, execution_ids:string[]):boolean::","get_trace:386:(trace_id:string):ActionTrace | undefined::","__init__:240:(private options:{ trace_all_actions:boolean; include_tool_calls:boolean; retention_days:number; })::"]],"PolicyValidator":["394",["validate_sql_query:423:(query:string):PolicyValidationResult::","check_tool_permission:455:(role:string, tool:string):boolean::","__init__:411:(private options:{ policies_config_path:string; strict_mode:boolean; swedish_compliance:boolean; })::"]],"ConfirmationWorkflow":["488",["get_proposal:554:(proposal_id:string):Proposal | undefined::","__init__:490:(private options:{ require_confirmation_for:string[]; confirmation_timeout:number; audit_confirmations:boolean; })::"]],"SecurityEnforcer":["594",["check_rate_limit:604:(user_id:string):boolean::","create_session:623:(user_id:string):string::","close_session:641:(session_id:string):void::","__init__:597:(private options:{ max_queries_per_minute:number; max_concurrent_sessions:number; suspicious_pattern_detection:boolean; audit_security_events:boolean; })::"]],"AgentGuardrails":["716",["__init__:721:(options:{ pii_detection_enabled:boolean; policy_validation_enabled:boolean; action_tracking_enabled:boolean; confirmation_workflow_enabled:boolean; audit_logging_enabled:boolean; })::"]]}],"sr/services/audit-logger.ts":["t",{"AuditLogger":["73",["log:92:async (entry:AuditEntry):Promise<void>::","query:139:async (query:AuditQuery):Promise<::","getPackAuditTrail:191:async (packId:string):Promise<::","validateChainIntegrity:258:async ():Promise<::","getFullTrail:542:async (packId:string):Promise<Array<::","__init__:78:(options:{ logDirectory?:string; rotationSize?:number; retentionDays?:number; service?:string; region?:string; } = {})::"]]}],"sr/services/email_authentication_service.ts":["t",{"EmailAuthenticationService":["67",["constructor:72:(auditLogger:AuditLogger, trustedDomains:string[] = [])::","__init__:72:(auditLogger:AuditLogger, trustedDomains:string[] = [])::"]]}],"sr/services/email_webhook_processor.ts":["t",{"EmailWebhookProcessor":["74",["processWebhook:100:async (payload:WebhookPayload, headers:Record<string, string>):Promise<ProcessingResult>::","extractXLSXContent:311:async (buffer:Buffer):Promise<string[][]>::","getMetrics:323:():::","healthCheck:340:async ():Promise<::","__init__:81:(options:{ auditLogger:AuditLogger; storageClient:ObjectStorageClient; allowedFileTypes?:string[]; maxAttachmentSize?:number; hmacSecret:string; })::"]]}],"sr/services/evidence-pack-batch.ts":["t",{"EvidencePackBatchProcessor":["97",["cancelBatchJob:226:async (jobId:string, userId:string):Promise<boolean>::","getBatchStatus:272:async (jobId:string):Promise<BatchJob | null>::","getQueueMetrics:284:async ():Promise<::","optimizeConcurrency:349:async ():Promise<::","__init__:105:(exporter:EvidencePackExporter, auditLogger:AuditLogger, options:{ maxConcurrency?:number; memoryThreshold?:number; enableAdaptiveScaling?:boolean; } = {})::"]]}],"sr/services/evidence-pack-compliance.ts":["t",{"EvidencePackComplianceValidator":["107",["validateDataResidency:261:async (manifest:EvidencePackManifest):Promise<ComplianceCheck>::","validateEncryption:288:async (manifest:EvidencePackManifest):Promise<ComplianceCheck>::","validateGDPR:315:async (manifest:EvidencePackManifest):Promise<::","validateRetentionPolicy:382:async (manifest:EvidencePackManifest):Promise<ComplianceCheck>::","validateAuditTrail:410:async (manifest:EvidencePackManifest):Promise<ComplianceCheck>::","validateCrossBorderTransfer:437:async (manifest:EvidencePackManifest):Promise<ComplianceCheck>::","assessEESCompliance:465:async (manifest:EvidencePackManifest):Promise<EESCompliance>::","__init__:111:(auditLogger:AuditLogger, options:{ allowedRegions?:string[]; encryptionStandards?:any; enableStrictMode?:boolean; } = {})::"]]}],"sr/services/evidence-pack-export.ts":["t",{"EvidencePackExporter":["136",["archiveToGlacier:1490:async (packId:string):Promise<void>::","calculateChecksums:751:async (components:Record<string, Buffer>):Promise<Record<string, string>>::","uploadEvidencePack:803:async (packId:string, data:Buffer):Promise<void>::","deleteEvidencePack:808:async (packId:string):Promise<void>::","downloadEvidencePack:1224:async (packId:string):Promise<::","detectDataCorruption:1545:async (packId:string):Promise<::","createVersion:1330:async (packId:string, versionData:{ data:any }):Promise<::","getVersionHistory:1369:async (packId:string):Promise<Array<::","cleanupTempFiles:1920:async (tempFiles:string[]):Promise<::","generateEvidencePack:1977:async (request:any):Promise<EvidencePackManifest &::","sanitizeInput:2030:async (input:any):Promise<any>::","createTempFiles:2046:async (options:{ count:number; prefix:string }):Promise<string[]>::","validatePackIntegrity:2239:async (packId:string):Promise<::","__init__:142:(storageClientOrOptions:any | { storageClient?:any; auditLogger?:any; retentionYears?:number; complianceMode?:string; tempDir?:string; region?:string; encryptionKey?:string; }, auditLogger?:any, options:{ tempDir?:string; region?:string; encryptionKey?:string; } = {})::"]],"DataIntegrityValidator":["2311",["calculateChecksum:2312:async (filePath:string):Promise<string>::","verifyIntegrity:2320:async (manifest:EvidencePackManifest):Promise<boolean>::","detectCorruption:2334:async (packId:string):Promise<string[]>::"]],"ComplianceValidator":["2344",["validateEUCompliance:2345:async (manifest:EvidencePackManifest):Promise<void>::","validateGDPRCompliance:2373:async (manifest:EvidencePackManifest):Promise<void>::","getChainOfCustody:2412:async (packId:string):Promise<Array<::","getPackWithCache:2592:async (packId:string):Promise<::"]]}],"sr/services/object-storage-client.ts":["t",{"ObjectStorageClient":["42",["constructor:46:(config:StorageConfig | { region:string; bucket:string; encryption?:any })::","setDownloadConfig:198:async (downloadId:string, config:DownloadConfig):Promise<void>::","transitionToArchive:212:async (packId:string, tier:'glacier' | 'deep_archive'):Promise<void>::","listEvidencePacks:227:async (prefix?:string):Promise<::","getStorageMetrics:265:async ():Promise<StorageMetrics>::","validateEUResidency:273:async (key:string):Promise<boolean>::","enableVersioning:279:async ():Promise<void>::","getObjectIntegrity:312:async (key:string):Promise<::","__init__:46:(config:StorageConfig | { region:string; bucket:string; encryption?:any })::"]],"transition":["217",[]]}],"sr/services/scenario_engine.py":["p",{"ScenarioValidationError":["24",["__init__:26:(self, message:str, validation_errors:Optional[List[str]] = None):__init__:"]],"DeterminismError":["31",[]],"ScenarioConfig":["38",["__post_init__:46:(self):_validate_insight_id:Validate configuration after initialization","_validate_insight_id:77:(self, insight_id:str)>bool::Validate INS-YYYY-MM-NNN format"]],"ScenarioResult":["85",["to_dict:103:(self)>Dict[str, Any]::Convert to dictionary for JSON serialization"]],"Insight":["111",["from_id:118:(cls, insight_id:str)>'Insight'::Create from ID string"]],"Snapshot":["126",[]],"KPICalculator":["137",["__init__:140:(self):_load_swedish_holidays:","_load_swedish_holidays:143:(self)>List[datetime]::Load Swedish holiday calendar","calculate_completeness:158:async (self, data:pd.DataFrame)>float::Calculate data completeness KPI","calculate_anomaly_burden:169:async (self, data:pd.DataFrame, weight_threshold:float = 0.15)>float::Calculate anomaly burden KPI","calculate_review_progress:188:async (self, findings_data:pd.DataFrame)>float::Calculate review progress KPI","apply_seasonal_adjustment:201:async (self, data:pd.DataFrame)>pd.DataFrame::Apply Swedish seasonal adjustments"]],"DiffGenerator":["220",["generate_kpi_diff:223:async (self, baseline:ScenarioResult, modified:ScenarioResult)>Dict[str, Any]::Generate KPI diff","generate_flag_diff:244:async (self, baseline:ScenarioResult, modified:ScenarioResult)>Dict[str, Any]::Generate flag changes diff","format_diff_swedish:271:async (self, diff_data:Dict[str, Any])>Dict[str, Any]::Format diff with Swedish number formatting"]],"SnapshotManager":["295",["__init__:298:(self)::","create_snapshot:308:async (self, data:Any, version:Optional[str] = None, parent_id:Optional[str] = None, create_backup:bool = False)>Snapshot:to_dict:Create immutable snapshot","verify_integrity:352:async (self, snapshot_id:str)>bool::Verify snapshot integrity","recover_snapshot:365:async (self, snapshot_id:str)>Optional[Snapshot]::Recover snapshot from backup","get_version_history:380:async (self, snapshot_id:str)>List[Snapshot]::Get version history chain","_corrupt_snapshot_for_testing:392:async (self, snapshot_id:str)::Corrupt snapshot for testing (testing only)"]],"ScenarioEngine":["398",["__init__:418:(self, cache_ttl:int = 300, cloud_providers:Optional[List[str]] = None, locale:str = 'sv-SE')::","execute_scenario:436:async (self, config:Union[ScenarioConfig, Dict[str, Any]], data:Optional[pd.DataFrame] = None, provider:str = 'auto')>ScenarioResult:_calculate_baseline_volume,_calculate_data_quality,_calculate_expected_volume,_calculate_flag_counts,_calculate_kpis,_extract_supplier_metadata,_fetch_data,_generate_determinism_hash,_get_baseline,_get_cache_key,_select_provider,generate_kpi_diff:Execute a scenario and return results","resolve_insight_references:528:async (self, insight_ids:List[str])>List[Insight]:from_id:Resolve insight IDs to insight objects","_fetch_data:545:async (self, config:ScenarioConfig)>pd.DataFrame::Fetch data for scenario","_calculate_kpis:567:async (self, config:ScenarioConfig, data:pd.DataFrame)>Dict[str, float]:calculate_anomaly_burden,calculate_completeness,calculate_review_progress:Calculate all KPIs","_calculate_flag_counts:594:async (self, config:ScenarioConfig, data:pd.DataFrame)>Dict[str, Dict[str, int]]::Calculate flag counts per supplier","_calculate_data_quality:607:async (self, data:pd.DataFrame)>float::Calculate data quality score","_extract_supplier_metadata:617:async (self, suppliers:List[str])>Dict[str, Any]::Extract metadata about suppliers","_calculate_expected_volume:634:async (self, config:ScenarioConfig, data:pd.DataFrame)>float::Calculate expected volume","_calculate_baseline_volume:651:async (self, config:ScenarioConfig, data:pd.DataFrame)>float::Calculate baseline volume","_get_baseline:667:async (self, snapshot_id:str)>Optional[ScenarioResult]::Get baseline scenario result","_select_provider:679:async (self)>str:_claude_available,_gpt4_available:Select cloud provider based on availability","_claude_available:688:async (self)>bool::Check if Claude is available","_gpt4_available:692:async (self)>bool::Check if GPT-4 is available","_generate_determinism_hash:696:(self, config:ScenarioConfig, kpis:Dict[str, float])>str::Generate deterministic hash for validation","_get_cache_key:711:(self, config:ScenarioConfig)>str::Generate cache key for config"]]}],"sr/services/storage_encryption_service.ts":["t",{"StorageEncryptionService":["49",["constructor:55:(config:EncryptionConfig, auditLogger:AuditLogger)::","generateEncryptionKey:75:async ():Promise<EncryptionKey>::","encryptData:114:async (data:Buffer, keyId?:string):Promise<EncryptedData>::","decryptData:185:async (encryptedData:EncryptedData):Promise<Buffer>::","rotateKeys:236:async ():Promise<void>::","emergencyKeyRotation:280:async (reason:string):Promise<void>::","getMetrics:310:():EncryptionMetrics::","validateFIPSCompliance:317:():boolean::","performanceTest:331:async (dataSizes:number[]):Promise<::","destroy:416:():void::","__init__:55:(config:EncryptionConfig, auditLogger:AuditLogger)::"]]}],"t/backend/test_scenario_engine.py":["p",{"TestScenarioEngineCore":["36",["engine:40:async (self)::Create scenario engine instance","valid_config:45:(self)::Valid scenario configuration","test_scenario_engine_initialization:60:async (self, engine)::Test that scenario engine initializes correctly","test_scenario_execution_basic:68:async (self, engine, valid_config)::Test basic scenario execution","test_json_schema_validation:79:async (self, engine)::Test that input/output follows JSON schema","test_determinism_validation:93:async (self, engine, valid_config)::Test that same inputs produce identical outputs"]],"TestKPICalculation":["109",["kpi_calculator:113:(self)::Create KPI calculator instance","sample_data:118:(self)::Sample Swedish waste management data","test_completeness_kpi_calculation:129:async (self, kpi_calculator, sample_data)::Test completeness KPI calculation","test_anomaly_burden_calculation:137:async (self, kpi_calculator, sample_data)::Test anomaly burden KPI calculation","test_review_progress_calculation:152:async (self, kpi_calculator)::Test review progress KPI calculation","test_swedish_seasonal_adjustments:165:async (self, kpi_calculator)::Test Swedish seasonal adjustments (summer vacation, holidays)"]],"TestDiffGeneration":["186",["diff_generator:190:(self)::Create diff generator instance","baseline_result:195:(self)::Baseline scenario result","modified_result:211:(self)::Modified scenario result","test_kpi_diff_generation:226:async (self, diff_generator, baseline_result, modified_result)::Test KPI diff generation","test_flag_changes_diff:236:async (self, diff_generator, baseline_result, modified_result)::Test flag changes diff generation","test_swedish_number_formatting_in_diff:246:async (self, diff_generator)::Test that diffs use Swedish number formatting"]],"TestSnapshotManagement":["263",["snapshot_manager:267:async (self)::Create snapshot manager instance","test_snapshot_creation:271:async (self, snapshot_manager)::Test snapshot creation with immutability","test_snapshot_integrity_validation:286:async (self, snapshot_manager)::Test snapshot integrity validation","test_snapshot_recovery_from_corruption:303:async (self, snapshot_manager)::Test snapshot recovery from corruption","test_snapshot_versioning:318:async (self, snapshot_manager)::Test snapshot versioning system"]],"TestInsightReferencing":["340",["engine:344:(self)::Create scenario engine instance","test_insight_reference_by_id:348:async (self, engine)::Test referencing insights by INS-YYYY-MM-NNN format","test_invalid_insight_id_format:362:async (self, engine)::Test handling of invalid insight ID formats","test_insight_impact_on_scenario:371:async (self, engine)::Test how insights affect scenario calculations"]],"TestPerformanceAndScaling":["392",["engine:396:(self)::Create scenario engine instance","large_dataset:401:(self)::Generate large dataset for performance testing","test_median_execution_time:420:async (self, engine, large_dataset)::Test that median execution time is under 60 seconds","test_p95_execution_time:440:async (self, engine, large_dataset)::Test that 95th percentile execution time is under 120 seconds","test_concurrent_execution:459:async (self, engine)::Test concurrent scenario execution with resource contention","test_memory_optimization_large_cohorts:483:async (self, engine)::Test memory optimization for large supplier cohorts (>1000 facilities)"]],"TestEdgeCasesAndErrorHandling":["506",["engine:510:(self)::Create scenario engine instance","test_empty_dataset_handling:514:async (self, engine)::Test handling of empty datasets","test_invalid_parameter_validation:528:async (self, engine)::Test validation of invalid parameters","test_partial_data_handling:543:async (self, engine)::Test handling of partial/incomplete data","test_swedish_character_handling:558:async (self, engine)::Test handling of Swedish characters (\u00e5\u00e4\u00f6) in supplier names","test_circuit_breaker_activation:572:async (self, engine)::Test circuit breaker activation under failure conditions"]],"TestCloudProviderFailover":["589",["engine:593:(self)::Create scenario engine with cloud providers","test_provider_failover_maintains_determinism:600:async (self, engine)::Test that failover between providers maintains determinism","test_cascading_failover:618:async (self, engine)::Test cascading failover through all providers"]],"TestSwedishContextSpecific":["632",["engine:636:(self)::Create scenario engine with Swedish configuration","test_swedish_holiday_handling:640:async (self, engine)::Test handling of Swedish holidays in calculations","test_swedish_supplier_naming_patterns:660:async (self, engine)::Test recognition of Swedish supplier naming patterns","test_seasonal_waste_patterns:676:async (self, engine)::Test Swedish seasonal waste patterns"]]}],"t/frontend/components/glassmorphism.test.tsx":["t",["mockCSSSupports:26:(supported:boolean)::"]],"t/frontend/granskad/__mocks__/archon-mocks.tsx":["t",["mockArchonAPI:20:():MockArchonAPI:generateMockHash:","generateMockHash:85:():string::","generateMockChecklist:95:(categories:number = 3, itemsPerCategory:number = 4)::","generateMockFindings:138:(count:number = 5)::","generateMockInsights:156:(count:number = 3)::","generateMockComment:171:(options:Partial<{ markdown:boolean; author:string; timestamp:string; }> = {})::","generateMockAuditEntry:196:(action:string, userId?:string):generateMockHash:","generateMockClearanceStatus:218:(status?:'green' | 'yellow' | 'red')::","MockProviders:300:({ children })::"],{"MockStateMachine":["256",["constructor:259:(initialState:string = 'Ogranskad')::","transition:263:(to:string):boolean::","getState:284:():string::","getHistory:288:()::","reset:292:()::","__init__:259:(initialState:string = 'Ogranskad')::"]]}],"t/frontend/granskad/setup.ts":["t",["localStorageMock:66:(():length:","waitForAsync:151:(ms:number = 100)::","mockSwedishDate:154:(dateString:string)::","generateMockPersonnummer:165:(valid:boolean = true)::"],{"IntersectionObserver":["34",["constructor:35:()::","disconnect:36:()::","observe:37:()::","unobserve:38:()::","takeRecords:39:()::","__init__:35:()::"]],"ResizeObserver":["43",["constructor:44:()::","disconnect:45:()::","observe:46:()::","unobserve:47:()::","__init__:44:()::"]]}],"t/frontend/granskad/test_granskad_layout.tsx":["t",["setViewport:30:(viewport:keyof typeof VIEWPORTS)::","mockIntersectionObserver:45:()::"]],"t/frontend/navigation/responsive-shell.test.tsx":["t",["setViewport:44:(viewport:keyof typeof viewports)::"]],"t/frontend/scenario-lab/mocks/scenario-mocks.ts":["t",["mockScenarioAPI:35:()::","generateMockHeatmapData:241:(rows:number = 4, cols:number = 6)::","MockScenarioLabProviders:263:({ children })::","validateScenarioParams:317:(params:any):{ valid:boolean; errors:string[] }::","formatSwedishNumber:343:(value:number, decimals:number = 0):string::","formatSwedishCurrency:350:(value:number):string::","formatSwedishPercent:359:(value:number):string:formatSwedishNumber:"],{"MockScenarioWebSocket":["272",["connect:275:():emit:","disconnect:282:()::","on:287:(event:string, callback:(data:any) => void)::","off:294:(event:string, callback:(data:any) => void)::","emit:298:(event:string, data:any)::","simulateProgressUpdate:302:(scenarioId:string, progress:number)::","simulateKPIUpdate:306:(scenarioId:string, kpis:any[])::","simulateError:310:(scenarioId:string, error:string)::"]]}],"t/frontend/scenario-lab/test_scenario_lab_layout.tsx":["t",["renderWithProviders:24:(component:React.ReactElement)::","setViewport:224:(width:number)::"]],"t/frontend/theme/dark-mode-accessibility.test.tsx":["t",["mockMatchMedia:30:(matches:boolean)::","getContrastRatio:58:(foreground:string, background:string):number:getLuminance:","getLuminance:60:(color:string)::"]],"t/infrastructure/conftest.py":["p",["aws_region:21:()>str::AWS EU region for testing","aws_account_id:27:()>str::AWS account ID","environment:37:()>str:environment:Current environment (dev/staging/prod)","eu_regions:43:()>List[str]::List of EU AWS regions","swedish_compliance_requirements:56:()>Dict[str, Any]::Swedish regulatory compliance requirements","waste_data_schema:76:()>Dict[str, Any]::Swedish waste management data schema","mock_aws_services:102:():mock_client:Mock AWS services for local testing","terraform_modules_path:137:()>Path::Path to Terraform modules","kubernetes_manifests_path:143:()>Path::Path to Kubernetes manifests","ci_pipeline_path:152:()>Path::Path to CI/CD pipeline configurations","performance_thresholds:158:()>Dict[str, Any]::Performance thresholds for infrastructure","security_baselines:175:()>Dict[str, Any]::Security baseline requirements","cost_limits:196:()>Dict[str, float]:environment:Monthly cost limits per environment (EUR)","test_environment_setup:207:(request)::Setup test environment before each test","pytest_addoption:231:(parser)::Add custom command line options","pytest_configure:265:(config)::Configure pytest with custom markers","pytest_collection_modifyitems:287:(config, items)::Modify test collection based on markers","assert_infrastructure_ready:315:():_assert_ready,_check_eks_ready,_check_rds_ready,_check_s3_ready,_check_secrets_ready,_check_vpc_ready:Assert that infrastructure is ready for testing","_check_vpc_ready:335:()>bool::Check if VPC is ready","_check_eks_ready:345:()>bool::Check if EKS cluster is ready","_check_rds_ready:358:()>bool::Check if RDS is ready","_check_s3_ready:370:()>bool::Check if S3 buckets are ready","_check_secrets_ready:380:()>bool::Check if Secrets Manager is ready"]],"t/infrastructure/test_cicd_pipeline.py":["p",{"TestCICDPipeline":["23",["pipeline_stages:30:(self)>List[str]::Required pipeline stages in order","deployment_requirements:48:(self)>Dict[str, Any]::Deployment requirements and constraints","test_github_actions_workflow:63:(self, pipeline_stages:List[str])::Test GitHub Actions workflow configuration","test_gitlab_ci_configuration:117:(self, pipeline_stages:List[str])::Test GitLab CI configuration","test_jenkins_pipeline:162:(self)::Test Jenkins pipeline configuration","test_terraform_cloud_integration:196:(self)::Test Terraform Cloud/Enterprise integration","test_argocd_configuration:220:(self)::Test ArgoCD GitOps configuration","test_deployment_strategies:263:(self, deployment_requirements:Dict[str, Any])::Test deployment strategy configurations","test_security_scanning_integration:309:(self)::Test security scanning tool integration","test_dependency_scanning:357:(self)::Test dependency scanning configuration","test_quality_gates:389:(self)::Test quality gate configurations","test_artifact_management:420:(self)::Test artifact storage and management","test_deployment_permissions:449:(self, deployment_requirements:Dict[str, Any])::Test deployment permission configurations","test_rollback_mechanisms:480:(self, deployment_requirements:Dict[str, Any])::Test rollback and recovery mechanisms","test_monitoring_integration:515:(self)::Test monitoring and observability integration","test_infrastructure_provisioning_time:559:(self, deployment_requirements:Dict[str, Any])::Test that infrastructure can be provisioned within time constraints","test_ci_performance_metrics:590:(self)::Test CI pipeline performance metrics"]]}],"t/infrastructure/test_container_orchestration.py":["p",{"TestContainerOrchestration":["20",["scaling_requirements:27:(self)>Dict[str, Any]::Autoscaling requirements and thresholds","resource_requirements:42:(self)>Dict[str, Any]::Container resource requirements","test_eks_cluster_configuration:59:(self)::Test EKS cluster configuration","test_node_groups_configuration:123:(self)::Test EKS node groups configuration","test_horizontal_pod_autoscaler:185:(self, scaling_requirements:Dict[str, Any])::Test HPA configurations","test_vertical_pod_autoscaler:251:(self)::Test VPA configurations if used","test_cluster_autoscaler:288:(self)::Test cluster autoscaler configuration","test_pod_disruption_budgets:346:(self)::Test PodDisruptionBudget configurations","test_resource_quotas:397:(self)::Test namespace resource quotas","test_container_resource_limits:468:(self, resource_requirements:Dict[str, Any]):_parse_cpu,_parse_memory:Test container resource requests and limits","test_init_containers:524:(self)::Test init container configurations","test_statefulset_configuration:562:(self)::Test StatefulSet specific configurations","test_service_mesh_configuration:613:(self)::Test service mesh (Istio/Linkerd) configuration if present","test_pod_priority_classes:672:(self)::Test pod priority class configurations","test_karpenter_configuration:712:(self)::Test Karpenter autoscaler configuration if used","_parse_cpu:755:(self, cpu_str:str)>float::Parse CPU resource string to millicores","_parse_memory:761:(self, mem_str:str)>int::Parse memory resource string to bytes"]]}],"t/infrastructure/test_email_infrastructure.py":["p",["generate_test_xlsx_file:915:()>bytes::Generate a test XLSX file with Swedish data","generate_test_csv_file:931:()>bytes::Generate a test CSV file with Swedish characters"],{"TestEmailWebhookIntegration":["33",["webhook_processor:37:(self)::Get webhook processor service (will fail - not implemented)","sample_webhook_payload:43:(self)>Dict[str, Any]::Sample SES webhook notification payload","test_webhook_signature_validation:93:async (self, webhook_processor, sample_webhook_payload)::Test that webhook signatures are validated using HMAC-SHA256","test_process_inbound_email:122:async (self, webhook_processor, sample_webhook_payload)::Test processing of inbound email from webhook","test_extract_email_attachments:138:async (self, webhook_processor)::Test extraction of attachments from email","test_attachment_size_validation:171:async (self, webhook_processor)::Test that attachments over 25MB are rejected","test_attachment_type_validation:183:async (self, webhook_processor)::Test that only allowed file types are accepted","test_webhook_retry_mechanism:198:async (self, webhook_processor)::Test webhook retry mechanism for transient failures","test_webhook_idempotency:218:async (self, webhook_processor)::Test that webhooks are processed idempotently"]],"TestObjectStorageWithEncryption":["239",["storage_client:243:(self)::Get object storage client (will fail - not implemented)","encryption_key:249:(self)>bytes::Generate test encryption key","test_upload_with_customer_encryption:254:async (self, storage_client, encryption_key)::Test file upload with customer-managed encryption (CMK)","test_download_with_decryption:279:async (self, storage_client, encryption_key)::Test file download with customer-managed decryption","test_encryption_key_rotation:293:async (self, storage_client)::Test encryption key rotation without data loss","test_multipart_upload_large_files:327:async (self, storage_client, encryption_key)::Test multipart upload for files larger than 5MB","test_server_side_encryption_with_kms:346:async (self, storage_client)::Test server-side encryption with KMS"]],"TestDKIMDMARCValidation":["362",["email_validator:366:(self)::Get email validation service (will fail - not implemented)","test_dkim_signature_validation:372:async (self, email_validator)::Test DKIM signature validation","test_spf_record_validation:396:async (self, email_validator)::Test SPF record validation","test_dmarc_policy_enforcement:412:async (self, email_validator)::Test DMARC policy enforcement","test_arc_authentication_chain:427:async (self, email_validator)::Test ARC (Authenticated Received Chain) for forwarded emails","test_bimi_brand_indicator:442:async (self, email_validator)::Test BIMI (Brand Indicators for Message Identification) validation"]],"TestEUComplianceAndDataResidency":["454",["compliance_validator:458:(self)::Get compliance validation service (will fail - not implemented)","test_data_residency_verification:464:async (self, compliance_validator)::Test that data never leaves EU/EES regions","test_cross_region_replication_compliance:482:async (self, compliance_validator)::Test that cross-region replication stays within EU","test_data_retention_policy:500:async (self, compliance_validator)::Test 5-year retention policy enforcement","test_gdpr_data_portability:511:async (self, compliance_validator)::Test GDPR data portability requirements","test_right_to_erasure:527:async (self, compliance_validator)::Test GDPR right to erasure implementation"]],"TestSignedURLGeneration":["543",["url_generator:547:(self)::Get URL generation service (will fail - not implemented)","test_generate_presigned_upload_url:553:async (self, url_generator)::Test generation of presigned upload URLs","test_generate_presigned_download_url:570:async (self, url_generator)::Test generation of presigned download URLs","test_url_expiration_enforcement:584:async (self, url_generator)::Test that URLs expire correctly","test_signed_url_ip_restriction:601:async (self, url_generator)::Test IP-restricted signed URLs"]],"TestStorageLifecycleAndRetention":["616",["lifecycle_manager:620:(self)::Get lifecycle management service (will fail - not implemented)","test_lifecycle_transition_to_glacier:626:async (self, lifecycle_manager)::Test automatic transition to Glacier after specified period","test_intelligent_tiering_configuration:660:async (self, lifecycle_manager)::Test S3 Intelligent-Tiering for cost optimization","test_object_lock_for_compliance:675:async (self, lifecycle_manager)::Test S3 Object Lock for compliance mode","test_versioning_configuration:689:async (self, lifecycle_manager)::Test versioning configuration for data recovery"]],"TestServiceIsolation":["702",["network_validator:706:(self)::Get network validation service (will fail - not implemented)","test_inbound_service_isolation:712:async (self, network_validator)::Test that inbound email service is isolated from outbound","test_vpc_endpoint_configuration:728:async (self, network_validator)::Test VPC endpoints for AWS service access","test_network_acl_rules:739:async (self, network_validator)::Test Network ACL rules for service isolation","test_security_group_egress_restrictions:750:async (self, network_validator)::Test that egress is restricted to EU regions only"]],"TestFailoverAndDisasterRecovery":["761",["dr_manager:765:(self)::Get disaster recovery manager (will fail - not implemented)","test_multi_region_failover:771:async (self, dr_manager)::Test automatic failover between EU regions","test_backup_restoration:786:async (self, dr_manager)::Test backup restoration process","test_cross_region_data_replication:804:async (self, dr_manager)::Test real-time cross-region data replication","test_health_check_monitoring:816:async (self, dr_manager)::Test health check monitoring across regions","test_automated_backup_verification:826:async (self, dr_manager)::Test automated backup verification process","test_disaster_recovery_drill:836:async (self, dr_manager)::Test complete disaster recovery drill"]],"TestEmailQuotaAndRateLimiting":["855",["quota_manager:859:(self)::Get quota management service (will fail - not implemented)","test_ses_sending_quota_monitoring:865:async (self, quota_manager)::Test SES sending quota monitoring","test_rate_limiting_per_supplier:875:async (self, quota_manager)::Test rate limiting per supplier to prevent abuse","test_bounce_and_complaint_handling:899:async (self, quota_manager)::Test automatic handling of bounces and complaints"]]}],"t/infrastructure/test_eu_ees_compliance.py":["p",{"TestEUEESDataResidencyCompliance":["17",["aws_regions:24:(self)>List[str]::List of approved EU AWS regions","gdpr_requirements:29:(self)>Dict[str, Any]::GDPR compliance requirements","test_all_resources_in_eu_regions:42:(self, aws_regions:List[str])::Test that all AWS resources are deployed in EU regions only","test_data_sovereignty_enforcement:73:(self)::Test that data sovereignty controls are in place","test_gdpr_data_retention_policies:109:(self, gdpr_requirements:Dict[str, Any])::Test that data retention policies comply with GDPR","test_personal_data_identification:131:(self)::Test that systems can identify and track personal data","test_data_processing_agreements:148:(self):_get_dpa_registry:Test that data processing agreements are in place","test_cross_border_data_transfer_controls:170:(self)::Test that cross-border data transfers are controlled","test_data_localization_database:192:(self)::Test that databases enforce data localization","test_swedish_data_protection_authority_requirements:222:(self):_get_api_endpoint:Test compliance with Swedish Data Protection Authority (IMY) requirements","test_data_minimization_principle:245:(self):_get_database_schema,_get_pii_justification:Test that data minimization principle is enforced","test_consent_management_system:267:(self, gdpr_requirements:Dict[str, Any]):_get_api_endpoint:Test that consent management system is implemented","test_right_to_erasure_implementation:294:(self):_get_api_endpoint:Test that right to erasure (right to be forgotten) is implemented","test_data_portability_compliance:320:(self):_get_api_endpoint:Test that data portability requirements are met","test_automated_data_breach_detection:346:(self, gdpr_requirements:Dict[str, Any]):_get_monitoring_endpoint:Test that automated data breach detection is in place","test_privacy_by_design_implementation:382:(self):_get_privacy_impact_assessment,_get_system_configuration:Test that privacy by design principles are implemented","test_lawful_basis_documentation:405:(self):_get_processing_registry:Test that lawful basis for processing is documented","_get_dpa_registry:438:(self)>Dict[str, Any]::Get Data Processing Agreement registry","_get_api_endpoint:442:(self)>str::Get API endpoint URL","_get_database_schema:446:(self)>Dict[str, List[str]]::Get database schema information","_get_pii_justification:450:(self, table:str)>Dict[str, str]::Get PII processing justification for table","_get_monitoring_endpoint:454:(self)>str::Get monitoring system endpoint","_get_system_configuration:458:(self)>Dict[str, Any]::Get system configuration","_get_privacy_impact_assessment:462:(self)>Dict[str, Any]::Get Privacy Impact Assessment","_get_processing_registry:466:(self)>Dict[str, Any]::Get processing activities registry"]]}],"t/infrastructure/test_network_segmentation.py":["p",{"NetworkSegment":["27",[]],"TestNetworkSegmentation":["36",["network_architecture:43:(self)>Dict[str, NetworkSegment]::Define expected network architecture","test_vpc_configuration:97:(self)::Test VPC configuration and isolation","test_subnet_segmentation:140:(self, network_architecture:Dict[str, NetworkSegment])::Test that subnets are properly segmented","test_network_acls:180:(self, network_architecture:Dict[str, NetworkSegment])::Test Network ACL configurations","test_security_group_isolation:224:(self)::Test that security groups enforce proper isolation","test_route_table_configuration:253:(self, network_architecture:Dict[str, NetworkSegment])::Test route table configurations for proper traffic flow","test_nat_gateway_configuration:301:(self)::Test NAT Gateway configuration for high availability","test_vpc_peering_configuration:329:(self)::Test VPC peering connections if they exist","test_flow_logs_configuration:356:(self)::Test VPC Flow Logs are enabled and configured","test_firewall_rule_consistency:401:(self)::Test that firewall rules are consistent across resources","test_network_isolation_between_environments:454:(self)::Test that different environments are properly isolated","test_dns_firewall_configuration:491:(self)::Test Route 53 Resolver DNS Firewall configuration","test_transit_gateway_configuration:528:(self)::Test Transit Gateway configuration if used","test_endpoint_service_configuration:565:(self)::Test VPC Endpoint Service configuration for private connectivity","test_network_load_balancer_configuration:605:(self)::Test Network Load Balancer security configuration"]]}],"t/infrastructure/test_secrets_management.py":["p",{"TestSecretsManagement":["23",["rotation_schedule:30:(self)>Dict[str, int]::Rotation schedule for different secret types (in days)","secret_requirements:44:(self)>Dict[str, Any]::Requirements for different secret types","test_aws_secrets_manager_configuration:68:(self)::Test AWS Secrets Manager configuration and policies","test_parameter_store_secrets:142:(self)::Test AWS Systems Manager Parameter Store for secrets","test_kubernetes_secrets:199:(self):_get_kubernetes_client,_verify_secret_rbac:Test Kubernetes secrets management","test_vault_integration:246:(self)::Test HashiCorp Vault integration if used","test_secret_rotation_lambdas:301:(self):_verify_rotation_lambda_permissions:Test Lambda functions for secret rotation","test_secret_complexity_requirements:358:(self, secret_requirements:Dict[str, Any]):_determine_secret_type,_validate_secret_complexity:Test that generated secrets meet complexity requirements","test_secret_access_patterns:399:(self):_is_trusted_ip:Test that secrets are accessed securely","test_certificate_management:451:(self)::Test TLS certificate management and rotation","test_ssh_key_management:498:(self)::Test SSH key management and rotation","test_api_key_rotation:547:(self, rotation_schedule:Dict[str, int])::Test API key rotation and management","test_database_credential_rotation:585:(self, rotation_schedule:Dict[str, int])::Test database credential rotation","_get_kubernetes_client:622:(self)::Get Kubernetes client (mocked for testing)","_verify_secret_rbac:626:(self, client, namespace, secret_name)::Verify RBAC for Kubernetes secret","_verify_rotation_lambda_permissions:631:(self, role_arn, function_name)::Verify IAM permissions for rotation Lambda","_determine_secret_type:652:(self, secret_name:str)>str::Determine secret type from name","_validate_secret_complexity:662:(self, value:str, requirements:Dict, name:str):_calculate_entropy:Validate secret meets complexity requirements","_calculate_entropy:690:(self, value:str)>float::Calculate Shannon entropy of a string","_is_trusted_ip:708:(self, ip:str)>bool::Check if IP is from trusted range"]]}],"t/infrastructure/test_security_configuration.py":["p",{"TestSecurityConfiguration":["23",["encryption_standards:30:(self)>Dict[str, Any]::Required encryption standards","test_s3_encryption_at_rest:58:(self)::Test that all S3 buckets have encryption at rest enabled","test_rds_encryption_at_rest:104:(self)::Test that all RDS instances have encryption at rest enabled","test_ebs_volume_encryption:124:(self)::Test that all EBS volumes are encrypted","test_kms_key_configuration:149:(self)::Test KMS key configuration and rotation","test_tls_configuration:191:(self, encryption_standards:Dict[str, Any]):_get_application_endpoints:Test TLS configuration for all endpoints","test_secrets_manager_configuration:234:(self)::Test AWS Secrets Manager configuration","test_parameter_store_encryption:267:(self)::Test SSM Parameter Store encryption","test_network_encryption_in_transit:285:(self)::Test that all network traffic uses encryption in transit","test_certificate_validation:324:(self)::Test certificate validation and management","test_waf_configuration:354:(self)::Test Web Application Firewall configuration","test_security_group_rules:401:(self)::Test security group configurations","test_iam_password_policy:445:(self)::Test IAM password policy configuration","test_cloudtrail_encryption:469:(self)::Test CloudTrail encryption configuration","test_guardduty_configuration:493:(self)::Test GuardDuty threat detection configuration","test_encryption_key_hierarchy:523:(self, encryption_standards:Dict[str, Any])::Test encryption key hierarchy and management","_get_application_endpoints:558:(self)>List[Dict[str, Any]]::Get list of application endpoints to test"]]}],"t/infrastructure/test_storage_encryption.py":["p",{"TestCustomerManagedEncryption":["28",["encryption_manager:32:(self)::Get encryption management service (will fail - not implemented)","master_key:38:(self)>bytes::Generate master encryption key","test_aes_256_gcm_encryption:43:async (self, encryption_manager)::Test AES-256-GCM encryption for data at rest","test_envelope_encryption:74:async (self, encryption_manager, master_key)::Test envelope encryption with data key and master key","test_key_derivation_function:92:async (self, encryption_manager)::Test PBKDF2 for deriving encryption keys from passwords","test_encryption_context_binding:117:async (self, encryption_manager)::Test encryption context for additional authenticated data"]],"TestKeyManagementService":["146",["kms_client:150:(self)::Get KMS client service (will fail - not implemented)","test_create_customer_master_key:156:async (self, kms_client)::Test creation of customer master key (CMK) in EU region","test_automatic_key_rotation:187:async (self, kms_client)::Test automatic annual key rotation","test_generate_data_key:206:async (self, kms_client)::Test generation of data encryption keys","test_key_alias_management:221:async (self, kms_client)::Test KMS key alias creation and management","test_grant_management:236:async (self, kms_client)::Test KMS grant creation for temporary access"]],"TestEncryptionInTransit":["250",["tls_validator:254:(self)::Get TLS validation service (will fail - not implemented)","test_tls_13_enforcement:260:async (self, tls_validator)::Test that all connections use TLS 1.3","test_certificate_validation:278:async (self, tls_validator)::Test SSL/TLS certificate validation","test_perfect_forward_secrecy:291:async (self, tls_validator)::Test that connections support Perfect Forward Secrecy","test_mutual_tls_authentication:301:async (self, tls_validator)::Test mutual TLS (mTLS) for service-to-service communication"]],"TestKeyRotationAndManagement":["317",["key_manager:321:(self)::Get key management service (will fail - not implemented)","test_automated_key_rotation_schedule:327:async (self, key_manager)::Test automated key rotation on schedule","test_zero_downtime_key_rotation:343:async (self, key_manager)::Test key rotation without service interruption","test_key_version_management:358:async (self, key_manager)::Test management of multiple key versions","test_emergency_key_rotation:372:async (self, key_manager)::Test emergency key rotation for compromised keys","test_key_escrow_and_recovery:388:async (self, key_manager)::Test key escrow for disaster recovery"]],"TestEncryptionCompliance":["400",["compliance_auditor:404:(self)::Get compliance audit service (will fail - not implemented)","test_fips_140_2_compliance:410:async (self, compliance_auditor)::Test FIPS 140-2 Level 2 compliance for cryptographic modules","test_encryption_audit_trail:422:async (self, compliance_auditor)::Test comprehensive audit trail for all encryption operations","test_crypto_agility:438:async (self, compliance_auditor)::Test ability to quickly change encryption algorithms","test_quantum_resistant_preparation:451:async (self, compliance_auditor)::Test readiness for post-quantum cryptography"]],"TestSecureKeyStorage":["461",["hsm_client:465:(self)::Get Hardware Security Module client (will fail - not implemented)","test_hsm_key_generation:471:async (self, hsm_client)::Test key generation in Hardware Security Module","test_key_wrapping_unwrapping:485:async (self, hsm_client)::Test key wrapping for secure key export/import","test_threshold_cryptography:507:async (self, hsm_client)::Test threshold cryptography for key recovery"]],"TestEncryptionPerformance":["529",["performance_monitor:533:(self)::Get performance monitoring service (will fail - not implemented)","test_encryption_throughput:539:async (self, performance_monitor)::Test encryption throughput meets requirements","test_hardware_acceleration:552:async (self, performance_monitor)::Test hardware acceleration for encryption operations","test_batch_encryption_optimization:561:async (self, performance_monitor)::Test batch encryption for multiple files"]]}],"t/infrastructure/test_terraform_validation.py":["p",{"TestTerraformInfrastructureValidation":["17",["terraform_root:24:(self)>Path::Path to Terraform configuration root","terragrunt_root:29:(self)>Path::Path to Terragrunt configuration root","test_terraform_modules_exist:33:(self, terraform_root:Path)::Test that all required Terraform modules are present","test_terraform_backend_configuration:53:(self, terraform_root:Path)::Test that Terraform backend is configured for EU region","test_terraform_providers_configuration:71:(self, terraform_root:Path)::Test that all providers are configured for EU regions","test_terraform_validation_passes:93:(self, terraform_root:Path)::Test that terraform validate passes for all modules","test_terraform_fmt_compliance:108:(self, terraform_root:Path)::Test that all Terraform files are properly formatted","test_terragrunt_configuration_hierarchy:118:(self, terragrunt_root:Path)::Test Terragrunt configuration hierarchy for multi-environment setup","test_terraform_security_scanning:137:(self, terraform_root:Path)::Test that Terraform configurations pass security scanning","test_terraform_cost_estimation:153:(self, terraform_root:Path)::Test that infrastructure costs are within budget constraints","test_terraform_dependency_graph:177:(self, terraform_root:Path)::Test that resource dependencies are properly defined","test_terraform_state_encryption:196:(self, terraform_root:Path)::Test that Terraform state is encrypted and locked","test_terraform_module_versioning:210:(self, terraform_root:Path)::Test that all modules use semantic versioning","test_terraform_output_validation:226:(self, terraform_root:Path)::Test that required outputs are defined","test_terraform_remote_state_references:247:(self, terraform_root:Path)::Test that remote state data sources are properly configured","test_terragrunt_dependency_resolution:268:(self, terragrunt_root:Path)::Test that Terragrunt dependencies are properly resolved","test_terraform_compliance_policies:290:(self, terraform_root:Path)::Test that Terraform configurations comply with organizational policies"]]}],"t/infrastructure/test_webhook_processing.py":["p",{"TestWebhookSecurity":["25",["webhook_validator:29:(self)::Get webhook validation service (will fail - not implemented)","test_hmac_signature_validation:35:async (self, webhook_validator)::Test HMAC-SHA256 signature validation for webhooks","test_timestamp_validation:70:async (self, webhook_validator)::Test webhook timestamp validation to prevent replay attacks","test_ip_whitelist_validation:98:async (self, webhook_validator)::Test IP whitelist validation for webhook sources","test_webhook_authentication_token:122:async (self, webhook_validator)::Test bearer token authentication for webhooks"]],"TestWebhookIdempotency":["141",["idempotency_manager:145:(self)::Get idempotency management service (will fail - not implemented)","redis_client:151:async (self)::Get Redis client for idempotency storage","test_idempotency_key_generation:159:async (self, idempotency_manager)::Test generation of idempotency keys for webhooks","test_duplicate_webhook_detection:177:async (self, idempotency_manager)::Test detection and handling of duplicate webhooks","test_idempotency_key_expiration:200:async (self, idempotency_manager)::Test automatic expiration of idempotency keys","test_concurrent_webhook_processing:224:async (self, idempotency_manager):process_webhook:Test handling of concurrent duplicate webhooks","process_webhook:229:async ()::"]],"TestWebhookRetryMechanism":["250",["retry_manager:254:(self)::Get retry management service (will fail - not implemented)","test_exponential_backoff_retry:260:async (self, retry_manager):failing_processor:Test exponential backoff for webhook retries","failing_processor:264:async ()::","test_circuit_breaker_pattern:288:async (self, retry_manager)::Test circuit breaker for failing webhook endpoints","test_retry_with_jitter:311:async (self, retry_manager):record_retry:Test retry with jitter to prevent thundering herd","record_retry:315:async ()::","test_dead_letter_queue:339:async (self, retry_manager):always_fails:Test dead letter queue for permanently failed webhooks","always_fails:341:async ()::"]],"TestWebhookMonitoring":["356",["monitoring_service:360:(self)::Get monitoring service (will fail - not implemented)","test_webhook_metrics_collection:366:async (self, monitoring_service)::Test collection of webhook processing metrics","test_rate_monitoring_and_alerting:387:async (self, monitoring_service)::Test webhook rate monitoring and alerting","test_error_rate_alerting:409:async (self, monitoring_service)::Test alerting on high error rates","test_webhook_latency_monitoring:430:async (self, monitoring_service)::Test monitoring of webhook processing latency","test_webhook_tracing:451:async (self, monitoring_service)::Test distributed tracing for webhook processing"]],"TestWebhookEventProcessing":["487",["event_processor:491:(self)::Get event processor service (will fail - not implemented)","test_email_received_event:497:async (self, event_processor)::Test processing of email received events","test_bounce_notification_event:519:async (self, event_processor)::Test processing of bounce notification events","test_complaint_notification_event:541:async (self, event_processor)::Test processing of complaint notification events","test_delivery_notification_event:563:async (self, event_processor)::Test processing of delivery notification events"]],"TestWebhookDataValidation":["582",["data_validator:586:(self)::Get data validation service (will fail - not implemented)","test_schema_validation:592:async (self, data_validator)::Test webhook payload schema validation","test_input_sanitization:623:async (self, data_validator)::Test sanitization of webhook input data","test_size_validation:640:async (self, data_validator)::Test webhook payload size validation","test_content_type_validation:659:async (self, data_validator)::Test validation of webhook content types"]]}],"t/test_agent_guardrails_safety.py":["p",{"TestPIIDetector":["43",["setUp:46:(self)::","test_detect_swedish_personnummer:53:(self)::Test detection of Swedish personnummer in various formats","test_detect_english_pii:86:(self)::Test detection of English PII patterns","test_pii_confidence_scoring:114:(self)::Test confidence scoring for PII detection accuracy","test_batch_pii_scanning:142:(self)::Test batch scanning of multiple texts for performance","test_pii_redaction_suggestions:161:(self)::Test automatic PII redaction suggestions"]],"TestActionTracker":["174",["setUp:177:(self)::","test_trace_llm_interaction:184:(self)::Test tracing of complete LLM interactions","test_trace_write_actions:218:(self)::Test special tracking for write/modify actions","test_trace_determinism_validation:241:(self)::Test validation that scenario runs produce deterministic results","test_trace_context_retention:270:(self)::Test that traces retain context for regulatory compliance"]],"TestPolicyValidator":["296",["setUp:299:(self)::","test_sql_injection_prevention:306:(self)::Test detection and blocking of SQL injection attempts","test_read_only_enforcement:323:(self)::Test enforcement of read-only operations for agent queries","test_tool_permission_validation:351:(self)::Test validation of tool call permissions based on user role","test_data_access_boundaries:391:(self)::Test enforcement of data access boundaries by region/supplier"]],"TestConfirmationWorkflow":["420",["setUp:423:(self)::","test_propose_phase:430:(self)::Test creation of proposal for user confirmation","test_apply_phase_with_confirmation:453:(self)::Test application of confirmed proposal","test_proposal_timeout:479:(self)::Test that proposals expire after timeout period","test_batch_proposal_handling:504:(self)::Test handling of batch operations requiring confirmation"]],"TestSecurityEnforcer":["522",["setUp:525:(self)::","test_rate_limiting:533:(self)::Test rate limiting to prevent abuse","test_concurrent_session_limiting:547:(self)::Test concurrent session limits","test_suspicious_pattern_detection:567:(self)::Test detection of suspicious access patterns","test_privilege_escalation_detection:583:(self)::Test detection of privilege escalation attempts"]],"TestAgentAuditLogger":["610",["setUp:613:(self)::","test_log_pii_detection_event:621:async (self)::Test logging of PII detection events","test_log_policy_violation:640:async (self)::Test logging of policy violations","test_audit_trail_integrity:660:async (self)::Test that audit trails maintain cryptographic integrity","test_audit_search_and_compliance_reporting:686:async (self)::Test audit log searching and compliance reporting capabilities"]],"TestAgentGuardrailsIntegration":["714",["setUp:717:(self)::","test_complete_agent_interaction_pipeline:726:async (self)::Test complete pipeline: input \u2192 PII scan \u2192 policy check \u2192 action \u2192 audit","test_blocking_malicious_request:753:async (self)::Test that malicious requests are blocked at multiple levels","test_confirmation_workflow_integration:776:async (self)::Test integration with confirmation workflow for write actions","test_offline_evaluation_harness:805:(self)::Test offline evaluation capabilities for safety accuracy"]]}],"t/test_claude_code_hooks.py":["p",{"TestFileValidationHook":["27",["setUp:30:(self)::","tearDown:34:(self)::","test_pre_read_validation_hook:38:(self)::Test hook that validates files before Claude Code reads them","test_validate_swedish_content:66:(self)::Test validation of Swedish characters in file content","test_validate_personnummer_compliance:83:(self)::Test GDPR compliance check for personnummer","test_pre_write_validation_hook:100:(self)::Test hook that validates data before Claude Code writes files","test_file_size_validation:125:(self)::Test file size validation limits","test_batch_file_validation:143:(self)::Test validation of multiple files in batch","test_validation_caching:156:(self)::Test that validation results are cached for performance"]],"TestMCPToolIntegration":["173",["setUp:176:(self)::","test_register_validation_tool:179:(self)::Test registration of validation as MCP tool","test_execute_mcp_validation_tool:196:(self)::Test execution of validation through MCP tool interface","test_mcp_tool_error_handling:213:(self):failing_handler:Test error handling in MCP tool execution","failing_handler:216:(params)::","test_mcp_tool_async_execution:228:(self):async_validator:Test async execution of MCP tools","async_validator:230:async (params)::","test_mcp_resource_access:249:(self)::Test accessing MCP resources for validation rules"]],"TestClaudeCodeHookManager":["268",["setUp:271:(self)::","test_register_hooks:274:(self)::Test registration of multiple hook types","test_execute_hook_chain:301:(self)::Test execution of hook chain in order","test_hook_interruption_on_failure:331:(self)::Test that hook chain stops on validation failure","test_hook_context_mutation:356:(self):add_metadata,check_metadata:Test that hooks can mutate context for subsequent hooks","add_metadata:358:(ctx)::","check_metadata:362:(ctx)::","test_conditional_hook_execution:375:(self):csv_only_hook,xlsx_only_hook:Test conditional execution based on context","xlsx_only_hook:379:(ctx)::","csv_only_hook:384:(ctx)::","test_hook_metrics_collection:402:(self):slow_hook:Test collection of hook execution metrics","slow_hook:406:(ctx)::","test_hook_exception_handling:422:(self):error_handler,failing_hook:Test proper exception handling in hooks","failing_hook:424:(ctx)::","error_handler:427:(error, context)::","test_hook_configuration_validation:443:(self)::Test validation of hook configuration"]],"TestClaudeCodeIntegrationScenarios":["457",["test_full_validation_pipeline:460:(self)::Test complete validation pipeline with Claude Code","test_async_hook_pipeline:504:(self):async_validation:Test async hook execution pipeline","async_validation:508:async (ctx)::"]]}],"t/test_cross_database_consistency.py":["p",{"TestDataConsistency":["26",["pg_connection:30:async (self)::PostgreSQL connection","duck_connection:44:(self)::DuckDB connection with PostgreSQL scanner","test_row_count_consistency:63:async (self, pg_connection, duck_connection)::Test that row counts match between databases","test_aggregate_consistency:80:async (self, pg_connection, duck_connection)::Test that aggregates match between databases","test_data_freshness_sync:100:async (self, pg_connection, duck_connection)::Test that data freshness is maintained across databases","test_transaction_atomicity:131:async (self, pg_connection, duck_connection)::Test that transactions maintain atomicity across databases","test_schema_evolution_sync:175:async (self, pg_connection, duck_connection)::Test that schema changes are reflected in both databases","test_concurrent_write_consistency:196:async (self, pg_connection, duck_connection):write_task:Test consistency under concurrent writes","write_task:200:async (conn, supplier_id, count)::"]],"TestDataRetention":["231",["test_retention_policy_configuration:234:async (self, pg_connection)::Test that retention policies are configured","test_automated_data_deletion:268:async (self, pg_connection)::Test that old data is automatically deleted per policy","test_right_to_erasure:304:async (self, pg_connection)::Test GDPR right to erasure (right to be forgotten)","test_audit_trail_retention:333:async (self, pg_connection)::Test that audit trails are retained appropriately"]],"TestDataEncryption":["377",["encryption_key:381:(self)::Generate test encryption key","test_encryption_at_rest:386:async (self, pg_connection)::Test that sensitive data is encrypted at rest","test_encryption_in_transit:410:async (self, pg_connection)::Test that connections use encryption","test_field_level_encryption:437:async (self, pg_connection, encryption_key)::Test field-level encryption for sensitive data","test_key_rotation:465:async (self, pg_connection)::Test encryption key rotation capability"]],"TestComplianceValidation":["498",["test_gdpr_compliance_checklist:501:async (self, pg_connection)::Test GDPR compliance requirements","test_data_locality_compliance:547:async (self, pg_connection)::Test that data stays within EU/EES borders","test_data_breach_notification:579:async (self, pg_connection)::Test data breach notification system","test_data_processing_records:616:async (self, pg_connection)::Test records of processing activities (GDPR Article 30)"]]}],"t/test_database_schema.py":["p",{"TestDatabaseSchemaCreation":["30",["db_engine:34:async (self)::Create test database engine with pgvector extension","db_session:44:async (self, db_engine)::Create async database session","test_pgvector_extension_enabled:52:async (self, db_session)::Test that pgvector extension is properly installed and configured","test_load_table_schema:64:async (self, db_session)::Test load table with all required columns and constraints","test_row_table_schema:94:async (self, db_session)::Test row table for storing parsed invoice rows","test_finding_table_with_embeddings:114:async (self, db_session)::Test finding table with vector embeddings for RAG","test_insight_table_with_human_friendly_id:139:async (self, db_session)::Test insight table with INS-YYYY-MM-NNN format IDs","test_scenario_table_with_human_friendly_id:168:async (self, db_session)::Test scenario table with SCN-YYYY-MM-NNN format IDs","test_comment_table_schema:187:async (self, db_session)::Test comment table for user annotations","test_checklist_run_table:205:async (self, db_session)::Test checklist_run table for validation tracking","test_supplier_month_composite_index:224:async (self, db_session)::Test composite index on supplier_id and month for fast queries","test_vector_similarity_index:240:async (self, db_session)::Test vector similarity search indexes for RAG queries","test_swedish_text_columns:257:async (self, db_session)::Test that text columns support Swedish characters (\u00e5\u00e4\u00f6)","test_personnummer_validation_constraint:279:async (self, db_session)::Test Swedish personnummer pattern validation if stored"]],"TestDatabaseMigrations":["295",["alembic_config:299:(self)::Get Alembic configuration","test_migration_scripts_exist:305:(self, alembic_config)::Test that migration scripts are properly structured","test_migration_up_down:322:async (self, db_session, alembic_config)::Test migration upgrade and downgrade","test_migration_data_preservation:357:async (self, db_session, alembic_config)::Test that migrations preserve existing data","test_migration_rollback_safety:378:(self, alembic_config)::Test that all migrations can be safely rolled back"]],"TestDatabaseConstraints":["395",["test_foreign_key_constraints:398:async (self, db_session)::Test all foreign key relationships are properly defined","test_cascade_delete_rules:428:async (self, db_session)::Test cascade delete rules for data consistency","test_check_constraints:447:async (self, db_session)::Test check constraints for data validation","test_not_null_constraints:469:async (self, db_session)::Test NOT NULL constraints on critical columns"]]}],"t/test_dbt_models.py":["p",{"TestDbtModelConfiguration":["25",["dbt_project_dir:29:(self)::Get dbt project directory","dbt_runner:35:(self, dbt_project_dir)::Create dbt runner instance","test_dbt_project_yml_exists:41:(self, dbt_project_dir)::Test that dbt_project.yml is properly configured","test_profiles_yml_configuration:66:(self, dbt_project_dir)::Test that profiles.yml has correct database connections","test_dbt_source_definitions:93:(self, dbt_project_dir)::Test that source tables are properly defined"]],"TestDbtModels":["122",["dbt_runner:126:(self)::Create dbt runner for testing","test_staging_models:131:(self, dbt_runner, dbt_project_dir)::Test staging layer models","test_intermediate_models:156:(self, dbt_project_dir)::Test intermediate transformation models","test_mart_models:180:(self, dbt_project_dir)::Test data mart models for analytics","test_incremental_models:208:(self, dbt_project_dir)::Test incremental model configuration","test_model_documentation:229:(self, dbt_project_dir)::Test that models have proper documentation"]],"TestDbtTests":["254",["test_schema_tests:257:(self, dbt_project_dir)::Test that schema tests are defined","test_custom_tests:282:(self, dbt_project_dir)::Test custom data quality tests","test_freshness_checks:305:(self, dbt_project_dir)::Test source data freshness configuration"]],"TestDbtExecution":["328",["dbt_runner:332:(self)::Create dbt runner","test_dbt_deps:336:(self, dbt_runner)::Test dbt package dependencies","test_dbt_compile:353:(self, dbt_runner)::Test that all models compile successfully","test_dbt_run:371:(self, dbt_runner)::Test that models run successfully","test_dbt_test_execution:387:(self, dbt_runner)::Test that data quality tests pass","test_dbt_snapshot:401:(self, dbt_runner, dbt_project_dir)::Test snapshot models for slowly changing dimensions","test_model_performance:421:(self, dbt_runner)::Test that models execute within performance thresholds","test_incremental_run_performance:446:(self, dbt_runner)::Test that incremental models are faster on subsequent runs"]],"TestDbtDocumentation":["468",["test_generate_docs:471:(self, dbt_runner)::Test documentation generation","test_model_lineage:489:(self, dbt_runner)::Test that model lineage is properly documented"]],"TestDbtMacros":["517",["test_custom_macros_exist:520:(self, dbt_project_dir)::Test that custom macros are defined","test_macro_usage_in_models:542:(self, dbt_project_dir)::Test that custom macros are used in models"]]}],"t/test_duckdb_analytics.py":["p",{"TestDuckDBAnalytics":["24",["duckdb_conn:28:(self)::Create DuckDB connection with PostgreSQL extension","pg_connection:53:async (self)::PostgreSQL connection for data setup","setup_test_data:65:async (self, pg_connection)::Setup test data in PostgreSQL for analytics","test_duckdb_postgres_connection:92:(self, duckdb_conn)::Test that DuckDB can connect to PostgreSQL","test_analytics_view_creation:105:(self, duckdb_conn)::Test creation of analytical views in DuckDB","test_monthly_aggregation_performance:131:async (self, duckdb_conn, pg_connection):setup_test_data:Test performance of monthly spending aggregation","test_category_analysis_performance:175:(self, duckdb_conn)::Test performance of category-based analysis","test_anomaly_detection_query:215:(self, duckdb_conn)::Test statistical anomaly detection queries","test_time_series_analysis:271:(self, duckdb_conn)::Test time series analysis capabilities","test_pivot_table_generation:325:(self, duckdb_conn)::Test pivot table generation for reporting","test_window_functions_performance:353:(self, duckdb_conn)::Test complex window functions performance","test_parquet_export_performance:392:(self, duckdb_conn)::Test export to Parquet for data lake integration"]],"TestDuckDBPostgreSQLSync":["429",["test_real_time_sync:432:async (self, duckdb_conn, pg_connection)::Test near real-time sync from PostgreSQL to DuckDB","test_materialized_view_refresh:455:(self, duckdb_conn)::Test materialized view refresh strategy","test_transaction_consistency:484:async (self, duckdb_conn, pg_connection)::Test transactional consistency between databases"]],"TestAnalyticsOptimization":["518",["test_query_plan_optimization:521:(self, duckdb_conn)::Test that queries use optimal execution plans","test_partition_pruning:544:(self, duckdb_conn)::Test partition pruning for time-based queries","test_columnar_storage_benefits:559:(self, duckdb_conn)::Test columnar storage performance benefits"]]}],"t/test_eu_format_handler.py":["p",{"TestEUDateParser":["22",["setUp:25:(self)::","test_parse_swedish_date_formats:28:(self)::Test parsing of common Swedish date formats","test_parse_swedish_month_names:45:(self)::Test parsing with Swedish month names","test_parse_ambiguous_dates:67:(self)::Test handling of ambiguous date formats","test_parse_two_digit_years:83:(self)::Test handling of two-digit years","test_parse_datetime_with_time:96:(self)::Test parsing dates with time components","test_parse_invalid_dates:109:(self)::Test that invalid dates raise appropriate errors","test_batch_parse_dates:124:(self)::Test batch parsing of multiple date formats","test_normalize_to_iso:141:(self)::Test normalization to ISO 8601 format","test_detect_date_format:155:(self)::Test automatic date format detection"]],"TestDecimalConverter":["171",["setUp:174:(self)::","test_convert_swedish_decimal_comma:177:(self)::Test conversion of Swedish decimal comma to dot","test_convert_us_decimal_dot:193:(self)::Test handling of US/UK decimal dot format","test_auto_detect_decimal_format:207:(self)::Test automatic detection of decimal format","test_convert_percentages:222:(self)::Test conversion of percentage values","test_convert_currency_amounts:237:(self)::Test conversion of currency amounts","test_batch_conversion:252:(self)::Test batch conversion of mixed formats","test_format_output:271:(self)::Test formatting decimals back to Swedish format","test_preserve_precision:285:(self)::Test that precision is preserved during conversion","test_handle_scientific_notation:300:(self)::Test handling of scientific notation","test_invalid_format_handling:313:(self)::Test handling of invalid decimal formats"]],"TestFormatDetector":["329",["setUp:332:(self)::","test_detect_mixed_content:335:(self)::Test detection in mixed content (dates, decimals, text)","test_detect_column_types_in_data:351:(self)::Test type detection for data columns","test_confidence_scoring:369:(self)::Test confidence scoring for format detection"]],"TestFormatConverterPerformance":["386",["test_large_dataset_conversion:389:(self)::Test conversion performance on large datasets"]]}],"t/test_human_friendly_ids.py":["p",{"TestHumanFriendlyIDGeneration":["23",["db_connection:27:async (self)::Create database connection for testing","id_generator:41:async (self, db_connection)::Get ID generator service","test_insight_id_format:49:async (self, id_generator)::Test that insight IDs follow INS-YYYY-MM-NNN format","test_scenario_id_format:73:async (self, id_generator)::Test that scenario IDs follow SCN-YYYY-MM-NNN format","test_id_sequence_increment:97:async (self, id_generator)::Test that IDs increment sequentially within the same month","test_id_uniqueness:114:async (self, id_generator)::Test that generated IDs are always unique","test_concurrent_id_generation:127:async (self, id_generator):generate_ids:Test ID generation under concurrent access","generate_ids:131:async (count:int)>Set[str]::","test_month_rollover:156:async (self, id_generator, db_connection)::Test that sequence resets when month changes","test_year_rollover:181:async (self, id_generator)::Test that sequence resets when year changes","test_id_persistence:203:async (self, id_generator, db_connection)::Test that generated IDs are persisted correctly","test_custom_prefix_support:231:async (self, id_generator)::Test support for custom ID prefixes","test_id_validation:241:async (self, id_generator)::Test ID format validation","test_sequence_gap_handling:270:async (self, id_generator, db_connection)::Test that system handles gaps in sequence numbers","test_id_recovery_after_failure:288:async (self, id_generator, db_connection)::Test ID generation recovery after database failure"]],"TestIDQueryPerformance":["317",["test_id_lookup_performance:320:async (self, db_connection)::Test that human-friendly ID lookups are fast","test_id_range_query_performance:346:async (self, db_connection)::Test performance of range queries on human-friendly IDs","test_id_prefix_index:371:async (self, db_connection)::Test that prefix-based indexes exist and are used"]],"TestIDBusinessRules":["398",["test_id_immutability:401:async (self, db_connection)::Test that IDs cannot be changed once assigned","test_id_format_constraint:421:async (self, db_connection)::Test that only properly formatted IDs can be inserted","test_id_case_sensitivity:442:async (self, db_connection)::Test that ID prefixes are case-sensitive","test_id_reserved_sequences:460:async (self, db_connection)::Test that certain sequence numbers can be reserved","test_id_audit_trail:483:async (self, db_connection)::Test that ID generation creates audit trail"]]}],"t/test_index_performance.py":["p",{"TestIndexPerformance":["22",["db_connection:26:async (self):setup_large_dataset:Create database connection with large dataset","setup_large_dataset:43:async (self, conn)::Setup large dataset for performance testing","test_composite_index_creation:66:async (self, db_connection)::Test creation of composite index on supplier_id and month","test_supplier_query_performance:86:async (self, db_connection)::Test performance of queries filtered by supplier","test_month_range_query_performance:116:async (self, db_connection)::Test performance of month range queries","test_supplier_month_combo_query_performance:143:async (self, db_connection)::Test performance of queries with both supplier and month filters","test_covering_index_performance:178:async (self, db_connection)::Test performance improvement from covering indexes","test_partial_index_efficiency:218:async (self, db_connection)::Test partial indexes for common filter conditions","test_index_maintenance_impact:247:async (self, db_connection)::Test impact of index maintenance on write performance","test_index_fragmentation_monitoring:281:async (self, db_connection)::Test monitoring of index fragmentation","test_concurrent_index_access:313:async (self, db_connection):query_task:Test index performance under concurrent access","query_task:317:async (supplier_id)::"]],"TestSpecializedIndexes":["344",["test_gin_index_for_jsonb:347:async (self, db_connection)::Test GIN index performance for JSONB metadata queries","test_brin_index_for_time_series:393:async (self, db_connection)::Test BRIN index for time-series data","test_hash_index_for_equality:434:async (self, db_connection)::Test hash index for equality-only queries","test_expression_index:465:async (self, db_connection)::Test expression-based indexes for computed columns","test_multicolumn_statistics:491:async (self, db_connection)::Test extended statistics for correlated columns"]]}],"t/test_personnummer_validator.py":["p",{"TestPersonnummerValidator":["19",["setUp:22:(self)::","test_validate_standard_12_digit_format:25:(self)::Test validation of standard 12-digit personnummer (YYYYMMDD-XXXX)","test_validate_10_digit_format:42:(self)::Test validation of 10-digit personnummer (YYMMDD-XXXX)","test_validate_coordination_number:56:(self)::Test validation of coordination numbers (day + 60)","test_validate_invalid_luhn_checksum:69:(self)::Test that invalid Luhn checksums are rejected","test_validate_invalid_date:83:(self)::Test that invalid dates are rejected","test_extract_birth_date:98:(self)::Test birth date extraction from personnummer","test_extract_gender:111:(self)::Test gender extraction (odd=male, even=female)","test_validate_temporary_number:123:(self)::Test validation of temporary personnummer (T-nummer)","test_batch_validation:136:(self)::Test batch validation of multiple personnummer"]],"TestPersonnummerRedactor":["154",["setUp:157:(self)::","test_redact_personnummer_in_text:160:(self)::Test redaction of personnummer in free text","test_redact_with_partial_masking:174:(self)::Test partial masking (show only birth year)","test_redact_with_full_masking:184:(self)::Test complete masking","test_redact_multiple_formats:193:(self)::Test redaction of various personnummer formats","test_redact_in_dataframe:208:(self)::Test redaction in pandas DataFrame","test_redact_with_allowlist:224:(self)::Test redaction with allowlist for test data","test_redact_audit_log:236:(self)::Test that redaction creates audit log","test_redact_preserves_context:248:(self)::Test that redaction preserves surrounding context","test_redact_performance:258:(self)::Test redaction performance on large text"]],"TestPersonnummerIntegration":["273",["test_validate_and_redact_pipeline:276:(self)::Test complete pipeline: validate then redact"]]}],"t/test_pgvector_performance.py":["p",{"TestPgVectorPerformance":["24",["db_connection:28:async (self)::Create direct asyncpg connection for performance testing","embedding_model:43:(self)::Load embedding model for testing","sample_embeddings:51:async (self, embedding_model)>List[Tuple[str, List[float]]]::Generate sample embeddings for testing","test_embedding_insertion_performance:69:async (self, db_connection, sample_embeddings)::Test performance of inserting embeddings into database","test_similarity_search_performance:105:async (self, db_connection, sample_embeddings)::Test vector similarity search performance with HNSW index","test_filtered_similarity_search_performance:135:async (self, db_connection, sample_embeddings)::Test performance of similarity search with filters","test_multi_vector_search_performance:173:async (self, db_connection, sample_embeddings)::Test performance of searching across multiple tables with embeddings","test_rag_context_retrieval_performance:223:async (self, db_connection, embedding_model)::Test RAG context retrieval performance for LLM queries","test_vector_index_size_and_performance:275:async (self, db_connection)::Test vector index size and performance with large dataset","test_concurrent_vector_operations:326:async (self, db_connection, sample_embeddings):insert_task,search_task:Test concurrent vector operations performance","search_task:330:async (query_embedding)::","insert_task:338:async (text, embedding)::"]],"TestEmbeddingQuality":["371",["swedish_model:375:(self)::Load Swedish-specific embedding model","test_swedish_semantic_similarity:380:async (self, swedish_model, db_connection)::Test that Swedish semantic similarity works correctly","test_embedding_dimension_consistency:409:async (self, db_connection)::Test that all embeddings have consistent dimensions","test_null_embedding_handling:437:async (self, db_connection)::Test handling of null embeddings in searches"]]}],"t/test_scenario_engine_determinism.py":["p",{"ScenarioParameters":["31",[]],"KPIResult":["45",[]],"ScenarioDiff":["58",[]],"TestScenarioEngineDeterminism":["67",["scenario_engine:71:async (self)::Get scenario engine instance","valid_scenario_params:80:(self)>ScenarioParameters::Valid scenario parameters for testing","test_deterministic_execution:94:async (self, scenario_engine, valid_scenario_params)::Test that same inputs always produce same outputs","test_json_schema_validation:122:async (self, scenario_engine)::Test JSON schema validation for inputs and outputs","test_kpi_recalculation_completeness:167:async (self, scenario_engine, valid_scenario_params)::Test KPI recalculation - Completeness metric","test_kpi_recalculation_anomaly_burden:198:async (self, scenario_engine, valid_scenario_params)::Test KPI recalculation - Anomaly Burden metric","test_kpi_recalculation_review_progress:232:async (self, scenario_engine, valid_scenario_params)::Test KPI recalculation - Review Progress metric","test_diff_generation:262:async (self, scenario_engine, valid_scenario_params)::Test generation of diffs between baseline and scenario","test_snapshot_immutability:293:async (self, scenario_engine, valid_scenario_params)::Test that scenario snapshots are immutable once created","test_insight_referencing:327:async (self, scenario_engine, valid_scenario_params)::Test referencing of insights by human-friendly IDs","test_swedish_supplier_cohorts:363:async (self, scenario_engine)::Test handling of Swedish supplier naming patterns and cohorts","test_seasonal_variations:401:async (self, scenario_engine, valid_scenario_params)::Test handling of seasonal variations in Swedish waste management","test_performance_median_target:439:async (self, scenario_engine, valid_scenario_params)::Test that median execution time is under 60 seconds","test_performance_p95_target:465:async (self, scenario_engine, valid_scenario_params)::Test that 95th percentile execution time is under 120 seconds","test_edge_case_empty_dataset:491:async (self, scenario_engine)::Test handling of empty datasets","test_edge_case_invalid_parameters:531:async (self, scenario_engine)::Test handling of invalid parameters","test_edge_case_concurrent_executions:581:async (self, scenario_engine, valid_scenario_params):execute_scenario:Test handling of concurrent scenario executions","execute_scenario:585:async (engine, params, delay=0)::","test_memory_efficiency:633:async (self, scenario_engine, valid_scenario_params)::Test memory efficiency with large datasets","test_cache_effectiveness:667:async (self, scenario_engine, valid_scenario_params)::Test caching for repeated calculations"]],"TestScenarioEngineResilience":["701",["test_partial_data_handling:704:async (self, scenario_engine)::Test handling of partial/incomplete data","test_graceful_degradation:741:async (self, scenario_engine)::Test graceful degradation when services are unavailable","test_transaction_rollback:770:async (self, scenario_engine, valid_scenario_params)::Test transaction rollback on failure"]],"TestScenarioEngineSwedishContext":["793",["test_swedish_regulatory_compliance:796:async (self, scenario_engine)::Test compliance with Swedish waste management regulations","test_swedish_municipality_handling:841:async (self, scenario_engine)::Test handling of Swedish municipality structure","test_swedish_waste_categories:868:async (self, scenario_engine)::Test Swedish waste categorization system","test_swedish_holiday_impact:892:async (self, scenario_engine)::Test impact of Swedish holidays on waste patterns"]]}],"t/test_xlsx_parser.py":["p",{"TestSwedishXLSXParser":["22",["setUp:25:(self)::Set up test fixtures","tearDown:30:(self)::Clean up test fixtures","test_parse_xlsx_with_swedish_characters_in_headers:35:(self)::Test that parser correctly handles Swedish characters in column headers","test_parse_xlsx_with_swedish_characters_in_data:58:(self)::Test that parser correctly handles Swedish characters in cell data","test_parse_xlsx_with_mixed_encoding:78:(self)::Test handling of files with mixed character encodings","test_parse_xlsx_invalid_file_format:96:(self)::Test that invalid file formats raise appropriate errors","test_parse_xlsx_corrupted_file:107:(self)::Test handling of corrupted XLSX files","test_parse_xlsx_empty_file:118:(self)::Test handling of empty XLSX files","test_parse_xlsx_large_file_streaming:131:(self)::Test streaming parse for large files","test_parse_xlsx_multiple_sheets:152:(self)::Test parsing XLSX with multiple sheets","test_parse_xlsx_with_formulas:170:(self)::Test handling of XLSX files with formulas"]],"TestXLSXParserPerformance":["191",["setUp:194:(self)::","tearDown:198:(self)::","test_parse_performance_small_file:202:(self)::Test that small files parse in under 100ms","test_memory_efficient_parsing:219:(self)::Test memory-efficient parsing for large files"]]}]},"g":[["TestEUEESDataResidencyCompliance.test_data_minimization_principle","_get_database_schema"],["ProposalCard","getConfidenceBadge"],["ScenarioValidationError.__init__","ColoredTestResult.__init__"],["ColoredTestResult.__init__","TraceabilityError.__init__"],["ScenarioValidationError.__init__","PIIDetectionError.__init__"],["VectorStore.hybrid_search","search"],["BatchProcessor.add_item","_process_batch"],["TestContainerOrchestration.test_container_resource_limits","_parse_cpu"],["ColoredTestResult.__init__","SnapshotManager.__init__"],["TestClaudeCodeHookManager.test_hook_metrics_collection","TestClaudeCodeHookManager.slow_hook"],["ScenarioValidationError.__init__","PolicyViolationError.__init__"],["IndexManager._maintenance_loop","IndexManager._rebuild_index"],["ScenarioValidationError.__init__","ScopedRetriever.__init__"],["handleKeyDown","handleCardClick"],["ThemeToggle","getAriaLabel"],["TestPgVectorPerformance.test_concurrent_vector_operations","TestPgVectorPerformance.insert_task"],["ScenarioValidationError.__init__","ConfigLoader.__init__"],["ScenarioValidationError.__init__","EvidencePackExporter.__init__"],["TestPgVectorPerformance.test_concurrent_vector_operations","insert_task"],["ConfigLoader.load_email_config","ConfigLoader.load_config"],["ConfigLoader.load_config","ConfigLoader._deep_merge"],["get_storage_config","ConfigLoader.load_storage_config"],["ConfigLoader.load_all_configs","ConfigLoader.load_email_config"],["ScenarioValidationError.__init__","ConfirmationRequiredError.__init__"],["ScenarioValidationError.__init__","ScenarioEngine.__init__"],["get_email_config","load_email_config"],["TestContainerOrchestration.test_container_resource_limits","_parse_memory"],["OptimizedRAGService.search_with_optimization","OptimizedRAGService._get_cached_result"],["RAGService.index_documents","VectorStore.initialize"],["TestEUEESDataResidencyCompliance.test_swedish_data_protection_authority_requirements","_get_api_endpoint"],["QueryOptimizer._execute_single_search","acquire"],["ScenarioValidationError.__init__","IndexManager.__init__"],["ScenarioConfig.__post_init__","_validate_insight_id"],["RAGService.query","RAGService._calculate_confidence"],["RedisCache.delete","delete"],["RedisCache.get","RedisCache.get"],["TestClaudeCodeHookManager.test_hook_context_mutation","check_metadata"],["TestSecretsManagement.test_secret_complexity_requirements","TestSecretsManagement._determine_secret_type"],["TestEUEESDataResidencyCompliance.test_privacy_by_design_implementation","TestEUEESDataResidencyCompliance._get_system_configuration"],["ScenarioEngine.execute_scenario","_calculate_data_quality"],["IndexManager._maintenance_loop","_rebuild_index"],["ScenarioEngine.execute_scenario","ScenarioEngine._extract_supplier_metadata"],["ColoredTestResult.__init__","PIIDetectionError.__init__"],["ColoredTestResult.__init__","EmailAuthenticationService.__init__"],["TestEUEESDataResidencyCompliance.test_automated_data_breach_detection","_get_monitoring_endpoint"],["RAGService.index_documents","upsert"],["ColoredTestResult.__init__","IntersectionObserver.__init__"],["IndexManager.optimize_for_recall","ConnectionPool.acquire"],["TestWebhookRetryMechanism.test_dead_letter_queue","always_fails"],["ConnectionPool.close","VectorStore.close"],["EmbeddingGenerator.__init__","_load_model"],["ColoredTestResult.__init__","ConfigLoader.__init__"],["ColoredTestResult.__init__","EvidencePackExporter.__init__"],["ColoredTestResult.__init__","ResizeObserver.__init__"],["VectorStore.close","VectorStore.close"],["KPICalculator.__init__","KPICalculator._load_swedish_holidays"],["TestRunner.run_tests","TestRunner.discover_tests"],["RAGService.query","EmbeddingGenerator.generate_embeddings"],["FindingRow","getSeverityColor"],["ScopedRetriever.retrieve","generate_embeddings"],["ConfigLoader.load_all_configs","load_email_config"],["ScenarioValidationError.__init__","ScenarioValidationError.__init__"],["RedisCache.close","VectorStore.close"],["TestRunner.run_tests","generate_json_report"],["ScenarioEngine.execute_scenario","ScenarioEngine._calculate_flag_counts"],["TestSecretsManagement.test_secret_complexity_requirements","TestSecretsManagement._validate_secret_complexity"],["assert_infrastructure_ready","_check_rds_ready"],["ScenarioValidationError.__init__","VectorStore.__init__"],["get_config","load_config"],["RAGService.index_documents","RAGService.initialize"],["ColoredTestResult.__init__","ScenarioEngine.__init__"],["TestWebhookRetryMechanism.test_retry_with_jitter","TestWebhookRetryMechanism.record_retry"],["RAGService.close","VectorStore.close"],["ScenarioValidationError.__init__","TestRunner.__init__"],["ScenarioValidationError.__init__","EmbeddingGenerator.__init__"],["ScopedRetriever.retrieve","VectorStore.search"],["VectorStore.initialize","_create_tables"],["ColoredTestResult.__init__","IndexManager.__init__"],["ScenarioValidationError.__init__","ObjectStorageClient.__init__"],["ScenarioEngine._calculate_kpis","calculate_anomaly_burden"],["ConfigLoader.load_config","_validate_schema"],["VectorStore.close","close"],["VectorStore.initialize","VectorStore._create_indexes"],["RAGService.query","_calculate_confidence"],["RAGService.index_documents","ConnectionPool.initialize"],["ScenarioValidationError.__init__","LRUCache.__init__"],["RAGService.query","RAGService._detect_language"],["ColoredTestResult.__init__","__init__"],["OptimizedRAGService.initialize","initialize"],["ScenarioEngine.resolve_insight_references","Insight.from_id"],["RedisCache.close","close"],["TestClaudeCodeHookManager.test_hook_context_mutation","add_metadata"],["ScenarioEngine.execute_scenario","_get_baseline"],["TestScenarioEngineDeterminism.test_edge_case_concurrent_executions","ScenarioEngine.execute_scenario"],["TestClaudeCodeHookManager.test_hook_exception_handling","TestClaudeCodeHookManager.error_handler"],["RAGService.close","close"],["ScenarioValidationError.__init__","PIIDetector.__init__"],["ScenarioValidationError.__init__","EmailWebhookProcessor.__init__"],["ConnectionPool.close","ConnectionPool.close"],["RAGService.index_documents","OptimizedRAGService.initialize"],["TestScenarioEngineDeterminism.test_edge_case_concurrent_executions","TestScenarioEngineDeterminism.execute_scenario"],["OptimizedRAGService.search_with_optimization","ConnectionPool.acquire"],["TestClaudeCodeHookManager.test_conditional_hook_execution","xlsx_only_hook"],["OptimizedRAGService.initialize","IndexManager.start_maintenance"],["TestSecretsManagement.test_secret_complexity_requirements","_validate_secret_complexity"],["QueryOptimizer._execute_single_search","get"],["ScenarioEngine._calculate_kpis","calculate_review_progress"],["ScenarioEngine.execute_scenario","ScenarioEngine._fetch_data"],["get_compliance_config","ConfigLoader.load_compliance_config"],["assert_infrastructure_ready","_check_eks_ready"],["OptimizedRAGService.close","OptimizedRAGService.close"],["ColoredTestResult.__init__","RateLimiter.__init__"],["RAGService.query","_generate_answer"],["formatSwedishPercent","formatSwedishNumber"],["ScenarioValidationError.__init__","SnapshotManager.__init__"],["ColoredTestResult.__init__","ScenarioValidationError.__init__"],["TestEUEESDataResidencyCompliance.test_lawful_basis_documentation","_get_processing_registry"],["RAGService.query","search"],["TestEUEESDataResidencyCompliance.test_privacy_by_design_implementation","TestEUEESDataResidencyCompliance._get_privacy_impact_assessment"],["ColoredTestResult.addFailure","addFailure"],["ColoredTestResult.__init__","EmbeddingGenerator.__init__"],["ScenarioEngine._select_provider","ScenarioEngine._claude_available"],["FindingRow","getSeverityText"],["TestPgVectorPerformance.test_concurrent_vector_operations","TestPgVectorPerformance.search_task"],["ColoredTestResult.__init__","HumanFriendlyIDResolver.__init__"],["TestSecretsManagement.test_kubernetes_secrets","_verify_secret_rbac"],["TestClaudeCodeHookManager.test_hook_context_mutation","TestClaudeCodeHookManager.add_metadata"],["OptimizedRAGService.close","RedisCache.close"],["TestSecretsManagement.test_secret_access_patterns","_is_trusted_ip"],["HumanFriendlyIDResolver.resolve_to_embedding","HumanFriendlyIDResolver.parse_id"],["HumanFriendlyIDResolver.extract_and_resolve_ids","parse_id"],["ColoredTestResult.startTest","startTest"],["ColoredTestResult.__init__","LRUCache.__init__"],["TestClaudeCodeHookManager.test_conditional_hook_execution","csv_only_hook"],["ConnectionPool.initialize","ConnectionPool._health_check_loop"],["RAGService.index_documents","generate_embeddings"],["OptimizedRAGService._get_cached_result","get"],["ConfigLoader.load_all_configs","ConfigLoader.load_compliance_config"],["CommentItem","renderMarkdown"],["TestSecretsManagement.test_kubernetes_secrets","TestSecretsManagement._verify_secret_rbac"],["BatchProcessor.add_item","BatchProcessor._process_batch"],["VectorStore.initialize","VectorStore._create_tables"],["TestMCPToolIntegration.test_mcp_tool_error_handling","TestMCPToolIntegration.failing_handler"],["ScenarioEngine.execute_scenario","ScenarioEngine._get_baseline"],["QueryOptimizer.analyze_query_plan","RedisCache.get"],["ColoredTestResult.startTest","ColoredTestResult.startTest"],["ConfigLoader._resolve_env_vars","ConfigLoader.resolve_value"],["ConfigLoader._deep_merge","_deep_merge"],["BatchProcessor._process_batch","BatchProcessor._execute_batch"],["EmbeddingGenerator.generate_embeddings","EmbeddingGenerator._cache_key"],["HumanFriendlyIDResolver.batch_resolve","parse_id"],["ConfigLoader.load_storage_config","load_config"],["useAuditLogger","getSessionId"],["OptimizedRAGService.close","stop_maintenance"],["TestEUEESDataResidencyCompliance.test_data_minimization_principle","TestEUEESDataResidencyCompliance._get_database_schema"],["TestWebhookRetryMechanism.test_exponential_backoff_retry","failing_processor"],["TestClaudeCodeHookManager.test_hook_context_mutation","TestClaudeCodeHookManager.check_metadata"],["ScenarioValidationError.__init__","EmailAuthenticationService.__init__"],["ConfigLoader.load_config","_resolve_env_vars"],["handleKeyDown","handleSendMessage"],["OptimizedRAGService.search_with_optimization","_cache_result"],["ConnectionPool.close","set"],["ToolCallVisualization","getStatusText"],["RAGService.query","retrieve"],["ScenarioValidationError.__init__","IntersectionObserver.__init__"],["ThemeToggle","useTheme"],["ScenarioValidationError.__init__","ResizeObserver.__init__"],["TestMCPToolIntegration.test_mcp_tool_async_execution","TestMCPToolIntegration.async_validator"],["OptimizedRAGService.search_with_optimization","OptimizedRAGService._cache_result"],["ColoredTestResult.__init__","ConnectionPoolManager.__init__"],["RAGService.query","_truncate_to_token_limit"],["VectorStore.hybrid_search","VectorStore.search"],["main","run_tests"],["ScenarioValidationError.__init__","OptimizedRAGService.__init__"],["ScenarioEngine.execute_scenario","_get_cache_key"],["TestWebhookIdempotency.test_concurrent_webhook_processing","process_webhook"],["IndexManager.optimize_for_recall","acquire"],["OptimizedRAGService.initialize","start_maintenance"],["IndexManager.start_maintenance","_maintenance_loop"],["mockArchonAPI","generateMockHash"],["IndexManager.start_maintenance","IndexManager._maintenance_loop"],["TestEUEESDataResidencyCompliance.test_data_portability_compliance","TestEUEESDataResidencyCompliance._get_api_endpoint"],["ColoredTestResult.__init__","CacheManager.__init__"],["OptimizedRAGService.close","RAGService.close"],["ScenarioEngine._calculate_kpis","KPICalculator.calculate_completeness"],["SnapshotManager.create_snapshot","to_dict"],["OptimizedRAGService.search_with_optimization","OptimizedRAGService._build_query_params"],["OptimizedRAGService.close","IndexManager.stop_maintenance"],["ScenarioEngine._select_provider","_claude_available"],["ScenarioValidationError.__init__","__init__"],["RAGService.query","RAGService._truncate_to_token_limit"],["TestEUEESDataResidencyCompliance.test_consent_management_system","TestEUEESDataResidencyCompliance._get_api_endpoint"],["ScenarioEngine.execute_scenario","ScenarioEngine._calculate_expected_volume"],["TestSecretsManagement.test_secret_rotation_lambdas","_verify_rotation_lambda_permissions"],["OptimizedRAGService._cache_result","RedisCache.set"],["generateMockAuditEntry","generateMockHash"],["OptimizedRAGService.initialize","VectorStore.initialize"],["TestSecurityConfiguration.test_tls_configuration","_get_application_endpoints"],["QueryOptimizer.analyze_query_plan","ConnectionPool.acquire"],["ScenarioValidationError.__init__","KPICalculator.__init__"],["useAuditLogger","convertToCsv"],["ColoredTestResult.__init__","PolicyValidator.__init__"],["RAGService.query","initialize"],["TestEUEESDataResidencyCompliance.test_data_minimization_principle","TestEUEESDataResidencyCompliance._get_pii_justification"],["RAGService.query","RAGService.initialize"],["TestContainerOrchestration.test_container_resource_limits","TestContainerOrchestration._parse_cpu"],["TestSecretsManagement.test_secret_rotation_lambdas","TestSecretsManagement._verify_rotation_lambda_permissions"],["TestIndexPerformance.db_connection","TestIndexPerformance.setup_large_dataset"],["ScenarioValidationError.__init__","CircuitBreaker.__init__"],["useGranskadState","getTransitionReason"],["ScenarioValidationError.__init__","RateLimiter.__init__"],["ColoredTestResult.__init__","OptimizedRAGService.__init__"],["ScenarioEngine.execute_scenario","_generate_determinism_hash"],["OptimizedRAGService.search_with_optimization","acquire"],["TestRunner.run_tests","discover_tests"],["OptimizedRAGService._cache_result","LRUCache.set"],["handleKeyDown","handleRun"],["VectorStore.close","RedisCache.close"],["ScenarioEngine.execute_scenario","ScenarioEngine._calculate_data_quality"],["ScenarioEngine.execute_scenario","_calculate_baseline_volume"],["ConnectionPool._health_check_loop","set"],["ConnectionPool.initialize","set"],["ScenarioEngine.execute_scenario","ScenarioEngine._select_provider"],["RedisCache.close","RedisCache.close"],["ConfigLoader.resolve_value","ConfigLoader.resolve_value"],["TestEUEESDataResidencyCompliance.test_data_processing_agreements","_get_dpa_registry"],["ColoredTestResult.__init__","UnauthorizedActionError.__init__"],["ScenarioValidationError.__init__","HumanFriendlyIDResolver.__init__"],["QueryOptimizer.analyze_query_plan","QueryOptimizer._check_index_usage"],["ConnectionPool.close","close"],["BatchProcessor.flush","_process_batch"],["ScenarioEngine._select_provider","ScenarioEngine._gpt4_available"],["IndexManager._maintenance_loop","ConnectionPool.acquire"],["ScenarioEngine.execute_scenario","ScenarioEngine._calculate_kpis"],["ScopedRetriever.retrieve","search"],["TestEUEESDataResidencyCompliance.test_data_processing_agreements","TestEUEESDataResidencyCompliance._get_dpa_registry"],["convertToCsv","escapeCsvValue"],["handleKeyDown","handleItemClick"],["KPICalculator.__init__","_load_swedish_holidays"],["OptimizedRAGService.initialize","RAGService.initialize"],["TestRunner.run_tests","TestRunner.generate_coverage_report"],["ConfigLoader.load_email_config","load_config"],["assert_infrastructure_ready","_check_vpc_ready"],["ConfigLoader.load_compliance_config","ConfigLoader.load_config"],["TestSecretsManagement.test_secret_complexity_requirements","_determine_secret_type"],["ColoredTestResult.__init__","KPICalculator.__init__"],["ColoredTestResult.__init__","RAGService.__init__"],["RAGService.index_documents","EmbeddingGenerator.generate_embeddings"],["RedisCache.get","LRUCache.get"],["OptimizedRAGService.initialize","ConnectionPool.initialize"],["ScenarioValidationError.__init__","QueryOptimizer.__init__"],["ColoredTestResult.__init__","CircuitBreaker.__init__"],["RAGService.index_documents","RedisCache.initialize"],["VectorStore.initialize","_create_indexes"],["TestEUEESDataResidencyCompliance.test_data_minimization_principle","_get_pii_justification"],["ConfigLoader.load_config","_deep_merge"],["ScenarioEngine.execute_scenario","_calculate_expected_volume"],["FindingRow","getSeverityIcon"],["RAGService.query","RAGService._generate_answer"],["TestEUEESDataResidencyCompliance.test_right_to_erasure_implementation","_get_api_endpoint"],["OptimizedRAGService.initialize","OptimizedRAGService.initialize"],["ScenarioValidationError.__init__","StorageEncryptionService.__init__"],["RAGService.query","generate_embeddings"],["ScenarioValidationError.__init__","ConnectionPoolManager.__init__"],["TestSecurityConfiguration.test_tls_configuration","TestSecurityConfiguration._get_application_endpoints"],["ColoredTestResult.addError","ColoredTestResult.addError"],["TestSecretsManagement._validate_secret_complexity","_calculate_entropy"],["ScopedRetriever.retrieve","ScopedRetriever._build_scope_levels"],["ColoredTestResult.__init__","BatchProcessor.__init__"],["RAGService.index_documents","VectorStore.upsert"],["canMarkAsReviewed","getChecklistProgress"],["RAGService.query","VectorStore.search"],["MockScenarioWebSocket.connect","MockScenarioWebSocket.emit"],["ScenarioEngine.execute_scenario","_extract_supplier_metadata"],["RAGService.initialize","initialize"],["ScenarioValidationError.__init__","CacheManager.__init__"],["RedisCache.get","get"],["RAGService.initialize","RAGService.initialize"],["TestSecretsManagement.test_secret_access_patterns","TestSecretsManagement._is_trusted_ip"],["ColoredTestResult.__init__","SecurityEnforcer.__init__"],["TestWebhookIdempotency.test_concurrent_webhook_processing","TestWebhookIdempotency.process_webhook"],["ConnectionPool._health_check_loop","acquire"],["OptimizedRAGService.close","VectorStore.close"],["handleChecklistItemToggle","map"],["HumanFriendlyIDResolver.batch_resolve","HumanFriendlyIDResolver.parse_id"],["TestClaudeCodeHookManager.test_hook_exception_handling","failing_hook"],["ConfigLoader.load_all_configs","ConfigLoader.load_storage_config"],["QueryOptimizer.parallel_search","QueryOptimizer._execute_single_search"],["ColoredTestResult.__init__","QueryOptimizer.__init__"],["OptimizedRAGService.search_with_optimization","_generate_cache_key"],["ColoredTestResult.__init__","OptimizedToolOrchestrator.__init__"],["TestEUEESDataResidencyCompliance.test_lawful_basis_documentation","TestEUEESDataResidencyCompliance._get_processing_registry"],["EmbeddingGenerator.__init__","EmbeddingGenerator._load_model"],["OptimizedRAGService.search_with_optimization","optimize_search_query"],["ColoredTestResult.__init__","ConnectionPool.__init__"],["ColoredTestResult.addSuccess","addSuccess"],["environment","environment"],["ConnectionPool.acquire","acquire"],["handleFindingUpdate","map"],["ScenarioValidationError.__init__","PolicyValidator.__init__"],["TestHumanFriendlyIDGeneration.test_concurrent_id_generation","generate_ids"],["ConfigLoader.load_config","ConfigLoader._resolve_env_vars"],["ScenarioValidationError.__init__","AgentAuditLogger.__init__"],["localStorageMock","length"],["ColoredTestResult.__init__","StorageEncryptionService.__init__"],["OptimizedRAGService.search_with_optimization","OptimizedRAGService._generate_cache_key"],["TestEUEESDataResidencyCompliance.test_swedish_data_protection_authority_requirements","TestEUEESDataResidencyCompliance._get_api_endpoint"],["TestScenarioEngineDeterminism.test_edge_case_concurrent_executions","execute_scenario"],["QueryOptimizer.analyze_query_plan","acquire"],["RAGService.query","VectorStore.initialize"],["TestScopedRetrieval.test_hierarchical_fallback","TestScopedRetrieval.mock_search"],["TestClaudeCodeHookManager.test_conditional_hook_execution","TestClaudeCodeHookManager.xlsx_only_hook"],["TestHumanFriendlyIDGeneration.test_concurrent_id_generation","TestHumanFriendlyIDGeneration.generate_ids"],["get_config","ConfigLoader.load_config"],["ConfigLoader.load_config","ConfigLoader._validate_schema"],["ScenarioEngine.execute_scenario","_calculate_kpis"],["CohortPicker","handleMonthChange"],["RAGService.query","ScopedRetriever.retrieve"],["ConnectionPool._health_check_loop","ConnectionPool.acquire"],["useAuditLogger","getStoredLogs"],["ConnectionPool._health_check_loop","RedisCache.set"],["TestClaudeCodeIntegrationScenarios.test_async_hook_pipeline","async_validation"],["ScenarioEngine.execute_scenario","generate_kpi_diff"],["TestPgVectorPerformance.test_concurrent_vector_operations","search_task"],["QueryOptimizer._execute_single_search","RedisCache.get"],["ScenarioValidationError.__init__","EvidencePackBatchProcessor.__init__"],["ScenarioValidationError.__init__","UnauthorizedActionError.__init__"],["ConnectionPool.initialize","RedisCache.set"],["handleKeyDown","handleSave"],["RedisCache.delete","RedisCache.delete"],["TestMCPToolIntegration.test_mcp_tool_async_execution","async_validator"],["TestIndexPerformance.test_concurrent_index_access","query_task"],["OptimizedRAGService.close","ConnectionPool.close"],["ScopedRetriever.retrieve","EmbeddingGenerator.generate_embeddings"],["FindingRow","getSourceText"],["handleKeyDown","handleSegmentClick"],["ScenarioValidationError.__init__","AuditLogger.__init__"],["ConfigLoader.load_all_configs","load_storage_config"],["MockScenarioWebSocket.connect","emit"],["ScenarioValidationError.__init__","AgentGuardrails.__init__"],["ConnectionPool.acquire","ConnectionPool.acquire"],["ScenarioValidationError.__init__","RedisCache.__init__"],["TestClaudeCodeHookManager.test_hook_metrics_collection","slow_hook"],["ConnectionPool._health_check_loop","LRUCache.set"],["ConnectionPool.close","OptimizedRAGService.close"],["EmbeddingGenerator.generate_embeddings","_cache_key"],["IndexManager._maintenance_loop","acquire"],["ScenarioEngine._calculate_kpis","KPICalculator.calculate_anomaly_burden"],["handleKeyDown","handleClick"],["TestMCPToolIntegration.test_mcp_tool_error_handling","failing_handler"],["VectorStore.close","OptimizedRAGService.close"],["ConnectionPool.initialize","LRUCache.set"],["TestEUEESDataResidencyCompliance.test_privacy_by_design_implementation","_get_privacy_impact_assessment"],["ScenarioValidationError.__init__","RAGService.__init__"],["QueryOptimizer.analyze_query_plan","LRUCache.get"],["ColoredTestResult.__init__","EvidencePackComplianceValidator.__init__"],["RedisCache.close","OptimizedRAGService.close"],["ColoredTestResult.__init__","AgentAuditLogger.__init__"],["RedisCache.delete","CacheManager.delete"],["ScenarioEngine.execute_scenario","_calculate_flag_counts"],["TestIndexPerformance.test_concurrent_index_access","TestIndexPerformance.query_task"],["OptimizedRAGService._get_cached_result","RedisCache.get"],["IndexManager._maintenance_loop","IndexManager._check_index_bloat"],["RAGService.close","OptimizedRAGService.close"],["ScenarioValidationError.__init__","ActionTracker.__init__"],["ConnectionPool.close","RedisCache.close"],["BatchProcessor.flush","BatchProcessor._process_batch"],["ConfigLoader._resolve_env_vars","resolve_value"],["ScenarioEngine.execute_scenario","ScenarioEngine._get_cache_key"],["OptimizedRAGService.search_with_optimization","QueryOptimizer.optimize_search_query"],["cost_limits","environment"],["ColoredTestResult.addSkip","ColoredTestResult.addSkip"],["TestClaudeCodeHookManager.test_conditional_hook_execution","TestClaudeCodeHookManager.csv_only_hook"],["TestEUEESDataResidencyCompliance.test_data_portability_compliance","_get_api_endpoint"],["RAGService.query","ConnectionPool.initialize"],["ScenarioEngine.resolve_insight_references","from_id"],["mock_aws_services","mock_client"],["ColoredTestResult.__init__","ColoredTestResult.__init__"],["OptimizedRAGService.search_with_optimization","_get_cached_result"],["ConfigLoader._deep_merge","ConfigLoader._deep_merge"],["CohortPicker","handleSupplierToggle"],["ScenarioEngine.execute_scenario","DiffGenerator.generate_kpi_diff"],["get_compliance_config","load_compliance_config"],["TestWebhookRetryMechanism.test_retry_with_jitter","record_retry"],["ColoredTestResult.addSuccess","ColoredTestResult.addSuccess"],["ColoredTestResult.__init__","EvidencePackBatchProcessor.__init__"],["ColoredTestResult.__init__","PolicyViolationError.__init__"],["ScenarioValidationError.__init__","BatchProcessor.__init__"],["ColoredTestResult.__init__","ScopedRetriever.__init__"],["RAGService.close","RedisCache.close"],["TestDuckDBAnalytics.test_monthly_aggregation_performance","TestDuckDBAnalytics.setup_test_data"],["ColoredTestResult.__init__","AuditLogger.__init__"],["TestEUEESDataResidencyCompliance.test_automated_data_breach_detection","TestEUEESDataResidencyCompliance._get_monitoring_endpoint"],["QueryOptimizer.analyze_query_plan","_check_index_usage"],["RAGService.query","OptimizedRAGService.initialize"],["TestEUEESDataResidencyCompliance.test_consent_management_system","_get_api_endpoint"],["TestContainerOrchestration.test_container_resource_limits","TestContainerOrchestration._parse_memory"],["get_storage_config","load_storage_config"],["ColoredTestResult.__init__","AgentGuardrails.__init__"],["QueryOptimizer.analyze_query_plan","get"],["TestSecretsManagement._validate_secret_complexity","TestSecretsManagement._calculate_entropy"],["ColoredTestResult.__init__","RedisCache.__init__"],["main","TestRunner.run_tests"],["QueryOptimizer._execute_single_search","ConnectionPool.acquire"],["ScenarioValidationError.__init__","MockStateMachine.__init__"],["TestSecretsManagement.test_kubernetes_secrets","_get_kubernetes_client"],["ScenarioValidationError.__init__","SecurityEnforcer.__init__"],["RAGService.initialize","VectorStore.initialize"],["RAGService.query","RedisCache.initialize"],["RAGService.index_documents","initialize"],["OptimizedRAGService.search_with_optimization","_build_query_params"],["assert_infrastructure_ready","_check_s3_ready"],["QueryOptimizer._execute_single_search","LRUCache.get"],["IndexManager._maintenance_loop","_check_index_bloat"],["ColoredTestResult.__init__","ConfirmationRequiredError.__init__"],["TestSecretsManagement.test_kubernetes_secrets","TestSecretsManagement._get_kubernetes_client"],["ColoredTestResult.addError","addError"],["ConfigLoader.load_storage_config","ConfigLoader.load_config"],["TestEUEESDataResidencyCompliance.test_right_to_erasure_implementation","TestEUEESDataResidencyCompliance._get_api_endpoint"],["BatchProcessor._process_batch","_execute_batch"],["ColoredTestResult.addSkip","addSkip"],["FindingRow","getStatusColor"],["ConfigLoader.load_all_configs","load_compliance_config"],["TestWebhookRetryMechanism.test_exponential_backoff_retry","TestWebhookRetryMechanism.failing_processor"],["TestClaudeCodeIntegrationScenarios.test_async_hook_pipeline","TestClaudeCodeIntegrationScenarios.async_validation"],["TestClaudeCodeHookManager.test_hook_exception_handling","TestClaudeCodeHookManager.failing_hook"],["ScenarioValidationError.__init__","OptimizedToolOrchestrator.__init__"],["getContrastRatio","getLuminance"],["ColoredTestResult.__init__","ActionTracker.__init__"],["ScenarioValidationError.__init__","ConnectionPool.__init__"],["TestRunner.run_tests","TestRunner.print_summary"],["ScenarioValidationError.__init__","ConfirmationWorkflow.__init__"],["ScenarioEngine._calculate_kpis","KPICalculator.calculate_review_progress"],["ScenarioEngine.execute_scenario","_select_provider"],["TestIndexPerformance.db_connection","setup_large_dataset"],["OptimizedRAGService._cache_result","set"],["MessageList","renderMessage"],["ConnectionPool.close","RedisCache.set"],["ConnectionPool.close","RAGService.close"],["VectorStore.close","RAGService.close"],["HumanFriendlyIDResolver.extract_and_resolve_ids","HumanFriendlyIDResolver.parse_id"],["OptimizedRAGService._get_cached_result","LRUCache.get"],["VectorStore.close","ConnectionPool.close"],["OptimizedRAGService.initialize","RedisCache.initialize"],["RAGService.query","_detect_language"],["TestEUEESDataResidencyCompliance.test_privacy_by_design_implementation","_get_system_configuration"],["RedisCache.close","RAGService.close"],["TestScopedRetrieval.test_hierarchical_fallback","mock_search"],["TestDuckDBAnalytics.test_monthly_aggregation_performance","setup_test_data"],["QueryOptimizer.parallel_search","_execute_single_search"],["ScenarioValidationError.__init__","TraceabilityError.__init__"],["RedisCache.close","ConnectionPool.close"],["ConnectionPool.initialize","_health_check_loop"],["TestWebhookRetryMechanism.test_dead_letter_queue","TestWebhookRetryMechanism.always_fails"],["RAGService.close","RAGService.close"],["assert_infrastructure_ready","_check_secrets_ready"],["ConnectionPool.close","LRUCache.set"],["ColoredTestResult.__init__","MockStateMachine.__init__"],["ColoredTestResult.__init__","VectorStore.__init__"],["RAGService.close","ConnectionPool.close"],["ScenarioConfig.__post_init__","ScenarioConfig._validate_insight_id"],["ColoredTestResult.__init__","TestRunner.__init__"],["TestDataConsistency.test_concurrent_write_consistency","write_task"],["ScenarioEngine._calculate_kpis","calculate_completeness"],["ConfigLoader.resolve_value","resolve_value"],["RAGService.initialize","ConnectionPool.initialize"],["ToolCallVisualization","getStatusIcon"],["ColoredTestResult.__init__","ObjectStorageClient.__init__"],["ScenarioEngine._select_provider","_gpt4_available"],["SnapshotManager.create_snapshot","ScenarioResult.to_dict"],["ColoredTestResult.__init__","ConfirmationWorkflow.__init__"],["TestRunner.run_tests","print_summary"],["TestRunner.run_tests","generate_coverage_report"],["ScenarioEngine.execute_scenario","ScenarioEngine._calculate_baseline_volume"],["TestDataConsistency.test_concurrent_write_consistency","TestDataConsistency.write_task"],["HumanFriendlyIDResolver.resolve_to_embedding","parse_id"],["ColoredTestResult.addFailure","ColoredTestResult.addFailure"],["TestRunner.run_tests","TestRunner.generate_json_report"],["ScenarioValidationError.__init__","EvidencePackComplianceValidator.__init__"],["ScenarioEngine.execute_scenario","_fetch_data"],["get_email_config","ConfigLoader.load_email_config"],["RAGService.initialize","OptimizedRAGService.initialize"],["ScopedRetriever.retrieve","_build_scope_levels"],["TestClaudeCodeHookManager.test_hook_exception_handling","error_handler"],["OptimizedRAGService.close","close"],["ColoredTestResult.__init__","PIIDetector.__init__"],["ColoredTestResult.__init__","EmailWebhookProcessor.__init__"],["ConfigLoader.load_compliance_config","load_config"],["ScenarioEngine.execute_scenario","ScenarioEngine._generate_determinism_hash"],["RAGService.initialize","RedisCache.initialize"],["assert_infrastructure_ready","_assert_ready"]],"d":{"tests/llm-tools/README.md":["LLM Function Calling Tools - Test Suite","\ud83d\udd34 TDD RED Phase Status","\ud83d\udcca Coverage Targets","\ud83e\uddea Test Files","Core Tool Tests","Integration Tests","\ud83d\ude80 Running Tests","Run all LLM tool tests","Run with coverage","Run specific tool tests"],"CLAUDE.md":["Research \u2192 Plan (BMAD Analyst/PM roles) \u2192 Create Tasks (see workflow below) \u2013 Use /docs for MCP setup if needed.","Read all major files, understand architecture, identify current state","Then create project container","Research current tech stack (include /docs queries) and create tasks for remaining work","Focus on what needs to be built, not what already exists; retroactively add missed tasks (e.g., Task 1).","Pick up where you left off - no new project creation needed","Continue with standard development iteration workflow; if prior tasks missed Archon (e.g., Task 1 started externally), create/move them now.","Specific implementation guidance \u2013 Cross-reference with /docs [query] from claude-code-docs","Use claude-code-project-index for existing code refs: Prompt with -i or @PROJECT_INDEX.json"],"CLEAR_INSTRUCTIONS_POST_COMPACTION.md":["\ud83d\ude80 Clear Instructions After Compaction","**CRITICAL: Read CLAUDE.md First**","**Project Status Summary**","\u2705 **Completed Infrastructure**","\ud83c\udfd7\ufe0f **Current Architecture**","\ud83d\udcc1 **Key Directories**","**Next Steps Workflow**","**Swedish Compliance Reminders**","**Testing Strategy**","**Deployment & Git**"],"DEVELOPMENT_INSTRUCTIONS.md":["\ud83d\ude80 Complete Development Instructions for SVOA Lea Platform","**CRITICAL: Start Here - Read CLAUDE.md First**","**Essential Workflow: ARCHON-FIRST Development**","1. **Connect to Archon & Check Tasks**","2. **Research Phase - Use ALL Available Tools**","3. **TDD Implementation Cycle**","4. **Quality Validation**","5. **Update Archon Status**","**Complete Tool Arsenal - Use Proactively**","**MCP Archon Server Tools**"],"README.md":["SVOA Lea Platform","\ud83c\udfd7\ufe0f Architecture Overview","\ud83d\ude80 Quick Start","Prerequisites","Development Setup","\ud83d\udccb Development Workflow","Task Management","Sprint Structure","\ud83d\udd10 EU/EES Compliance","Data Residency"],"TDD_ENHANCEMENT_PATTERNS.md":["TDD Enhancement Patterns for SVOA Lea Platform Tasks","Executive Summary","Core Enhancement Patterns","1. RED Phase Enhancements (Test First)","Example for every data-handling component","Pattern for LLM Gateway, RAG, Scenario Engine","2. GREEN Phase Enhancements (Implementation)","Implementation pattern for resource-intensive AI operations","Pattern for all user-facing components"],"TDD_TEST_DOCUMENTATION.md":["Swedish Waste Management Data Validation - TDD Test Suite","\ud83c\udfaf Overview","\ud83d\udd34 Current Status: RED Phase","\ud83d\udccb Test Categories","1. XLSX Parser Tests (`test_xlsx_parser.py`)","Swedish character support","Streaming for large files","2. Personnummer Validator Tests (`test_personnummer_validator.py`)","Valid formats tested","Redaction modes"],"tests/frontend/granskad/README.md":["Granskad Workflow Test Suite","\ud83d\udd34 TDD RED Phase - Failing Tests for Swedish Waste Management Review System","\ud83d\udccb Test Coverage","1. Layout & Responsiveness (`test_granskad_layout.tsx`)","2. State Machine (`test_granskad_state_machine.tsx`)","3. Checklist System (`test_granskad_checklist.tsx`)","4. Comment System (`test_granskad_comment_system.tsx`)","5. Snapshot & Audit (`test_granskad_snapshot_audit.tsx`)","\ud83d\ude80 Running the Tests","Run all Granskad tests:"],"tests/infrastructure/README.md":["SVOA Lea Platform - Infrastructure Test Suite","Overview","Test Coverage Areas","1. Infrastructure as Code (IaC)","2. EU/EES Compliance","3. Security Configuration","4. Network Segmentation","5. Secrets Management","6. CI/CD Pipeline","7. Container Orchestration"]},"deps":{"components/copilot/CopilotDock-old.tsx":["components/copilot/types.ts","@/providers/copilot-provider","@/components/ui/glass-card","@/components/ui/button","@/components/ui/textarea","@/components/ui/badge","lucide-react","@/lib/utils"],"components/copilot/MessageList.tsx":["react","components/copilot/types.ts","components/copilot/ToolCallVisualization.tsx","@/components/ui/badge","lucide-react","@/lib/utils"],"components/copilot/ProposalCard.tsx":["react","components/copilot/types.ts","@/components/ui/card","@/components/ui/button","@/components/ui/badge","@/components/ui/alert","lucide-react","@/lib/utils"],"components/copilot/ToolCallVisualization.tsx":["react","components/copilot/types.ts","@/components/ui/badge","@/components/ui/card","lucide-react","@/lib/utils"],"components/scenario-lab/CohortPicker.tsx":["react","@/components/ui/select","@/components/ui/checkbox","@/components/ui/label","lucide-react","@/lib/utils"],"components/scenario-lab/DiffVisualization.tsx":["react","@/components/ui/card","@/components/ui/badge","lucide-react","@/lib/utils"],"components/scenario-lab/InsightSearch.tsx":["@/components/ui/input","@/components/ui/label","@/components/ui/badge","@/components/ui/checkbox","lucide-react","@/lib/utils"],"components/scenario-lab/ParameterControls.tsx":["react","@/components/ui/slider","@/components/ui/label","@/components/ui/card","lucide-react","@/lib/utils"],"components/scenario-lab/scenario-lab-old.tsx":["@/components/ui/glass-card","@/components/ui/button","@/components/ui/input","@/components/ui/textarea","@/components/ui/select","@/components/ui/badge","@/components/ui/alert","@/components/ui/slider","@/components/ui/card","@/components/ui/checkbox","@/components/ui/progress","lucide-react","@/lib/utils"],"src/services/llm-tools/base/tool-server.ts":["zod","crypto","events"],"src/services/llm-tools/optimizations/performance-optimizer.ts":["events","lru-cache","p-limit","src/services/llm-tools/base/tool-server.ts"],"src/services/llm-tools/orchestrator.ts":["src/services/llm-tools/base/tool-server.ts","src/services/llm-tools/tools/metrics-tool.ts","src/services/llm-tools/tools/warehouse-sql-tool.ts","src/services/llm-tools/tools/insights-tool.ts","src/services/llm-tools/tools/scenarios-tool.ts","src/services/llm-tools/tools/reports-tool.ts","src/services/llm-tools/tools/explain-rule-tool.ts"],"src/services/llm-tools/schemas.ts":["zod"],"src/services/llm-tools/tools/explain-rule-tool.ts":["zod","src/services/llm-tools/base/tool-server.ts"],"src/services/llm-tools/tools/insights-tool.ts":["zod","src/services/llm-tools/base/tool-server.ts","crypto"],"src/services/llm-tools/tools/metrics-tool.ts":["zod","src/services/llm-tools/base/tool-server.ts"],"src/services/llm-tools/tools/reports-tool.ts":["zod","src/services/llm-tools/base/tool-server.ts"],"src/services/llm-tools/tools/scenarios-tool.ts":["zod","src/services/llm-tools/base/tool-server.ts","crypto"],"src/services/llm-tools/tools/warehouse-sql-tool.ts":["zod","src/services/llm-tools/base/tool-server.ts"],"src/services/rag_optimizer.py":["asyncio","hashlib","time","collections","contextlib","dataclasses","typing","logging","asyncpg","redis.asyncio","prometheus_client","numpy","json","json"],"src/services/rag_service.py":["asyncio","hashlib","json","re","time","dataclasses","datetime","enum","typing","numpy","functools","asyncpg","sentence_transformers","torch"],"tests/llm-tools/setup.ts":["util","crypto"],"tests/test_rag_system.py":["pytest","asyncio","time","json","datetime","typing","numpy","unittest.mock","src.services.rag_service"],"app/layout.tsx":["next/font/google","@/lib/theme-provider"],"app/page.tsx":["react","@/components/layout/navigation-shell","@/components/ui/glass-card","@/components/dashboard/clearance-bar","@/components/dashboard/confidence-chip","@/components/dashboard/insight-card","@/lib/theme-provider"],"components/copilot/CopilotDock.tsx":["components/copilot/types.ts","@/providers/copilot-provider","components/copilot/ToolCallVisualization.tsx","components/copilot/ProposalCard.tsx","components/copilot/MessageList.tsx","@/components/ui/glass-card","@/components/ui/button","@/components/ui/textarea","@/components/ui/badge","@/components/ui/alert","lucide-react","@/lib/utils"],"components/dashboard/clearance-bar.tsx":["react","@/lib/utils"],"components/dashboard/confidence-chip.tsx":["react","@/lib/utils","class-variance-authority"],"components/dashboard/insight-card.tsx":["react","@/lib/utils","@/components/ui/glass-card","components/dashboard/confidence-chip.tsx"],"components/layout/navigation-shell.tsx":["react","@/lib/utils","@/components/ui/glass-card"],"components/scenario-lab/scenario-lab.tsx":["components/scenario-lab/CohortPicker.tsx","components/scenario-lab/ParameterControls.tsx","components/scenario-lab/InsightSearch.tsx","components/scenario-lab/DiffVisualization.tsx","@/components/ui/glass-card","@/components/ui/button","@/components/ui/textarea","@/components/ui/alert","@/components/ui/progress","@/components/ui/label","lucide-react","@/lib/utils"],"components/ui/badge.tsx":["react","@/lib/utils","class-variance-authority"],"components/ui/dialog.tsx":["react","@/lib/utils","lucide-react"],"components/ui/select.tsx":["react","@/lib/utils","lucide-react"],"components/ui/slider.tsx":["react","@/lib/utils"],"components/workflow/checklist-panel.tsx":["react","components/workflow/types/workflow-types.ts","@/components/ui/button","@/components/ui/checkbox","@/components/ui/progress","@/components/ui/glass-card","@/components/ui/badge","lucide-react","@/lib/utils"],"components/workflow/comment-drawer.tsx":["components/workflow/types/workflow-types.ts","@/components/ui/button","@/components/ui/badge","@/components/ui/textarea","@/components/ui/glass-card","lucide-react","@/lib/utils"],"components/workflow/findings-table.tsx":["components/workflow/types/workflow-types.ts","@/components/ui/button","@/components/ui/badge","@/components/ui/checkbox","@/components/ui/glass-card","@/components/ui/select","@/components/ui/input","lucide-react","@/lib/utils"],"components/workflow/granskad-workflow.tsx":["components/workflow/checklist-panel.tsx","components/workflow/findings-table.tsx","components/workflow/comment-drawer.tsx","components/workflow/snapshot-dialog.tsx","components/workflow/hooks/use-granskad-state.ts","components/workflow/hooks/use-audit-logger.ts","components/workflow/types/workflow-types.ts","@/components/ui/button","@/components/ui/alert","@/components/ui/glass-card"],"components/workflow/hooks/use-audit-logger.ts":["react","components/workflow/types/workflow-types.ts"],"components/workflow/hooks/use-granskad-state.ts":["react","components/workflow/types/workflow-types.ts"],"components/workflow/snapshot-dialog.tsx":["components/workflow/types/workflow-types.ts","@/components/ui/button","@/components/ui/badge","@/components/ui/dialog","@/components/ui/alert","lucide-react","@/lib/utils"],"config/config.py":["json","os","pathlib","typing","jsonschema","dataclasses","logging"],"config/example_usage.py":["sys","os","pathlib","config"],"lib/theme-provider.tsx":["react","react"],"lib/utils.ts":["clsx","tailwind-merge"],"run_tests.py":["unittest","sys","time","pathlib","json","datetime","traceback"],"src/database/models.py":["datetime","typing","sqlalchemy","sqlalchemy.ext.declarative","sqlalchemy.orm","sqlalchemy.dialects.postgresql","sqlalchemy.sql","uuid"],"src/services/agent_audit.ts":["src/services/audit-logger.ts","crypto"],"src/services/agent_guardrails.ts":["crypto","lib/utils.ts","src/services/audit-logger.ts"],"src/services/audit-logger.ts":["crypto","fs/promises","path","lib/utils.ts"],"src/services/email_authentication_service.ts":["crypto","dns","src/services/audit-logger.ts"],"src/services/email_webhook_processor.ts":["crypto","fs","path","src/services/audit-logger.ts","src/services/object-storage-client.ts","lib/utils.ts"],"src/services/evidence-pack-batch.ts":["events","lib/utils.ts","src/services/evidence-pack-export.ts","src/services/audit-logger.ts"],"src/services/evidence-pack-compliance.ts":["crypto","fs/promises","lib/utils.ts","src/services/evidence-pack-export.ts","src/services/audit-logger.ts"],"src/services/evidence-pack-export.ts":["crypto","fs","fs/promises","path","zlib","stream/promises","stream","lib/utils.ts"],"src/services/object-storage-client.ts":["crypto","fs","stream/promises","lib/utils.ts"],"src/services/scenario_engine.py":["hashlib","json","asyncio","logging","datetime","decimal","typing","dataclasses","functools","numpy","pandas","cachetools","jsonschema","re","re"],"src/services/storage_encryption_service.ts":["crypto","fs","src/services/audit-logger.ts"],"tests/backend/test_scenario_engine.py":["pytest","asyncio","json","hashlib","datetime","decimal","typing","unittest.mock","numpy","pandas","concurrent.futures","src.services.scenario_engine","tracemalloc"],"tests/frontend/components/glassmorphism.test.tsx":["react","@testing-library/react","@testing-library/user-event","jest-axe","@/components/ui/glassmorphism","@/providers/theme-provider"],"tests/frontend/granskad/__mocks__/archon-mocks.tsx":["react"],"tests/frontend/granskad/setup.ts":["@jest/globals","jest-axe","util","crypto"],"tests/frontend/granskad/test_granskad_layout.tsx":["react","@testing-library/react","@testing-library/user-event","jest-axe","@/components/granskad/GranskadWorkflow","@/components/granskad/ChecklistPanel","@/components/granskad/FindingsTable","@/components/granskad/CommentDrawer","@/lib/theme-provider"],"tests/frontend/navigation/responsive-shell.test.tsx":["react","@testing-library/react","@testing-library/user-event","jest-axe","@/components/navigation","@/hooks/use-media-query","next/navigation"],"tests/frontend/scenario-lab/test_scenario_lab_layout.tsx":["react","@testing-library/react","jest-axe","@testing-library/user-event","@/components/scenario-lab/scenario-lab","@/lib/theme-provider","tests/frontend/granskad/__mocks__/archon-mocks.tsx"],"tests/frontend/theme/dark-mode-accessibility.test.tsx":["react","@testing-library/react","@testing-library/user-event","jest-axe","@/providers/theme-provider","@/providers/accessibility-provider","@/utils/contrast-checker","@/utils/color-blindness"],"tests/infrastructure/conftest.py":["pytest","os","boto3","yaml","pathlib","typing","unittest.mock","logging","shutil"],"tests/infrastructure/test_cicd_pipeline.py":["pytest","json","yaml","subprocess","os","pathlib","typing","boto3","gitlab","github","datetime","requests","unittest.mock","re"],"tests/infrastructure/test_container_orchestration.py":["pytest","yaml","json","subprocess","pathlib","typing","boto3","kubernetes","datetime","requests","unittest.mock"],"tests/infrastructure/test_email_infrastructure.py":["pytest","asyncio","json","hashlib","hmac","base64","datetime","typing","unittest.mock","boto3","botocore.exceptions","email.mime.multipart","email.mime.text","email.mime.application","dkim","dns.resolver","cryptography.hazmat.primitives.ciphers","cryptography.hazmat.backends","cryptography.hazmat.primitives","cryptography.hazmat.primitives.kdf.pbkdf2","pandas","io","src.services.email_webhook_processor","src.services.secure_storage_client","src.services.email_security_validator","src.services.compliance_validator","src.services.signed_url_generator","src.services.storage_lifecycle_manager","src.services.network_isolation_validator","src.services.disaster_recovery_manager","src.services.email_quota_manager"],"tests/infrastructure/test_eu_ees_compliance.py":["pytest","json","boto3","typing","datetime","requests","unittest.mock","re"],"tests/infrastructure/test_network_segmentation.py":["pytest","boto3","ipaddress","typing","json","subprocess","dataclasses","enum"],"tests/infrastructure/test_secrets_management.py":["pytest","boto3","json","os","hashlib","base64","datetime","typing","cryptography.hazmat.primitives","cryptography.hazmat.primitives.asymmetric","cryptography.hazmat.backends","hvac  # HashiCorp Vault client","unittest.mock","re","math","collections","ipaddress"],"tests/infrastructure/test_security_configuration.py":["pytest","boto3","ssl","socket","subprocess","json","hashlib","typing","cryptography","cryptography.hazmat.backends","datetime","requests","OpenSSL","base64"],"tests/infrastructure/test_storage_encryption.py":["pytest","asyncio","hashlib","hmac","os","json","datetime","typing","unittest.mock","boto3","botocore.exceptions","cryptography.hazmat.primitives.ciphers","cryptography.hazmat.backends","cryptography.hazmat.primitives","cryptography.hazmat.primitives.kdf.pbkdf2","cryptography.hazmat.primitives.asymmetric","cryptography.fernet","base64","src.services.encryption_manager","src.services.kms_client","src.services.tls_validator","src.services.key_lifecycle_manager","src.services.encryption_compliance_auditor","src.services.hsm_client","src.services.encryption_performance_monitor"],"tests/infrastructure/test_terraform_validation.py":["pytest","json","subprocess","os","pathlib","typing","hcl2","yaml"],"tests/infrastructure/test_webhook_processing.py":["pytest","asyncio","json","hashlib","hmac","time","uuid","datetime","typing","unittest.mock","dataclasses","redis.asyncio","prometheus_client","boto3","botocore.exceptions","src.services.webhook_validator","src.services.webhook_idempotency_manager","src.services.webhook_retry_manager","src.services.webhook_monitoring_service","src.services.webhook_event_processor","src.services.webhook_data_validator"],"tests/test_agent_guardrails_safety.py":["unittest","asyncio","unittest.mock","datetime","json","re","typing","src.services.agent_guardrails","src.services.agent_audit","src.exceptions.agent_exceptions"],"tests/test_claude_code_hooks.py":["unittest","unittest.mock","asyncio","json","pathlib","tempfile","typing","src.hooks.claude_code_hooks","shutil","time","shutil"],"tests/test_cross_database_consistency.py":["pytest","asyncio","hashlib","time","datetime","decimal","typing","pandas","numpy","duckdb","asyncpg","cryptography.fernet","cryptography.hazmat.primitives","cryptography.hazmat.primitives.kdf.pbkdf2"],"tests/test_database_schema.py":["pytest","asyncio","datetime","decimal","typing","asyncpg","sqlalchemy","sqlalchemy.ext.asyncio","sqlalchemy.orm","sqlalchemy.dialects.postgresql","pgvector.sqlalchemy","alembic","alembic.config","alembic.script","alembic.runtime.migration","alembic","alembic"],"tests/test_dbt_models.py":["pytest","asyncio","subprocess","json","yaml","os","pathlib","datetime","typing","pandas","duckdb","asyncpg","dbt.cli.main","time","time"],"tests/test_duckdb_analytics.py":["pytest","asyncio","time","pandas","numpy","datetime","decimal","typing","duckdb","asyncpg","sqlalchemy.ext.asyncio","sqlalchemy.orm","tempfile","os"],"tests/test_eu_format_handler.py":["unittest","unittest.mock","datetime","decimal","locale","src.parsers.eu_format_handler","pandas","time","pandas"],"tests/test_human_friendly_ids.py":["pytest","asyncio","re","datetime","typing","asyncpg","sqlalchemy.ext.asyncio","sqlalchemy.orm","concurrent.futures","threading","app.services.id_generator","unittest.mock","unittest.mock","time","time","app.services.id_generator","app.services.id_generator"],"tests/test_index_performance.py":["pytest","asyncio","time","random","datetime","decimal","typing","asyncpg","pandas","numpy"],"tests/test_personnummer_validator.py":["unittest","unittest.mock","datetime","re","src.validators.personnummer_validator","pandas","time"],"tests/test_pgvector_performance.py":["pytest","asyncio","time","numpy","datetime","typing","asyncpg","sqlalchemy.ext.asyncio","sqlalchemy.orm","pgvector.asyncpg","openai","sentence_transformers"],"tests/test_scenario_engine_determinism.py":["pytest","asyncio","json","hashlib","time","datetime","typing","decimal","numpy","concurrent.futures","unittest.mock","jsonschema","dataclasses","pandas","app.services.scenario_engine","tracemalloc","gc"],"tests/test_xlsx_parser.py":["unittest","unittest.mock","pandas","datetime","pathlib","tempfile","openpyxl","src.parsers.xlsx_parser","src.parsers.exceptions","shutil","shutil","time","tracemalloc"]},"dir_purposes":{"src/services":"Business logic and external service integrations","tests/llm-tools":"Test files and test utilities","tests":"Test files and test utilities","config":"Configuration files and settings","lib":"Library code and shared modules","src/database":"Data models and schemas","src/services/__tests__":"Test files and test utilities","tests/backend":"Test files and test utilities","tests/frontend/components":"Reusable UI components","tests/frontend/copilot":"Test files and test utilities","tests/frontend/granskad":"Test files and test utilities","tests/frontend/i18n":"Test files and test utilities","tests/frontend/navigation":"Test files and test utilities","tests/frontend/scenario-lab":"Test files and test utilities","tests/frontend/theme":"Test files and test utilities","tests/infrastructure":"Test files and test utilities"},"staleness":1756330587.712871}