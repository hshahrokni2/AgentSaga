{
  "at": "2025-09-05T03:33:01.988628",
  "root": ".",
  "tree": [
    ".",
    "  ├── terraform/",
    "  ├── types/",
    "  ├── locales/",
    "    ├── sv/",
    "    ├── en/",
    "  ├── app/",
    "  ├── config/",
    "    ├── schemas/",
    "  ├── providers/",
    "  ├── tests/",
    "    ├── llm-tools/",
    "    ├── frontend/",
    "      ├── granskad/",
    "        ├── __mocks__/",
    "      ├── insights/",
    "      ├── __mocks__/",
    "      ├── copilot/",
    "      ├── navigation/",
    "      ├── components/"
  ],
  "stats": {
    "total_files": 209,
    "total_directories": 60,
    "fully_parsed": {
      "typescript": 134,
      "python": 42,
      "javascript": 7,
      "json": 13,
      "markdown": 13
    },
    "markdown_files": 13
  },
  "f": {
    "src/services/insights_registry.py": [
      "p",
      [
        "validate_evidence_integrity",
        "__init__",
        "cluster_insights",
        "_generate_link_id",
        "get_markdown_details",
        "get_insights",
        "link_files",
        "find_cross_supplier_patterns",
        "validate_id_format",
        "merge_insights"
      ]
    ],
    "src/services/rag_service.py": [
      "p",
      [
        "_load_model",
        "__init__",
        "search",
        "batch_resolve",
        "HumanFriendlyIDResolver",
        "_create_indexes",
        "generate_embeddings",
        "retrieve",
        "get_document_count",
        "class"
      ]
    ],
    "src/services/llm_agent_gateway.py": [
      "p",
      [
        "stop",
        "fit_context_window",
        "predict_cost",
        "RateLimitError",
        "record_failure",
        "submit_batch",
        "CostTracker",
        "TokenCountError",
        "send_prompt",
        "_call_claude"
      ]
    ],
    "src/services/scenario_engine.py": [
      "p",
      [
        "generate_kpi_diff",
        "generate_flag_diff",
        "calculate_anomaly_burden",
        "DiffGenerator",
        "_calculate_expected_volume",
        "__init__",
        "to_dict",
        "_load_swedish_holidays",
        "_calculate_flag_counts",
        "apply_seasonal_adjustment"
      ]
    ],
    "src/services/rag_optimizer.py": [
      "p",
      [
        "ConnectionPool",
        "RedisCache",
        "__init__",
        "OptimizedRAGService",
        "BatchProcessor",
        "_check_index_usage",
        "_check_index_bloat",
        "set",
        "cls",
        "analyze_query_plan"
      ]
    ],
    "src/services/findings_management.py": [
      "p",
      [
        "get_evidence_chain",
        "search",
        "search_findings",
        "delete_entry",
        "log_event",
        "FindingsBatchProcessor",
        "log_evidence_link",
        "batch_create",
        "Finding",
        "search_text"
      ]
    ],
    "src/services/insights_clustering.py": [
      "p",
      [
        "jaccard_similarity",
        "cluster",
        "detect_temporal_patterns",
        "silhouette_score",
        "davies_bouldin_index",
        "classify_issues",
        "class",
        "compute_adaptive_threshold",
        "cosine_similarity",
        "CrossSupplierAnalyzer"
      ]
    ],
    "src/services/storage_encryption_service.ts": [
      "t",
      [
        "for",
        "catch",
        "constructor",
        "StorageEncryptionService",
        "if"
      ]
    ],
    "src/services/evidence-pack-export.ts": [
      "t",
      [
        "for",
        "while",
        "switch",
        "DataIntegrityValidator",
        "EvidencePackExporter",
        "catch",
        "constructor",
        "ComplianceValidator",
        "if"
      ]
    ],
    "src/services/audit-logger.ts": [
      "t",
      [
        "for",
        "switch",
        "catch",
        "AuditLogger",
        "constructor",
        "if"
      ]
    ],
    "src/services/email_authentication_service.ts": [
      "t",
      [
        "for",
        "catch",
        "constructor",
        "EmailAuthenticationService",
        "if"
      ]
    ],
    "src/services/email_webhook_processor.ts": [
      "t",
      [
        "for",
        "catch",
        "constructor",
        "EmailWebhookProcessor",
        "if"
      ]
    ],
    "src/services/agent_audit.ts": [
      "t",
      [
        "for",
        "AgentAuditLogger",
        "catch",
        "constructor",
        "if"
      ]
    ],
    "src/services/agent_guardrails.ts": [
      "t",
      [
        "for",
        "PIIDetector",
        "PIIDetectionError",
        "TraceabilityError",
        "switch",
        "ActionTracker",
        "catch",
        "UnauthorizedActionError",
        "PolicyValidator",
        "AgentGuardrails"
      ]
    ],
    "src/services/evidence-pack-compliance.ts": [
      "t",
      [
        "for",
        "EvidencePackComplianceValidator",
        "catch",
        "constructor",
        "if"
      ]
    ],
    "src/services/evidence-pack-batch.ts": [
      "t",
      [
        "EvidencePackBatchProcessor",
        "while",
        "for",
        "catch",
        "constructor",
        "processLoop",
        "if"
      ]
    ],
    "src/services/object-storage-client.ts": [
      "t",
      [
        "ObjectStorageClient",
        "catch",
        "constructor",
        "transition",
        "if"
      ]
    ],
    "src/services/llm-tools/orchestrator.ts": [
      "t",
      [
        "createLLMToolOrchestrator",
        "ProposalHandler",
        "ClaudeProvider",
        "AuditLogger",
        "GeminiProvider",
        "GPT4Provider",
        "if"
      ]
    ],
    "src/services/llm-tools/schemas.ts": [
      "t",
      [
        "if",
        "getToolSchemas",
        "generateJSONSchemas",
        "validateToolInput"
      ]
    ],
    "src/services/llm-tools/index.ts": [
      "t",
      [
        "to",
        "getAvailableTools"
      ]
    ],
    "src/services/llm-tools/tools/reports-tool.ts": [
      "t",
      [
        "for",
        "ReportComposeTool",
        "if"
      ]
    ],
    "src/services/llm-tools/tools/warehouse-sql-tool.ts": [
      "t",
      [
        "WarehouseSQLTool",
        "for",
        "if"
      ]
    ],
    "src/services/llm-tools/tools/insights-tool.ts": [
      "t",
      [
        "InsightCreateTool",
        "InsightLinkTool",
        "InsightSearchTool",
        "InsightUpdateTool",
        "if"
      ]
    ],
    "src/services/llm-tools/tools/metrics-tool.ts": [
      "t",
      [
        "switch",
        "MetricsTool",
        "if"
      ]
    ],
    "src/services/llm-tools/tools/explain-rule-tool.ts": [
      "t",
      [
        "ExplainRuleTool",
        "if"
      ]
    ],
    "src/services/llm-tools/tools/scenarios-tool.ts": [
      "t",
      [
        "ScenarioRunTool",
        "catch",
        "ScenarioPlanTool",
        "if"
      ]
    ],
    "src/services/llm-tools/optimizations/performance-optimizer.ts": [
      "t",
      [
        "RequestRouter",
        "for",
        "if",
        "QueryOptimizer",
        "catch",
        "CacheManager",
        "BatchProcessor",
        "ConnectionPoolManager",
        "MetricsCollector",
        "OptimizedToolOrchestrator"
      ]
    ],
    "src/services/llm-tools/base/tool-server.ts": [
      "t",
      [
        "ToolOrchestrator",
        "for",
        "CircuitBreaker",
        "if",
        "SecurityValidator",
        "catch",
        "RateLimiter",
        "BaseTool",
        "export",
        "SwedishFormatter"
      ]
    ],
    "components/insights/insights-list-interface.tsx": [
      "t",
      [
        "toggleSelection",
        "InsightsListInterface",
        "if",
        "toggleRowExpansion",
        "toggleSelectAll",
        "forEach",
        "copyToClipboard",
        "getSeverityIcon",
        "getStatusBadge"
      ]
    ],
    "components/ui/slider.tsx": [
      "t",
      [
        "handleChange"
      ]
    ],
    "components/ui/dialog.tsx": [
      "t",
      [
        "if"
      ]
    ],
    "components/ui/badge.tsx": [
      "t",
      [
        "Badge"
      ]
    ],
    "components/ui/month-range-picker.tsx": [
      "t",
      [
        "handleClear",
        "formatDisplay",
        "MonthRangePicker",
        "handleApply",
        "if"
      ]
    ],
    "components/ui/dropdown-menu.tsx": [
      "t",
      [
        "DropdownMenuShortcut"
      ]
    ],
    "components/ui/select.tsx": [
      "t",
      [
        "handleClick",
        "if",
        "handleClickOutside"
      ]
    ],
    "components/ui/skeleton.tsx": [
      "t",
      [
        "Skeleton"
      ]
    ],
    "components/copilot/CopilotDock.tsx": [
      "t",
      [
        "CopilotDock",
        "if"
      ]
    ],
    "components/copilot/ProposalCard.tsx": [
      "t",
      [
        "if",
        "getConfidenceBadge",
        "ProposalCard"
      ]
    ],
    "components/copilot/MessageList.tsx": [
      "t",
      [
        "renderMessage",
        "MessageList",
        "renderCitation",
        "if"
      ]
    ],
    "components/copilot/CopilotDock-old.tsx": [
      "t",
      [
        "exportConversation",
        "handleKeyDown",
        "handleSendMessage",
        "toggleLanguage",
        "CopilotDock",
        "if"
      ]
    ],
    "components/copilot/ToolCallVisualization.tsx": [
      "t",
      [
        "switch",
        "getStatusIcon",
        "ToolCallVisualization",
        "getStatusText"
      ]
    ],
    "components/layout/navigation-shell.tsx": [
      "t",
      [
        "switch",
        "handleItemClick",
        "handleKeyDown",
        "if"
      ]
    ],
    "components/dashboard/insight-card.tsx": [
      "t",
      [
        "handleKeyDown",
        "switch",
        "handleCardClick",
        "handleActionClick",
        "if"
      ]
    ],
    "components/dashboard/clearance-bar.tsx": [
      "t",
      [
        "if",
        "handleKeyDown",
        "handleSegmentClick"
      ]
    ],
    "components/dashboard/confidence-chip.tsx": [
      "t",
      [
        "handleClick",
        "handleKeyDown",
        "switch",
        "ConfidenceIcon",
        "if"
      ]
    ],
    "components/scenario-lab/InsightSearch.tsx": [
      "t",
      [
        "getSeverityColor",
        "switch",
        "handleSearchChange",
        "InsightSearch",
        "handleInsightToggle",
        "clearSelection"
      ]
    ],
    "components/scenario-lab/ParameterControls.tsx": [
      "t",
      [
        "ParameterControls"
      ]
    ],
    "components/scenario-lab/scenario-lab.tsx": [
      "t",
      [
        "for",
        "handleKeyDown",
        "catch",
        "ScenarioLab",
        "if"
      ]
    ],
    "components/scenario-lab/scenario-lab-old.tsx": [
      "t",
      [
        "handleInsightSearch",
        "handleRun",
        "handleKeyDown",
        "handleSupplierSelect",
        "catch",
        "handleParameterChange",
        "handleInsightSelect",
        "handleSave",
        "handleCreateInsight",
        "ScenarioLab"
      ]
    ],
    "components/scenario-lab/CohortPicker.tsx": [
      "t",
      [
        "handleMonthChange",
        "handleSupplierToggle",
        "CohortPicker"
      ]
    ],
    "components/scenario-lab/DiffVisualization.tsx": [
      "t",
      [
        "getChangeColor",
        "getTrendIcon",
        "switch",
        "getStatusColor",
        "DiffVisualization",
        "if"
      ]
    ],
    "components/findings/findings-triage-interface.tsx": [
      "t",
      [
        "handleLoadFilterPreset",
        "handleSelectFinding",
        "for",
        "renderFindingRow",
        "renderSeverityBadge",
        "handleKeyDown",
        "confirmBatchAction",
        "if",
        "switch",
        "handleSaveFilterPreset"
      ]
    ],
    "components/workflow/checklist-panel.tsx": [
      "t",
      [
        "getStateDisplayName",
        "ChecklistItemRow",
        "switch",
        "handleToggle",
        "getCategoryIcon",
        "ChecklistPanel",
        "if"
      ]
    ],
    "components/workflow/comment-drawer.tsx": [
      "t",
      [
        "handleAddComment",
        "CommentItem",
        "handleCancel",
        "getCommentFindings",
        "insertMarkdown",
        "getSelectedFindingsText",
        "CommentDrawer"
      ]
    ],
    "components/workflow/granskad-workflow.tsx": [
      "t",
      [
        "handleCommentAdd",
        "handleFindingUpdate",
        "map",
        "handleSnapshotConfirm",
        "canMarkAsReviewed",
        "getStateDisplayName",
        "handleChecklistItemToggle",
        "handleStateTransition",
        "catch",
        "GranskadWorkflow"
      ]
    ],
    "components/workflow/findings-table.tsx": [
      "t",
      [
        "handleSelectFinding",
        "FindingsTable",
        "FindingRow",
        "handleRowClick",
        "switch",
        "handleStatusChange",
        "handleSort",
        "handleSelectAll",
        "getSeverityIcon",
        "if"
      ]
    ],
    "components/workflow/snapshot-dialog.tsx": [
      "t",
      [
        "generateDataHash",
        "for",
        "handleConfirm",
        "catch",
        "SnapshotDialog"
      ]
    ],
    "tests/test_agent_guardrails_safety.py": [
      "p",
      [
        "test_pii_confidence_scoring",
        "test_concurrent_session_limiting",
        "test_complete_agent_interaction_pipeline",
        "test_blocking_malicious_request",
        "test_read_only_enforcement",
        "test_detect_swedish_personnummer",
        "TestActionTracker",
        "test_tool_permission_validation",
        "test_batch_proposal_handling",
        "test_apply_phase_with_confirmation"
      ]
    ],
    "tests/test_llm_agent_gateway.py": [
      "p",
      [
        "TestPromptOptimization",
        "test_eu_data_residency_enforcement",
        "test_mixed_language_handling",
        "test_batch_processing_timeout",
        "test_network_failure_and_retry",
        "test_cross_border_transfer_restrictions",
        "test_budget_alerts",
        "slow_response",
        "test_token_counting_before_api_call",
        "TestProviderManagement"
      ]
    ],
    "tests/test_scenario_engine_determinism.py": [
      "p",
      [
        "test_insight_referencing",
        "test_json_schema_validation",
        "test_snapshot_immutability",
        "valid_scenario_params",
        "scenario_engine",
        "class",
        "test_swedish_waste_categories",
        "test_cache_effectiveness",
        "TestScenarioEngineResilience",
        "test_kpi_recalculation_completeness"
      ]
    ],
    "tests/test_dbt_models.py": [
      "p",
      [
        "TestDbtModels",
        "test_dbt_run",
        "test_custom_macros_exist",
        "test_mart_models",
        "test_dbt_deps",
        "test_dbt_snapshot",
        "test_model_performance",
        "test_macro_usage_in_models",
        "test_model_documentation",
        "TestDbtModelConfiguration"
      ]
    ],
    "tests/test_human_friendly_ids.py": [
      "p",
      [
        "TestIDBusinessRules",
        "test_id_immutability",
        "test_id_format_constraint",
        "test_id_recovery_after_failure",
        "test_id_audit_trail",
        "id_generator",
        "test_id_case_sensitivity",
        "test_id_range_query_performance",
        "test_id_validation",
        "TestHumanFriendlyIDGeneration"
      ]
    ],
    "tests/test_database_schema.py": [
      "p",
      [
        "test_migration_data_preservation",
        "test_swedish_text_columns",
        "test_not_null_constraints",
        "test_personnummer_validation_constraint",
        "db_engine",
        "TestDatabaseMigrations",
        "test_scenario_table_with_human_friendly_id",
        "test_finding_table_with_embeddings",
        "test_insight_table_with_human_friendly_id",
        "test_supplier_month_composite_index"
      ]
    ],
    "tests/test_xlsx_parser.py": [
      "p",
      [
        "test_memory_efficient_parsing",
        "setUp",
        "test_parse_xlsx_with_swedish_characters_in_data",
        "test_parse_performance_small_file",
        "TestSwedishXLSXParser",
        "test_parse_xlsx_corrupted_file",
        "test_parse_xlsx_with_mixed_encoding",
        "test_parse_xlsx_invalid_file_format",
        "TestXLSXParserPerformance",
        "test_parse_xlsx_with_swedish_characters_in_headers"
      ]
    ],
    "tests/test_duckdb_analytics.py": [
      "p",
      [
        "test_anomaly_detection_query",
        "test_pivot_table_generation",
        "test_materialized_view_refresh",
        "pg_connection",
        "TestDuckDBPostgreSQLSync",
        "test_time_series_analysis",
        "test_analytics_view_creation",
        "test_query_plan_optimization",
        "test_duckdb_postgres_connection",
        "test_monthly_aggregation_performance"
      ]
    ],
    "tests/test_cross_database_consistency.py": [
      "p",
      [
        "TestComplianceValidation",
        "test_encryption_at_rest",
        "test_gdpr_compliance_checklist",
        "test_row_count_consistency",
        "test_data_locality_compliance",
        "test_data_processing_records",
        "pg_connection",
        "test_data_breach_notification",
        "test_transaction_atomicity",
        "test_right_to_erasure"
      ]
    ],
    "tests/test_eu_format_handler.py": [
      "p",
      [
        "test_convert_us_decimal_dot",
        "TestEUDateParser",
        "TestFormatConverterPerformance",
        "test_invalid_format_handling",
        "test_large_dataset_conversion",
        "test_parse_invalid_dates",
        "test_format_output",
        "test_batch_conversion",
        "test_parse_two_digit_years",
        "test_parse_swedish_month_names"
      ]
    ],
    "tests/test_index_performance.py": [
      "p",
      [
        "test_concurrent_index_access",
        "test_covering_index_performance",
        "query_task",
        "AS",
        "test_month_range_query_performance",
        "test_index_maintenance_impact",
        "test_partial_index_efficiency",
        "test_expression_index",
        "test_gin_index_for_jsonb",
        "c"
      ]
    ],
    "tests/test_pgvector_performance.py": [
      "p",
      [
        "test_rag_context_retrieval_performance",
        "search_task",
        "TestPgVectorPerformance",
        "AS",
        "cls",
        "test_null_embedding_handling",
        "insert_task",
        "embedding_model",
        "test_concurrent_vector_operations",
        "test_similarity_search_performance"
      ]
    ],
    "tests/test_rag_system.py": [
      "p",
      [
        "test_embedding_cache",
        "test_end_to_end_rag_query",
        "large_dataset",
        "test_id_parsing_and_validation",
        "test_hierarchical_fallback",
        "TestRAGPerformanceAndScaling",
        "test_id_search_in_content",
        "test_rag_with_context_window_management",
        "test_filtered_search_performance",
        "test_embedding_generation_accuracy"
      ]
    ],
    "tests/test_personnummer_validator.py": [
      "p",
      [
        "test_redact_audit_log",
        "test_batch_validation",
        "test_validate_10_digit_format",
        "test_validate_temporary_number",
        "test_redact_with_partial_masking",
        "test_validate_standard_12_digit_format",
        "test_redact_with_allowlist",
        "setUp",
        "test_redact_in_dataframe",
        "test_validate_invalid_luhn_checksum"
      ]
    ],
    "tests/test_claude_code_hooks.py": [
      "p",
      [
        "test_validate_personnummer_compliance",
        "test_hook_configuration_validation",
        "test_validation_caching",
        "test_conditional_hook_execution",
        "xlsx_only_hook",
        "test_hook_metrics_collection",
        "TestClaudeCodeHookManager",
        "failing_handler",
        "test_validate_swedish_content",
        "async_validator"
      ]
    ],
    "tests/llm-tools/test_scenarios_tool.ts": [
      "t",
      [
        "for"
      ]
    ],
    "tests/llm-tools/test_warehouse_sql_tool.ts": [
      "t",
      [
        "for"
      ]
    ],
    "tests/llm-tools/test_llm_integration.ts": [
      "t",
      [
        "for",
        "if"
      ]
    ],
    "tests/llm-tools/setup.ts": [
      "t",
      [
        "createMockProvider",
        "if",
        "generateSwedishTestData",
        "catch",
        "createMockLogger",
        "createMockDatabase",
        "createMockCache",
        "mockPerformanceNow",
        "createMockTool"
      ]
    ],
    "tests/llm-tools/test_explain_rule_tool.ts": [
      "t",
      [
        "if"
      ]
    ],
    "tests/frontend/granskad/setup.ts": [
      "t",
      [
        "disconnect",
        "mockSwedishDate",
        "unobserve",
        "generateMockPersonnummer",
        "length",
        "waitForAsync",
        "function",
        "IntersectionObserver",
        "ResizeObserver",
        "localStorageMock"
      ]
    ],
    "tests/frontend/__mocks__/simple-server.ts": [
      "t",
      [
        "if"
      ]
    ],
    "tests/frontend/__mocks__/findings-mocks.ts": [
      "t",
      [
        "filterFindings",
        "for",
        "to",
        "generateMockFindings"
      ]
    ],
    "tests/frontend/__mocks__/server.ts": [
      "t",
      [
        "if"
      ]
    ],
    "tests/frontend/scenario-lab/mocks/scenario-mocks.ts": [
      "t",
      [
        "disconnect",
        "for",
        "mockScenarioAPI",
        "simulateProgressUpdate",
        "simulateError",
        "connect",
        "MockScenarioWebSocket",
        "generateMockHeatmapData",
        "emit",
        "simulateKPIUpdate"
      ]
    ],
    "tests/infrastructure/email-webhook-processor.test.ts": [
      "t",
      [
        "for",
        "if"
      ]
    ],
    "tests/infrastructure/storage-encryption.test.ts": [
      "t",
      [
        "for",
        "catch"
      ]
    ]
  },
  "g": [],
  "dir_purposes": {
    "src/services": "Business logic and service implementations",
    "src/services/llm-tools": "LLM tool server and function calling",
    "components": "React UI components",
    "components/copilot": "AI copilot interface components",
    "components/scenario-lab": "Scenario planning UI",
    "tests": "Test suites and test utilities",
    "config": "Configuration files"
  },
  "staleness": 1757035982
}