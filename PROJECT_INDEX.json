{
  "at": "2025-09-04T12:26:45.485051",
  "root": ".",
  "tree": [
    ".",
    "  ├── terraform/",
    "  ├── types/",
    "  ├── locales/",
    "    ├── sv/",
    "    ├── en/",
    "  ├── app/",
    "  ├── config/",
    "    ├── schemas/",
    "  ├── providers/",
    "  ├── tests/",
    "    ├── llm-tools/",
    "    ├── frontend/",
    "      ├── granskad/",
    "        ├── __mocks__/",
    "      ├── insights/",
    "      ├── __mocks__/",
    "      ├── copilot/",
    "      ├── navigation/",
    "      ├── components/"
  ],
  "stats": {
    "total_files": 202,
    "total_directories": 60,
    "fully_parsed": {
      "typescript": 134,
      "python": 36,
      "javascript": 7,
      "json": 13,
      "markdown": 12
    },
    "markdown_files": 12
  },
  "f": {
    "src/services/rag_service.py": [
      "p",
      [
        "close",
        "EmbeddingModel",
        "to_filter",
        "EmbeddingGenerator",
        "RAGService",
        "set_embedding_store",
        "__aiter__",
        "_generate_answer",
        "__init__",
        "HumanFriendlyIDResolver"
      ]
    ],
    "src/services/llm_agent_gateway.py": [
      "p",
      [
        "predict_cost",
        "_get_regional_endpoint",
        "fit_context_window",
        "RateLimitError",
        "record_failure",
        "truncate_context",
        "_generate_embedding",
        "_find_semantic_match",
        "submit_batch",
        "audit_log"
      ]
    ],
    "src/services/scenario_engine.py": [
      "p",
      [
        "ScenarioValidationError",
        "from_id",
        "format_diff_swedish",
        "_calculate_baseline_volume",
        "apply_seasonal_adjustment",
        "_select_provider",
        "_fetch_data",
        "generate_flag_diff",
        "recover_snapshot",
        "_calculate_data_quality"
      ]
    ],
    "src/services/rag_optimizer.py": [
      "p",
      [
        "flush",
        "close",
        "_execute_single_search",
        "_build_query_params",
        "_execute_batch",
        "from",
        "__init__",
        "_process_batch",
        "add_item",
        "optimize_search_query"
      ]
    ],
    "src/services/storage_encryption_service.ts": [
      "t",
      [
        "StorageEncryptionService",
        "catch",
        "if",
        "constructor",
        "for"
      ]
    ],
    "src/services/evidence-pack-export.ts": [
      "t",
      [
        "DataIntegrityValidator",
        "while",
        "catch",
        "ComplianceValidator",
        "switch",
        "EvidencePackExporter",
        "if",
        "constructor",
        "for"
      ]
    ],
    "src/services/audit-logger.ts": [
      "t",
      [
        "AuditLogger",
        "catch",
        "switch",
        "if",
        "constructor",
        "for"
      ]
    ],
    "src/services/email_authentication_service.ts": [
      "t",
      [
        "EmailAuthenticationService",
        "catch",
        "if",
        "constructor",
        "for"
      ]
    ],
    "src/services/email_webhook_processor.ts": [
      "t",
      [
        "EmailWebhookProcessor",
        "catch",
        "if",
        "constructor",
        "for"
      ]
    ],
    "src/services/agent_audit.ts": [
      "t",
      [
        "catch",
        "AgentAuditLogger",
        "if",
        "constructor",
        "for"
      ]
    ],
    "src/services/agent_guardrails.ts": [
      "t",
      [
        "ConfirmationWorkflow",
        "PIIDetector",
        "AgentGuardrails",
        "SecurityEnforcer",
        "UnauthorizedActionError",
        "catch",
        "TraceabilityError",
        "switch",
        "ActionTracker",
        "if"
      ]
    ],
    "src/services/evidence-pack-compliance.ts": [
      "t",
      [
        "EvidencePackComplianceValidator",
        "catch",
        "if",
        "constructor",
        "for"
      ]
    ],
    "src/services/evidence-pack-batch.ts": [
      "t",
      [
        "EvidencePackBatchProcessor",
        "while",
        "processLoop",
        "catch",
        "if",
        "constructor",
        "for"
      ]
    ],
    "src/services/object-storage-client.ts": [
      "t",
      [
        "catch",
        "ObjectStorageClient",
        "if",
        "transition",
        "constructor"
      ]
    ],
    "src/services/llm-tools/orchestrator.ts": [
      "t",
      [
        "AuditLogger",
        "createLLMToolOrchestrator",
        "GeminiProvider",
        "ClaudeProvider",
        "GPT4Provider",
        "if",
        "ProposalHandler"
      ]
    ],
    "src/services/llm-tools/schemas.ts": [
      "t",
      [
        "getToolSchemas",
        "validateToolInput",
        "generateJSONSchemas",
        "if"
      ]
    ],
    "src/services/llm-tools/index.ts": [
      "t",
      [
        "to",
        "getAvailableTools"
      ]
    ],
    "src/services/llm-tools/tools/reports-tool.ts": [
      "t",
      [
        "ReportComposeTool",
        "for",
        "if"
      ]
    ],
    "src/services/llm-tools/tools/warehouse-sql-tool.ts": [
      "t",
      [
        "WarehouseSQLTool",
        "for",
        "if"
      ]
    ],
    "src/services/llm-tools/tools/insights-tool.ts": [
      "t",
      [
        "InsightLinkTool",
        "InsightSearchTool",
        "InsightUpdateTool",
        "InsightCreateTool",
        "if"
      ]
    ],
    "src/services/llm-tools/tools/metrics-tool.ts": [
      "t",
      [
        "switch",
        "if",
        "MetricsTool"
      ]
    ],
    "src/services/llm-tools/tools/explain-rule-tool.ts": [
      "t",
      [
        "if",
        "ExplainRuleTool"
      ]
    ],
    "src/services/llm-tools/tools/scenarios-tool.ts": [
      "t",
      [
        "catch",
        "ScenarioRunTool",
        "if",
        "ScenarioPlanTool"
      ]
    ],
    "src/services/llm-tools/optimizations/performance-optimizer.ts": [
      "t",
      [
        "RequestRouter",
        "QueryOptimizer",
        "OptimizedToolOrchestrator",
        "MetricsCollector",
        "catch",
        "ConnectionPoolManager",
        "if",
        "BatchProcessor",
        "constructor",
        "for"
      ]
    ],
    "src/services/llm-tools/base/tool-server.ts": [
      "t",
      [
        "SwedishFormatter",
        "export",
        "BaseTool",
        "ToolOrchestrator",
        "SecurityValidator",
        "CircuitBreaker",
        "catch",
        "if",
        "constructor",
        "for"
      ]
    ],
    "components/insights/insights-list-interface.tsx": [
      "t",
      [
        "copyToClipboard",
        "getStatusBadge",
        "toggleRowExpansion",
        "forEach",
        "if",
        "InsightsListInterface",
        "toggleSelection",
        "getSeverityIcon",
        "toggleSelectAll"
      ]
    ],
    "components/ui/slider.tsx": [
      "t",
      [
        "handleChange"
      ]
    ],
    "components/ui/dialog.tsx": [
      "t",
      [
        "if"
      ]
    ],
    "components/ui/badge.tsx": [
      "t",
      [
        "Badge"
      ]
    ],
    "components/ui/month-range-picker.tsx": [
      "t",
      [
        "MonthRangePicker",
        "handleClear",
        "if",
        "formatDisplay",
        "handleApply"
      ]
    ],
    "components/ui/dropdown-menu.tsx": [
      "t",
      [
        "DropdownMenuShortcut"
      ]
    ],
    "components/ui/select.tsx": [
      "t",
      [
        "handleClick",
        "handleClickOutside",
        "if"
      ]
    ],
    "components/ui/skeleton.tsx": [
      "t",
      [
        "Skeleton"
      ]
    ],
    "components/copilot/CopilotDock.tsx": [
      "t",
      [
        "if",
        "CopilotDock"
      ]
    ],
    "components/copilot/ProposalCard.tsx": [
      "t",
      [
        "getConfidenceBadge",
        "ProposalCard",
        "if"
      ]
    ],
    "components/copilot/MessageList.tsx": [
      "t",
      [
        "renderCitation",
        "if",
        "MessageList",
        "renderMessage"
      ]
    ],
    "components/copilot/CopilotDock-old.tsx": [
      "t",
      [
        "toggleLanguage",
        "exportConversation",
        "CopilotDock",
        "handleSendMessage",
        "handleKeyDown",
        "if"
      ]
    ],
    "components/copilot/ToolCallVisualization.tsx": [
      "t",
      [
        "ToolCallVisualization",
        "switch",
        "getStatusText",
        "getStatusIcon"
      ]
    ],
    "components/layout/navigation-shell.tsx": [
      "t",
      [
        "handleKeyDown",
        "switch",
        "handleItemClick",
        "if"
      ]
    ],
    "components/dashboard/insight-card.tsx": [
      "t",
      [
        "handleActionClick",
        "handleCardClick",
        "handleKeyDown",
        "switch",
        "if"
      ]
    ],
    "components/dashboard/clearance-bar.tsx": [
      "t",
      [
        "handleKeyDown",
        "if",
        "handleSegmentClick"
      ]
    ],
    "components/dashboard/confidence-chip.tsx": [
      "t",
      [
        "ConfidenceIcon",
        "handleKeyDown",
        "switch",
        "if",
        "handleClick"
      ]
    ],
    "components/scenario-lab/InsightSearch.tsx": [
      "t",
      [
        "handleInsightToggle",
        "getSeverityColor",
        "clearSelection",
        "switch",
        "handleSearchChange",
        "InsightSearch"
      ]
    ],
    "components/scenario-lab/ParameterControls.tsx": [
      "t",
      [
        "ParameterControls"
      ]
    ],
    "components/scenario-lab/scenario-lab.tsx": [
      "t",
      [
        "ScenarioLab",
        "catch",
        "handleKeyDown",
        "if",
        "for"
      ]
    ],
    "components/scenario-lab/scenario-lab-old.tsx": [
      "t",
      [
        "handleRun",
        "handleSave",
        "handleCreateInsight",
        "ScenarioLab",
        "handleInsightSelect",
        "handleInsightSearch",
        "catch",
        "handleKeyDown",
        "handleSupplierSelect",
        "if"
      ]
    ],
    "components/scenario-lab/CohortPicker.tsx": [
      "t",
      [
        "handleSupplierToggle",
        "CohortPicker",
        "handleMonthChange"
      ]
    ],
    "components/scenario-lab/DiffVisualization.tsx": [
      "t",
      [
        "getChangeColor",
        "getStatusColor",
        "switch",
        "DiffVisualization",
        "if",
        "getTrendIcon"
      ]
    ],
    "components/findings/findings-triage-interface.tsx": [
      "t",
      [
        "handleSaveFilterPreset",
        "handleViewModeChange",
        "FindingsTriageInterface",
        "confirmBatchAction",
        "handleSelectAll",
        "renderSparkline",
        "renderFindingRow",
        "handleKeyDown",
        "switch",
        "handleExpandRow"
      ]
    ],
    "components/workflow/checklist-panel.tsx": [
      "t",
      [
        "ChecklistItemRow",
        "handleToggle",
        "switch",
        "if",
        "getCategoryIcon",
        "ChecklistPanel",
        "getStateDisplayName"
      ]
    ],
    "components/workflow/comment-drawer.tsx": [
      "t",
      [
        "handleCancel",
        "insertMarkdown",
        "getCommentFindings",
        "CommentDrawer",
        "handleAddComment",
        "getSelectedFindingsText",
        "CommentItem"
      ]
    ],
    "components/workflow/granskad-workflow.tsx": [
      "t",
      [
        "handleSnapshotConfirm",
        "getChecklistProgress",
        "handleCommentAdd",
        "canMarkAsReviewed",
        "loadWorkflowData",
        "map",
        "handleFindingUpdate",
        "GranskadWorkflow",
        "handleStateTransition",
        "catch"
      ]
    ],
    "components/workflow/findings-table.tsx": [
      "t",
      [
        "FindingRow",
        "handleSort",
        "handleSelectAll",
        "FindingsTable",
        "switch",
        "handleSelectFinding",
        "handleStatusChange",
        "if",
        "handleRowClick",
        "getSeverityIcon"
      ]
    ],
    "components/workflow/snapshot-dialog.tsx": [
      "t",
      [
        "handleConfirm",
        "SnapshotDialog",
        "catch",
        "generateDataHash",
        "for"
      ]
    ],
    "tests/test_agent_guardrails_safety.py": [
      "p",
      [
        "test_trace_llm_interaction",
        "test_pii_redaction_suggestions",
        "TestPolicyValidator",
        "test_concurrent_session_limiting",
        "test_blocking_malicious_request",
        "run_async_tests",
        "test_trace_write_actions",
        "test_privilege_escalation_detection",
        "in",
        "test_suspicious_pattern_detection"
      ]
    ],
    "tests/test_llm_agent_gateway.py": [
      "p",
      [
        "test_swedish_language_detection",
        "test_user_consent_verification",
        "test_cross_border_transfer_restrictions",
        "language_detector",
        "test_prompt_cache_invalidation",
        "test_budget_enforcement_per_task_type",
        "test_cost_based_routing",
        "test_malformed_response_handling",
        "test_batch_multilingual_processing",
        "test_language_based_provider_routing"
      ]
    ],
    "tests/test_scenario_engine_determinism.py": [
      "p",
      [
        "test_transaction_rollback",
        "test_diff_generation",
        "test_json_schema_validation",
        "test_swedish_supplier_cohorts",
        "test_edge_case_empty_dataset",
        "TestScenarioEngineResilience",
        "test_partial_data_handling",
        "test_swedish_municipality_handling",
        "test_insight_referencing",
        "test_kpi_recalculation_anomaly_burden"
      ]
    ],
    "tests/test_dbt_models.py": [
      "p",
      [
        "TestDbtExecution",
        "test_intermediate_models",
        "test_dbt_compile",
        "test_dbt_project_yml_exists",
        "test_dbt_deps",
        "test_macro_usage_in_models",
        "test_freshness_checks",
        "TestDbtDocumentation",
        "test_dbt_run",
        "test_mart_models"
      ]
    ],
    "tests/test_human_friendly_ids.py": [
      "p",
      [
        "test_id_uniqueness",
        "generate_ids",
        "test_id_lookup_performance",
        "test_id_range_query_performance",
        "test_scenario_id_format",
        "test_id_recovery_after_failure",
        "TestIDQueryPerformance",
        "test_id_immutability",
        "test_id_case_sensitivity",
        "test_id_reserved_sequences"
      ]
    ],
    "tests/test_database_schema.py": [
      "p",
      [
        "db_engine",
        "test_migration_scripts_exist",
        "alembic_config",
        "test_row_table_schema",
        "test_finding_table_with_embeddings",
        "test_foreign_key_constraints",
        "test_cascade_delete_rules",
        "test_load_table_schema",
        "test_personnummer_validation_constraint",
        "TestDatabaseMigrations"
      ]
    ],
    "tests/test_xlsx_parser.py": [
      "p",
      [
        "TestXLSXParserPerformance",
        "test_memory_efficient_parsing",
        "test_parse_xlsx_invalid_file_format",
        "test_parse_xlsx_multiple_sheets",
        "TestSwedishXLSXParser",
        "test_parse_xlsx_large_file_streaming",
        "test_parse_xlsx_empty_file",
        "test_parse_performance_small_file",
        "test_parse_xlsx_corrupted_file",
        "test_parse_xlsx_with_formulas"
      ]
    ],
    "tests/test_duckdb_analytics.py": [
      "p",
      [
        "test_columnar_storage_benefits",
        "test_materialized_view_refresh",
        "test_time_series_analysis",
        "test_query_plan_optimization",
        "test_real_time_sync",
        "pg_connection",
        "test_transaction_consistency",
        "TestDuckDBAnalytics",
        "test_pivot_table_generation",
        "test_window_functions_performance"
      ]
    ],
    "tests/test_cross_database_consistency.py": [
      "p",
      [
        "test_data_breach_notification",
        "test_transaction_atomicity",
        "test_field_level_encryption",
        "test_aggregate_consistency",
        "test_key_rotation",
        "test_gdpr_compliance_checklist",
        "test_data_freshness_sync",
        "duck_connection",
        "TestComplianceValidation",
        "TestDataRetention"
      ]
    ],
    "tests/test_eu_format_handler.py": [
      "p",
      [
        "test_large_dataset_conversion",
        "test_detect_column_types_in_data",
        "test_convert_us_decimal_dot",
        "TestDecimalConverter",
        "TestFormatDetector",
        "TestEUDateParser",
        "test_invalid_format_handling",
        "test_batch_parse_dates",
        "test_preserve_precision",
        "test_parse_two_digit_years"
      ]
    ],
    "tests/test_index_performance.py": [
      "p",
      [
        "test_gin_index_for_jsonb",
        "setup_large_dataset",
        "test_partial_index_efficiency",
        "test_hash_index_for_equality",
        "test_supplier_query_performance",
        "test_multicolumn_statistics",
        "test_supplier_month_combo_query_performance",
        "test_month_range_query_performance",
        "test_expression_index",
        "TestIndexPerformance"
      ]
    ],
    "tests/test_pgvector_performance.py": [
      "p",
      [
        "insert_task",
        "test_null_embedding_handling",
        "test_swedish_semantic_similarity",
        "test_similarity_search_performance",
        "test_embedding_insertion_performance",
        "test_rag_context_retrieval_performance",
        "sample_embeddings",
        "swedish_model",
        "test_multi_vector_search_performance",
        "search_task"
      ]
    ],
    "tests/test_rag_system.py": [
      "p",
      [
        "test_hierarchical_fallback",
        "test_batch_id_resolution",
        "test_filtered_search_performance",
        "hierarchical_data",
        "TestEmbeddingGeneration",
        "TestRAGPerformanceAndScaling",
        "test_embedding_cache",
        "sample_documents",
        "doesn",
        "TestHumanFriendlyIDResolution"
      ]
    ],
    "tests/test_personnummer_validator.py": [
      "p",
      [
        "test_validate_temporary_number",
        "test_validate_standard_12_digit_format",
        "test_redact_audit_log",
        "test_redact_multiple_formats",
        "test_batch_validation",
        "test_redact_with_full_masking",
        "test_redact_with_partial_masking",
        "TestPersonnummerRedactor",
        "test_redact_in_dataframe",
        "test_validate_10_digit_format"
      ]
    ],
    "tests/test_claude_code_hooks.py": [
      "p",
      [
        "test_mcp_tool_async_execution",
        "csv_only_hook",
        "test_validation_caching",
        "test_pre_write_validation_hook",
        "test_mcp_resource_access",
        "test_hook_configuration_validation",
        "tearDown",
        "test_mcp_tool_error_handling",
        "test_register_validation_tool",
        "test_hook_context_mutation"
      ]
    ],
    "tests/llm-tools/test_scenarios_tool.ts": [
      "t",
      [
        "for"
      ]
    ],
    "tests/llm-tools/test_warehouse_sql_tool.ts": [
      "t",
      [
        "for"
      ]
    ],
    "tests/llm-tools/test_llm_integration.ts": [
      "t",
      [
        "for",
        "if"
      ]
    ],
    "tests/llm-tools/setup.ts": [
      "t",
      [
        "generateSwedishTestData",
        "createMockDatabase",
        "createMockLogger",
        "createMockProvider",
        "catch",
        "createMockCache",
        "if",
        "createMockTool",
        "mockPerformanceNow"
      ]
    ],
    "tests/llm-tools/test_explain_rule_tool.ts": [
      "t",
      [
        "if"
      ]
    ],
    "tests/frontend/granskad/setup.ts": [
      "t",
      [
        "waitForAsync",
        "IntersectionObserver",
        "length",
        "takeRecords",
        "localStorageMock",
        "unobserve",
        "function",
        "mockSwedishDate",
        "ResizeObserver",
        "disconnect"
      ]
    ],
    "tests/frontend/__mocks__/simple-server.ts": [
      "t",
      [
        "if"
      ]
    ],
    "tests/frontend/__mocks__/findings-mocks.ts": [
      "t",
      [
        "to",
        "generateMockFindings",
        "for",
        "filterFindings"
      ]
    ],
    "tests/frontend/__mocks__/server.ts": [
      "t",
      [
        "if"
      ]
    ],
    "tests/frontend/scenario-lab/mocks/scenario-mocks.ts": [
      "t",
      [
        "simulateError",
        "simulateKPIUpdate",
        "mockScenarioAPI",
        "emit",
        "MockScenarioWebSocket",
        "disconnect",
        "if",
        "generateMockHeatmapData",
        "simulateProgressUpdate",
        "for"
      ]
    ],
    "tests/infrastructure/email-webhook-processor.test.ts": [
      "t",
      [
        "for",
        "if"
      ]
    ],
    "tests/infrastructure/storage-encryption.test.ts": [
      "t",
      [
        "catch",
        "for"
      ]
    ]
  },
  "g": [],
  "dir_purposes": {
    "src/services": "Business logic and service implementations",
    "src/services/llm-tools": "LLM tool server and function calling",
    "components": "React UI components",
    "components/copilot": "AI copilot interface components",
    "components/scenario-lab": "Scenario planning UI",
    "tests": "Test suites and test utilities",
    "config": "Configuration files"
  },
  "staleness": 1756981605
}